////////////////////////////////////////////////////////////
//
//  

//  Copyright 2022 Antaris, Inc.

//  

//  Licensed under the Apache License, Version 2.0 (the 'License');

//  you may not use this file except in compliance with the License.

//  You may obtain a copy of the License at

//  

//  http://www.apache.org/licenses/LICENSE-2.0

//  

//  Unless required by applicable law or agreed to in writing, software

//  distributed under the License is distributed on an 'AS IS' BASIS,

//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

//  See the License for the specific language governing permissions and

//  limitations under the License.

//  

//  Copyright: Copyright 2022 Antaris, Inc.

//  This is an autogenerated file. Any changes made to this file would likely be over-written at build time.

//  Generated-From: antaris_api.xml

//
////////////////////////////////////////////////////////////



syntax = "proto3";


package antaris_api_peer_to_peer;

enum AntarisReturnCode {
    An_SUCCESS                       = 0; // Success
    An_GENERIC_FAILURE               = -1; // Generic failure
    An_NOT_IMPLEMENTED               = -2; // Feature/interface not implemented
    An_OUT_OF_RESOURCES              = -3; // Not enough resources
    An_NOT_PERMITTED                 = -4; // Operation not allowed
    An_INVALID_PARAMS                = -5; // Invalid parameter
    An_INCOMPATIBLE_VERSION          = -6; // Incompatible version of SDK invocation
}

message AntarisSdkVersion {
    int32                           major            = 1; // major revision number
    int32                           minor            = 2; // minor revision number
    int32                           patch            = 3; // patch number
}

message ReqRegisterParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           health_check_fail_action = 2; // Action to be taken by PC on application health check failure
    AntarisSdkVersion               sdk_version      = 3; // SDK version against used by client
}

message RespRegisterParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           req_status       = 2; // status of registration request
    string                          auth_token       = 3; // auth-token to be used in case secure communication had been requested for while registering
}

message ReqGetCurrentLocationParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
}

message RespGetCurrentLocationParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           req_status       = 2; // status of get-location request
    double                          latitude         = 3; // current latitude
    double                          longitude        = 4; // current longitude
    double                          altitude         = 5; // current altitude
    float                           sd_latitude      = 6; // standard deviation in latitude
    float                           sd_longitude     = 7; // standard deviation in longitude
    float                           sd_altitude      = 8; // standard deviation in altitude
    int64                           determined_at    = 9; // time (seconds since epoch) when the location was determined
}

message ReqStageFileDownloadParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    string                          file_path        = 2; // File path relative to outbound mount-point
}

message RespStageFileDownloadParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           req_status       = 2; // status of stage file-download request
}

message ReqPayloadPowerControlParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           power_operation  = 2; // Power operation : Power-Off (0), Power-On (1)
}

message RespPayloadPowerControlParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           req_status       = 2; // status of payload-power-control request
}

message RespShutdownParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           req_status       = 2; // status of payload application shutdown request
}

message RespHealthCheckParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           application_state = 2; // Application State : Good (0), Error (non-Zero)
    int32                           reqs_to_pc_in_err_cnt = 3; // Number of requests to PC that faced error
    int32                           resps_to_pc_in_err_cnt = 4; // Number of responses to PC that faced error
}

message StartSequenceParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    string                          sequence_id      = 2; // app-defined sequence-id for payload application to execute
    string                          sequence_params  = 3; // app-defined sequence parameters corresponding to the sequence-id
    int64                           scheduled_deadline = 4; // Epoch time till this sequence is allowed to run
}

message ShutdownParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           grace_time       = 2; // grace time in seconds after which the VM will be powered down
}

message HealthCheckParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           application_state = 2; // Application State : Good (0), Error (non-Zero)
    int32                           reqs_to_pc_in_err_cnt = 3; // Number of requests to PC that faced error
    int32                           resps_to_pc_in_err_cnt = 4; // Number of responses to PC that faced error
}

message PayloadMetricsInfo {
    int32                           counter          = 1; // Counter number
    string                          names            = 2; // Counter names, string
}

message ReqPayloadMetricsParams {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
}

message PayloadMetricsResponse {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int64                           timestamp        = 2; // Capture time stamp
    int32                           used_counter     = 3; // Counters used out of maximum 32 counters
    repeated PayloadMetricsInfo     metrics          = 4; // Counter values, maximum 32 counters
}

message CmdSequenceDoneParams {
    string                          sequence_id      = 1; // sequence id that has completed execution. MUST agree with StartSequenceParams.sequence-id.
}

message ReqGnssEphStopDataReq {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
}

message RespGnssEphStopDataReq {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           req_status       = 2; // status of GNSS EPH data stop request
}

message ReqGnssEphStartDataReq {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           periodicity_in_ms = 2; // Time between consecutive notifications in ms
    int32                           eph2_enable      = 3; // 0 = disable eph2, 1 = enable eph2
}

message RespGnssEphStartDataReq {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           req_status       = 2; // status of GNSS EPH data start request
}

message GnssEphData {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           gps_fix_time     = 2; // GPS time
    int32                           gps_sys_time     = 3; // GPS System time
    int64                           obc_time         = 4; // OBC time
    repeated int32                  gps_position_ecef = 5; // GPS position
    repeated int32                  gps_velocity_ecef = 6; // GPS velocity
    int32                           gps_validity_flag_pos_vel = 7; // GPS validity flag
    int64                           adcs_time        = 8; // Orbit time
    repeated int64                  position_wrt_eci = 9; // Position
    repeated int64                  velocity_wrt_eci = 10; // Position
    repeated int64                  position_wrt_ecef = 11; // Position
    repeated int64                  velocity_wrt_ecef = 12; // Position
    repeated int32                  body_rate        = 13; // Body rate
    repeated int32                  attitude         = 14; // RPY WRT LVLH
    repeated int32                  adcs_pos         = 15; // Lat, Lon, Altitude (ADCS)
    repeated int32                  nadir_vector_body = 16; // Nadir vector
    repeated int32                  gd_nadir_vector_body = 17; // GD Nadir Vector Body
    int32                           beta_angle       = 18; // Beta Angle
    int32                           validity_flags   = 19; // 1-bit flags = Time Validity,Position and Velocity ECI Validity, Position and Velocity ECEF Validity, Rate Validity, Attitude Validity,Lat-Lon-Altitude Validity,Nadir Vector Validity,GD Nadir Vector Validity,Beta Angle Validity
}
message ReqGetEpsVoltageStopReq {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
}

message RespGetEpsVoltageStopReq {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           req_status       = 2; // status of get-eps-voltage-stop request
}

message ReqGetEpsVoltageStartReq {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           periodicity_in_ms = 2; // Time between consecutive notifications in ms
}

message RespGetEpsVoltageStartReq {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    int32                           req_status       = 2; // status of get-eps-voltage-start request
}

message GetEpsVoltage {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
    float                           eps_voltage      = 2; // EPS voltage
}
message AntarisCorrelationId {
    int32                           correlation_id   = 1; // correlation id for matching requests with responses and callbacks
}

message AntarisReturnType {
    AntarisReturnCode               return_code      = 1; // return code
}

service AntarisapiApplicationCallback {
    rpc PA_StartSequence(StartSequenceParams) returns (AntarisReturnType) {}
    rpc PA_ShutdownApp(ShutdownParams) returns (AntarisReturnType) {}
    rpc PA_ProcessHealthCheck(HealthCheckParams) returns (AntarisReturnType) {}
    rpc PA_ProcessResponseRegister(RespRegisterParams) returns (AntarisReturnType) {}
    rpc PA_ProcessResponseGetCurrentLocation(RespGetCurrentLocationParams) returns (AntarisReturnType) {}
    rpc PA_ProcessResponseStageFileDownload(RespStageFileDownloadParams) returns (AntarisReturnType) {}
    rpc PA_ProcessResponsePayloadPowerControl(RespPayloadPowerControlParams) returns (AntarisReturnType) {}
    rpc PA_ProcessReqPayloadMetrics(ReqPayloadMetricsParams) returns (AntarisReturnType) {}
    rpc PA_ProcessRespGnssEphStopDataReq(RespGnssEphStopDataReq) returns (AntarisReturnType) {}
    rpc PA_ProcessRespGnssEphStartDataReq(RespGnssEphStartDataReq) returns (AntarisReturnType) {}
    rpc PA_ProcessGnssEphData(GnssEphData) returns (AntarisReturnType) {}
    rpc PA_ProcessRespGetEpsVoltageStopReq(RespGetEpsVoltageStopReq) returns (AntarisReturnType) {}
    rpc PA_ProcessRespGetEpsVoltageStartReq(RespGetEpsVoltageStartReq) returns (AntarisReturnType) {}
    rpc PA_ProcessGetEpsVoltage(GetEpsVoltage) returns (AntarisReturnType) {}
}

service AntarisapiPayloadController {
    rpc PC_register(ReqRegisterParams) returns (AntarisReturnType) {}
    rpc PC_get_current_location(ReqGetCurrentLocationParams) returns (AntarisReturnType) {}
    rpc PC_stage_file_download(ReqStageFileDownloadParams) returns (AntarisReturnType) {}
    rpc PC_sequence_done(CmdSequenceDoneParams) returns (AntarisReturnType) {}
    rpc PC_payload_power_control(ReqPayloadPowerControlParams) returns (AntarisReturnType) {}
    rpc PC_response_health_check(RespHealthCheckParams) returns (AntarisReturnType) {}
    rpc PC_response_shutdown(RespShutdownParams) returns (AntarisReturnType) {}
    rpc PC_response_payload_metrics(PayloadMetricsResponse) returns (AntarisReturnType) {}
    rpc PC_gnss_eph_stop_req(ReqGnssEphStopDataReq) returns (AntarisReturnType) {}
    rpc PC_gnss_eph_start_req(ReqGnssEphStartDataReq) returns (AntarisReturnType) {}
    rpc PC_get_eps_voltage_stop_req(ReqGetEpsVoltageStopReq) returns (AntarisReturnType) {}
    rpc PC_get_eps_voltage_start_req(ReqGetEpsVoltageStartReq) returns (AntarisReturnType) {}
}

