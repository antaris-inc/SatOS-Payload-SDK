###########################################################################
#
#  

#  Copyright 2022 Antaris, Inc.

#  

#  Licensed under the Apache License, Version 2.0 (the 'License');

#  you may not use this file except in compliance with the License.

#  You may obtain a copy of the License at

#  

#  http://www.apache.org/licenses/LICENSE-2.0

#  

#  Unless required by applicable law or agreed to in writing, software

#  distributed under the License is distributed on an 'AS IS' BASIS,

#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

#  See the License for the specific language governing permissions and

#  limitations under the License.

#  

#  Copyright: Copyright 2022 Antaris, Inc.

#  This is an autogenerated file. Any changes made to this file would likely be over-written at build time.

#  Generated-From: antaris_api.xml

#
###########################################################################


from satos_payload_sdk.gen import antaris_api_pb2
from satos_payload_sdk.gen import antaris_api_pb2_grpc

# >>>> Data Types <<<<<

# ENUM: AntarisReturnCode - Api return codes
class AntarisReturnCode:
    An_SUCCESS = 0 # Success
    An_GENERIC_FAILURE = -1 # Generic failure
    An_NOT_IMPLEMENTED = -2 # Feature/interface not implemented
    An_OUT_OF_RESOURCES = -3 # Not enough resources
    An_NOT_PERMITTED = -4 # Operation not allowed
    An_INVALID_PARAMS = -5 # Invalid parameter
    An_INCOMPATIBLE_VERSION = -6 # Incompatible version of SDK invocation


    reverse_dict = {0 : "An_SUCCESS", -1 : "An_GENERIC_FAILURE", -2 : "An_NOT_IMPLEMENTED", -3 : "An_OUT_OF_RESOURCES", -4 : "An_NOT_PERMITTED", -5 : "An_INVALID_PARAMS", -6 : "An_INCOMPATIBLE_VERSION"}



## @class: ReqRegisterParams
## @brief: Request parameters for registering with Payload Controller
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: health_check_fail_action                        :    Action to be taken by PC on application health check failure
class ReqRegisterParams:
    def __init__(self, correlation_id, health_check_fail_action):
        self.correlation_id = correlation_id
        self.health_check_fail_action = health_check_fail_action

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "health_check_fail_action:\n"
        ret_str += str(self.health_check_fail_action) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqRegisterParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    health_check_fail_action = peer_struct.health_check_fail_action
    return ReqRegisterParams(correlation_id, health_check_fail_action)

def app_to_peer_ReqRegisterParams(app_struct):
    return antaris_api_pb2.ReqRegisterParams(correlation_id = app_struct.correlation_id, health_check_fail_action = app_struct.health_check_fail_action)

## @class: RespRegisterParams
## @brief: Response parameters following registration with Payload Controller
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of registration request                  
## @param: auth_token                                      :    auth-token to be used in case secure communication had been requested for while registering
class RespRegisterParams:
    def __init__(self, correlation_id, req_status, auth_token):
        self.correlation_id = correlation_id
        self.req_status = req_status
        self.auth_token = auth_token

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"
        ret_str += "auth_token:\n"
        ret_str += str(self.auth_token) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespRegisterParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    auth_token = peer_struct.auth_token
    return RespRegisterParams(correlation_id, req_status, auth_token)

def app_to_peer_RespRegisterParams(app_struct):
    return antaris_api_pb2.RespRegisterParams(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status, auth_token = app_struct.auth_token)

## @class: ReqGetCurrentLocationParams
## @brief: Parameters for get current location request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
class ReqGetCurrentLocationParams:
    def __init__(self, correlation_id):
        self.correlation_id = correlation_id

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqGetCurrentLocationParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    return ReqGetCurrentLocationParams(correlation_id)

def app_to_peer_ReqGetCurrentLocationParams(app_struct):
    return antaris_api_pb2.ReqGetCurrentLocationParams(correlation_id = app_struct.correlation_id)

## @class: RespGetCurrentLocationParams
## @brief: Response parameters for Get Location Flight Service
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of get-location request                  
## @param: latitude                                        :    current latitude                                
## @param: longitude                                       :    current longitude                               
## @param: altitude                                        :    current altitude                                
## @param: sd_latitude                                     :    standard deviation in latitude                  
## @param: sd_longitude                                    :    standard deviation in longitude                 
## @param: sd_altitude                                     :    standard deviation in altitude                  
## @param: determined_at                                   :    time (seconds since epoch) when the location was determined
class RespGetCurrentLocationParams:
    def __init__(self, correlation_id, req_status, latitude, longitude, altitude, sd_latitude, sd_longitude, sd_altitude, determined_at):
        self.correlation_id = correlation_id
        self.req_status = req_status
        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude
        self.sd_latitude = sd_latitude
        self.sd_longitude = sd_longitude
        self.sd_altitude = sd_altitude
        self.determined_at = determined_at

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"
        ret_str += "latitude:\n"
        ret_str += str(self.latitude) + "\n"
        ret_str += "longitude:\n"
        ret_str += str(self.longitude) + "\n"
        ret_str += "altitude:\n"
        ret_str += str(self.altitude) + "\n"
        ret_str += "sd_latitude:\n"
        ret_str += str(self.sd_latitude) + "\n"
        ret_str += "sd_longitude:\n"
        ret_str += str(self.sd_longitude) + "\n"
        ret_str += "sd_altitude:\n"
        ret_str += str(self.sd_altitude) + "\n"
        ret_str += "determined_at:\n"
        ret_str += str(self.determined_at) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespGetCurrentLocationParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    latitude = peer_struct.latitude
    longitude = peer_struct.longitude
    altitude = peer_struct.altitude
    sd_latitude = peer_struct.sd_latitude
    sd_longitude = peer_struct.sd_longitude
    sd_altitude = peer_struct.sd_altitude
    determined_at = peer_struct.determined_at
    return RespGetCurrentLocationParams(correlation_id, req_status, latitude, longitude, altitude, sd_latitude, sd_longitude, sd_altitude, determined_at)

def app_to_peer_RespGetCurrentLocationParams(app_struct):
    return antaris_api_pb2.RespGetCurrentLocationParams(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status, latitude = app_struct.latitude, longitude = app_struct.longitude, altitude = app_struct.altitude, sd_latitude = app_struct.sd_latitude, sd_longitude = app_struct.sd_longitude, sd_altitude = app_struct.sd_altitude, determined_at = app_struct.determined_at)

## @class: ReqStageFileDownloadParams
## @brief: Request parameters to stage file download
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: file_path                                       :    File path relative to outbound mount-point      
class ReqStageFileDownloadParams:
    def __init__(self, correlation_id, file_path):
        self.correlation_id = correlation_id
        self.file_path = file_path

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "file_path:\n"
        ret_str += str(self.file_path) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqStageFileDownloadParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    file_path = peer_struct.file_path
    return ReqStageFileDownloadParams(correlation_id, file_path)

def app_to_peer_ReqStageFileDownloadParams(app_struct):
    return antaris_api_pb2.ReqStageFileDownloadParams(correlation_id = app_struct.correlation_id, file_path = app_struct.file_path)

## @class: RespStageFileDownloadParams
## @brief: Response parameters for stage file download reqeust
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of stage file-download request           
class RespStageFileDownloadParams:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespStageFileDownloadParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespStageFileDownloadParams(correlation_id, req_status)

def app_to_peer_RespStageFileDownloadParams(app_struct):
    return antaris_api_pb2.RespStageFileDownloadParams(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: ReqPayloadPowerControlParams
## @brief: Request parameters for Payload Power Control
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: power_operation                                 :    Power operation : Power-Off (0), Power-On (1)   
class ReqPayloadPowerControlParams:
    def __init__(self, correlation_id, power_operation):
        self.correlation_id = correlation_id
        self.power_operation = power_operation

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "power_operation:\n"
        ret_str += str(self.power_operation) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqPayloadPowerControlParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    power_operation = peer_struct.power_operation
    return ReqPayloadPowerControlParams(correlation_id, power_operation)

def app_to_peer_ReqPayloadPowerControlParams(app_struct):
    return antaris_api_pb2.ReqPayloadPowerControlParams(correlation_id = app_struct.correlation_id, power_operation = app_struct.power_operation)

## @class: RespPayloadPowerControlParams
## @brief: Response parameters for Payload Power Control request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of payload-power-control request         
class RespPayloadPowerControlParams:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespPayloadPowerControlParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespPayloadPowerControlParams(correlation_id, req_status)

def app_to_peer_RespPayloadPowerControlParams(app_struct):
    return antaris_api_pb2.RespPayloadPowerControlParams(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: RespShutdownParams
## @brief: Response parameters for application shutdown request from PC
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of payload application shutdown request  
class RespShutdownParams:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespShutdownParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespShutdownParams(correlation_id, req_status)

def app_to_peer_RespShutdownParams(app_struct):
    return antaris_api_pb2.RespShutdownParams(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: RespHealthCheckParams
## @brief: Response parameters for Health Check request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: application_state                               :    Application State : Good (0), Error (non-Zero)  
## @param: reqs_to_pc_in_err_cnt                           :    Number of requests to PC that faced error       
## @param: resps_to_pc_in_err_cnt                          :    Number of responses to PC that faced error      
class RespHealthCheckParams:
    def __init__(self, correlation_id, application_state, reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt):
        self.correlation_id = correlation_id
        self.application_state = application_state
        self.reqs_to_pc_in_err_cnt = reqs_to_pc_in_err_cnt
        self.resps_to_pc_in_err_cnt = resps_to_pc_in_err_cnt

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "application_state:\n"
        ret_str += str(self.application_state) + "\n"
        ret_str += "reqs_to_pc_in_err_cnt:\n"
        ret_str += str(self.reqs_to_pc_in_err_cnt) + "\n"
        ret_str += "resps_to_pc_in_err_cnt:\n"
        ret_str += str(self.resps_to_pc_in_err_cnt) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespHealthCheckParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    application_state = peer_struct.application_state
    reqs_to_pc_in_err_cnt = peer_struct.reqs_to_pc_in_err_cnt
    resps_to_pc_in_err_cnt = peer_struct.resps_to_pc_in_err_cnt
    return RespHealthCheckParams(correlation_id, application_state, reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt)

def app_to_peer_RespHealthCheckParams(app_struct):
    return antaris_api_pb2.RespHealthCheckParams(correlation_id = app_struct.correlation_id, application_state = app_struct.application_state, reqs_to_pc_in_err_cnt = app_struct.reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt = app_struct.resps_to_pc_in_err_cnt)

## @class: StartSequenceParams
## @brief: Parameters for Start-Sequence Callback
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: sequence_id                                     :    app-defined sequence-id for payload application to execute
## @param: sequence_params                                 :    app-defined sequence parameters corresponding to the sequence-id
## @param: scheduled_deadline                              :    Epoch time till this sequence is allowed to run 
class StartSequenceParams:
    def __init__(self, correlation_id, sequence_id, sequence_params, scheduled_deadline):
        self.correlation_id = correlation_id
        self.sequence_id = sequence_id
        self.sequence_params = sequence_params
        self.scheduled_deadline = scheduled_deadline

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "sequence_id:\n"
        ret_str += str(self.sequence_id) + "\n"
        ret_str += "sequence_params:\n"
        ret_str += str(self.sequence_params) + "\n"
        ret_str += "scheduled_deadline:\n"
        ret_str += str(self.scheduled_deadline) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_StartSequenceParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    sequence_id = peer_struct.sequence_id
    sequence_params = peer_struct.sequence_params
    scheduled_deadline = peer_struct.scheduled_deadline
    return StartSequenceParams(correlation_id, sequence_id, sequence_params, scheduled_deadline)

def app_to_peer_StartSequenceParams(app_struct):
    return antaris_api_pb2.StartSequenceParams(correlation_id = app_struct.correlation_id, sequence_id = app_struct.sequence_id, sequence_params = app_struct.sequence_params, scheduled_deadline = app_struct.scheduled_deadline)

## @class: ShutdownParams
## @brief: Callback parameters notifying Application of imminent shutdown
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: grace_time                                      :    grace time in seconds after which the VM will be powered down
class ShutdownParams:
    def __init__(self, correlation_id, grace_time):
        self.correlation_id = correlation_id
        self.grace_time = grace_time

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "grace_time:\n"
        ret_str += str(self.grace_time) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ShutdownParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    grace_time = peer_struct.grace_time
    return ShutdownParams(correlation_id, grace_time)

def app_to_peer_ShutdownParams(app_struct):
    return antaris_api_pb2.ShutdownParams(correlation_id = app_struct.correlation_id, grace_time = app_struct.grace_time)

## @class: HealthCheckParams
## @brief: HealthCheck message
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: application_state                               :    Application State : Good (0), Error (non-Zero)  
## @param: reqs_to_pc_in_err_cnt                           :    Number of requests to PC that faced error       
## @param: resps_to_pc_in_err_cnt                          :    Number of responses to PC that faced error      
class HealthCheckParams:
    def __init__(self, correlation_id, application_state, reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt):
        self.correlation_id = correlation_id
        self.application_state = application_state
        self.reqs_to_pc_in_err_cnt = reqs_to_pc_in_err_cnt
        self.resps_to_pc_in_err_cnt = resps_to_pc_in_err_cnt

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "application_state:\n"
        ret_str += str(self.application_state) + "\n"
        ret_str += "reqs_to_pc_in_err_cnt:\n"
        ret_str += str(self.reqs_to_pc_in_err_cnt) + "\n"
        ret_str += "resps_to_pc_in_err_cnt:\n"
        ret_str += str(self.resps_to_pc_in_err_cnt) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_HealthCheckParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    application_state = peer_struct.application_state
    reqs_to_pc_in_err_cnt = peer_struct.reqs_to_pc_in_err_cnt
    resps_to_pc_in_err_cnt = peer_struct.resps_to_pc_in_err_cnt
    return HealthCheckParams(correlation_id, application_state, reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt)

def app_to_peer_HealthCheckParams(app_struct):
    return antaris_api_pb2.HealthCheckParams(correlation_id = app_struct.correlation_id, application_state = app_struct.application_state, reqs_to_pc_in_err_cnt = app_struct.reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt = app_struct.resps_to_pc_in_err_cnt)

## @class: PayloadMetricsInfo
## @brief: Payload Metrics Parameters
## @param: counter                                         :    Counter number                                  
## @param: names                                           :    Counter names, string                           
class PayloadMetricsInfo:
    def __init__(self, counter, names):
        self.counter = counter
        self.names = names

    def __str__(self):
        ret_str = ""
        ret_str += "counter:\n"
        ret_str += str(self.counter) + "\n"
        ret_str += "names:\n"
        ret_str += str(self.names) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_PayloadMetricsInfo(peer_struct):
    counter = peer_struct.counter
    names = peer_struct.names
    return PayloadMetricsInfo(counter, names)

def app_to_peer_PayloadMetricsInfo(app_struct):
    return antaris_api_pb2.PayloadMetricsInfo(counter = app_struct.counter, names = app_struct.names)

## @class: ReqPayloadMetricsParams
## @brief: Payload Metrics Parameters
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
class ReqPayloadMetricsParams:
    def __init__(self, correlation_id):
        self.correlation_id = correlation_id

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqPayloadMetricsParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    return ReqPayloadMetricsParams(correlation_id)

def app_to_peer_ReqPayloadMetricsParams(app_struct):
    return antaris_api_pb2.ReqPayloadMetricsParams(correlation_id = app_struct.correlation_id)

## @class: PayloadMetricsResponse
## @brief: Payload Metrics Parameters
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: timestamp                                       :    Capture time stamp                              
## @param: used_counter                                    :    Counters used out of maximum 32 counters        
## @param: metrics                                         :    Counter values, maximum 32 counters             
class PayloadMetricsResponse:
    def __init__(self, correlation_id, timestamp, used_counter, metrics):
        self.correlation_id = correlation_id
        self.timestamp = timestamp
        self.used_counter = used_counter
        self.metrics = metrics

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "timestamp:\n"
        ret_str += str(self.timestamp) + "\n"
        ret_str += "used_counter:\n"
        ret_str += str(self.used_counter) + "\n"
        ret_str += "metrics:\n"
        ret_str += str(self.metrics) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_PayloadMetricsResponse(peer_struct):
    correlation_id = peer_struct.correlation_id
    timestamp = peer_struct.timestamp
    used_counter = peer_struct.used_counter
    metrics = peer_struct.metrics
    return PayloadMetricsResponse(correlation_id, timestamp, used_counter, metrics)

def app_to_peer_PayloadMetricsResponse(app_struct):
    return antaris_api_pb2.PayloadMetricsResponse(correlation_id = app_struct.correlation_id, timestamp = app_struct.timestamp, used_counter = app_struct.used_counter, metrics = app_struct.metrics)

## @class: CmdSequenceDoneParams
## @brief: Parameters for Command Sequence Done notification to Payload Controller
## @param: sequence_id                                     :    sequence id that has completed execution. MUST agree with StartSequenceParams.sequence-id.
class CmdSequenceDoneParams:
    def __init__(self, sequence_id):
        self.sequence_id = sequence_id

    def __str__(self):
        ret_str = ""
        ret_str += "sequence_id:\n"
        ret_str += str(self.sequence_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_CmdSequenceDoneParams(peer_struct):
    sequence_id = peer_struct.sequence_id
    return CmdSequenceDoneParams(sequence_id)

def app_to_peer_CmdSequenceDoneParams(app_struct):
    return antaris_api_pb2.CmdSequenceDoneParams(sequence_id = app_struct.sequence_id)

## @class: ReqGnssEphStopDataReq
## @brief: Request GNSS EPH data stop
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
class ReqGnssEphStopDataReq:
    def __init__(self, correlation_id):
        self.correlation_id = correlation_id

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqGnssEphStopDataReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    return ReqGnssEphStopDataReq(correlation_id)

def app_to_peer_ReqGnssEphStopDataReq(app_struct):
    return antaris_api_pb2.ReqGnssEphStopDataReq(correlation_id = app_struct.correlation_id)

## @class: RespGnssEphStopDataReq
## @brief: Response to GNSS EPH data stop request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of GNSS EPH data stop request            
class RespGnssEphStopDataReq:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespGnssEphStopDataReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespGnssEphStopDataReq(correlation_id, req_status)

def app_to_peer_RespGnssEphStopDataReq(app_struct):
    return antaris_api_pb2.RespGnssEphStopDataReq(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: ReqGnssEphStartDataReq
## @brief: Request GNSS EPH data start
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: periodicity_in_ms                               :    Time between consecutive notifications in ms    
## @param: eph2_enable                                     :    0 = disable eph2, 1 = enable eph2               
class ReqGnssEphStartDataReq:
    def __init__(self, correlation_id, periodicity_in_ms, eph2_enable):
        self.correlation_id = correlation_id
        self.periodicity_in_ms = periodicity_in_ms
        self.eph2_enable = eph2_enable

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "periodicity_in_ms:\n"
        ret_str += str(self.periodicity_in_ms) + "\n"
        ret_str += "eph2_enable:\n"
        ret_str += str(self.eph2_enable) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqGnssEphStartDataReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    periodicity_in_ms = peer_struct.periodicity_in_ms
    eph2_enable = peer_struct.eph2_enable
    return ReqGnssEphStartDataReq(correlation_id, periodicity_in_ms, eph2_enable)

def app_to_peer_ReqGnssEphStartDataReq(app_struct):
    return antaris_api_pb2.ReqGnssEphStartDataReq(correlation_id = app_struct.correlation_id, periodicity_in_ms = app_struct.periodicity_in_ms, eph2_enable = app_struct.eph2_enable)

## @class: RespGnssEphStartDataReq
## @brief: Response to GNSS EPH data start request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of GNSS EPH data start request           
class RespGnssEphStartDataReq:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespGnssEphStartDataReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespGnssEphStartDataReq(correlation_id, req_status)

def app_to_peer_RespGnssEphStartDataReq(app_struct):
    return antaris_api_pb2.RespGnssEphStartDataReq(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: GnssEphData
## @brief: GNSS Eph1/Eph2 data
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: gps_fix_time                                    :    GPS time                                        
## @param: gps_sys_time                                    :    GPS System time                                 
## @param: obc_time                                        :    OBC time                                        
## @param: gps_position_ecef                               :    GPS position                                    
## @param: gps_velocity_ecef                               :    GPS velocity                                    
## @param: gps_validity_flag_pos_vel                       :    GPS validity flag                               
## @param: adcs_time                                       :    Orbit time                                      
## @param: position_wrt_eci                                :    Position                                        
## @param: velocity_wrt_eci                                :    Position                                        
## @param: position_wrt_ecef                               :    Position                                        
## @param: velocity_wrt_ecef                               :    Position                                        
## @param: body_rate                                       :    Body rate                                       
## @param: attitude                                        :    RPY WRT LVLH                                    
## @param: adcs_pos                                        :    Lat, Lon, Altitude (ADCS)                       
## @param: nadir_vector_body                               :    Nadir vector                                    
## @param: gd_nadir_vector_body                            :    GD Nadir Vector Body                            
## @param: beta_angle                                      :    Beta Angle                                      
## @param: validity_flags                                  :    1-bit flags = Time Validity,Position and Velocity ECI Validity, Position and Velocity ECEF Validity, Rate Validity, Attitude Validity,Lat-Lon-Altitude Validity,Nadir Vector Validity,GD Nadir Vector Validity,Beta Angle Validity
class GnssEphData:
    def __init__(self, correlation_id, gps_fix_time, gps_sys_time, obc_time, gps_position_ecef, gps_velocity_ecef, gps_validity_flag_pos_vel, adcs_time, position_wrt_eci, velocity_wrt_eci, position_wrt_ecef, velocity_wrt_ecef, body_rate, attitude, adcs_pos, nadir_vector_body, gd_nadir_vector_body, beta_angle, validity_flags):
        self.correlation_id = correlation_id
        self.gps_fix_time = gps_fix_time
        self.gps_sys_time = gps_sys_time
        self.obc_time = obc_time
        self.gps_position_ecef = gps_position_ecef
        self.gps_velocity_ecef = gps_velocity_ecef
        self.gps_validity_flag_pos_vel = gps_validity_flag_pos_vel
        self.adcs_time = adcs_time
        self.position_wrt_eci = position_wrt_eci
        self.velocity_wrt_eci = velocity_wrt_eci
        self.position_wrt_ecef = position_wrt_ecef
        self.velocity_wrt_ecef = velocity_wrt_ecef
        self.body_rate = body_rate
        self.attitude = attitude
        self.adcs_pos = adcs_pos
        self.nadir_vector_body = nadir_vector_body
        self.gd_nadir_vector_body = gd_nadir_vector_body
        self.beta_angle = beta_angle
        self.validity_flags = validity_flags

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "gps_fix_time:\n"
        ret_str += str(self.gps_fix_time) + "\n"
        ret_str += "gps_sys_time:\n"
        ret_str += str(self.gps_sys_time) + "\n"
        ret_str += "obc_time:\n"
        ret_str += str(self.obc_time) + "\n"
        ret_str += "gps_position_ecef:\n"
        ret_str += str(self.gps_position_ecef) + "\n"
        ret_str += "gps_velocity_ecef:\n"
        ret_str += str(self.gps_velocity_ecef) + "\n"
        ret_str += "gps_validity_flag_pos_vel:\n"
        ret_str += str(self.gps_validity_flag_pos_vel) + "\n"
        ret_str += "adcs_time:\n"
        ret_str += str(self.adcs_time) + "\n"
        ret_str += "position_wrt_eci:\n"
        ret_str += str(self.position_wrt_eci) + "\n"
        ret_str += "velocity_wrt_eci:\n"
        ret_str += str(self.velocity_wrt_eci) + "\n"
        ret_str += "position_wrt_ecef:\n"
        ret_str += str(self.position_wrt_ecef) + "\n"
        ret_str += "velocity_wrt_ecef:\n"
        ret_str += str(self.velocity_wrt_ecef) + "\n"
        ret_str += "body_rate:\n"
        ret_str += str(self.body_rate) + "\n"
        ret_str += "attitude:\n"
        ret_str += str(self.attitude) + "\n"
        ret_str += "adcs_pos:\n"
        ret_str += str(self.adcs_pos) + "\n"
        ret_str += "nadir_vector_body:\n"
        ret_str += str(self.nadir_vector_body) + "\n"
        ret_str += "gd_nadir_vector_body:\n"
        ret_str += str(self.gd_nadir_vector_body) + "\n"
        ret_str += "beta_angle:\n"
        ret_str += str(self.beta_angle) + "\n"
        ret_str += "validity_flags:\n"
        ret_str += str(self.validity_flags) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_GnssEphData(peer_struct):
    correlation_id = peer_struct.correlation_id
    gps_fix_time = peer_struct.gps_fix_time
    gps_sys_time = peer_struct.gps_sys_time
    obc_time = peer_struct.obc_time
    gps_position_ecef = peer_struct.gps_position_ecef
    gps_velocity_ecef = peer_struct.gps_velocity_ecef
    gps_validity_flag_pos_vel = peer_struct.gps_validity_flag_pos_vel
    adcs_time = peer_struct.adcs_time
    position_wrt_eci = peer_struct.position_wrt_eci
    velocity_wrt_eci = peer_struct.velocity_wrt_eci
    position_wrt_ecef = peer_struct.position_wrt_ecef
    velocity_wrt_ecef = peer_struct.velocity_wrt_ecef
    body_rate = peer_struct.body_rate
    attitude = peer_struct.attitude
    adcs_pos = peer_struct.adcs_pos
    nadir_vector_body = peer_struct.nadir_vector_body
    gd_nadir_vector_body = peer_struct.gd_nadir_vector_body
    beta_angle = peer_struct.beta_angle
    validity_flags = peer_struct.validity_flags
    return GnssEphData(correlation_id, gps_fix_time, gps_sys_time, obc_time, gps_position_ecef, gps_velocity_ecef, gps_validity_flag_pos_vel, adcs_time, position_wrt_eci, velocity_wrt_eci, position_wrt_ecef, velocity_wrt_ecef, body_rate, attitude, adcs_pos, nadir_vector_body, gd_nadir_vector_body, beta_angle, validity_flags)

def app_to_peer_GnssEphData(app_struct):
    return antaris_api_pb2.GnssEphData(correlation_id = app_struct.correlation_id, gps_fix_time = app_struct.gps_fix_time, gps_sys_time = app_struct.gps_sys_time, obc_time = app_struct.obc_time, gps_position_ecef = app_struct.gps_position_ecef, gps_velocity_ecef = app_struct.gps_velocity_ecef, gps_validity_flag_pos_vel = app_struct.gps_validity_flag_pos_vel, adcs_time = app_struct.adcs_time, position_wrt_eci = app_struct.position_wrt_eci, velocity_wrt_eci = app_struct.velocity_wrt_eci, position_wrt_ecef = app_struct.position_wrt_ecef, velocity_wrt_ecef = app_struct.velocity_wrt_ecef, body_rate = app_struct.body_rate, attitude = app_struct.attitude, adcs_pos = app_struct.adcs_pos, nadir_vector_body = app_struct.nadir_vector_body, gd_nadir_vector_body = app_struct.gd_nadir_vector_body, beta_angle = app_struct.beta_angle, validity_flags = app_struct.validity_flags)

## @class: ReqGetEpsVoltageStopReq
## @brief: Stop request get-eps-voltage
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
class ReqGetEpsVoltageStopReq:
    def __init__(self, correlation_id):
        self.correlation_id = correlation_id

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqGetEpsVoltageStopReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    return ReqGetEpsVoltageStopReq(correlation_id)

def app_to_peer_ReqGetEpsVoltageStopReq(app_struct):
    return antaris_api_pb2.ReqGetEpsVoltageStopReq(correlation_id = app_struct.correlation_id)

## @class: RespGetEpsVoltageStopReq
## @brief: Response to stop get-eps-voltage
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of get-eps-voltage-stop request          
class RespGetEpsVoltageStopReq:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespGetEpsVoltageStopReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespGetEpsVoltageStopReq(correlation_id, req_status)

def app_to_peer_RespGetEpsVoltageStopReq(app_struct):
    return antaris_api_pb2.RespGetEpsVoltageStopReq(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: ReqGetEpsVoltageStartReq
## @brief: Start request eps voltage
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: periodicity_in_ms                               :    Time between consecutive notifications in ms    
class ReqGetEpsVoltageStartReq:
    def __init__(self, correlation_id, periodicity_in_ms):
        self.correlation_id = correlation_id
        self.periodicity_in_ms = periodicity_in_ms

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "periodicity_in_ms:\n"
        ret_str += str(self.periodicity_in_ms) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqGetEpsVoltageStartReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    periodicity_in_ms = peer_struct.periodicity_in_ms
    return ReqGetEpsVoltageStartReq(correlation_id, periodicity_in_ms)

def app_to_peer_ReqGetEpsVoltageStartReq(app_struct):
    return antaris_api_pb2.ReqGetEpsVoltageStartReq(correlation_id = app_struct.correlation_id, periodicity_in_ms = app_struct.periodicity_in_ms)

## @class: RespGetEpsVoltageStartReq
## @brief: Response to start get eps voltage
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of get-eps-voltage-start request         
class RespGetEpsVoltageStartReq:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespGetEpsVoltageStartReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespGetEpsVoltageStartReq(correlation_id, req_status)

def app_to_peer_RespGetEpsVoltageStartReq(app_struct):
    return antaris_api_pb2.RespGetEpsVoltageStartReq(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: GetEpsVoltage
## @brief: get EPS voltage1
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: eps_voltage                                     :    EPS voltage                                     
class GetEpsVoltage:
    def __init__(self, correlation_id, eps_voltage):
        self.correlation_id = correlation_id
        self.eps_voltage = eps_voltage

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "eps_voltage:\n"
        ret_str += str(self.eps_voltage) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_GetEpsVoltage(peer_struct):
    correlation_id = peer_struct.correlation_id
    eps_voltage = peer_struct.eps_voltage
    return GetEpsVoltage(correlation_id, eps_voltage)

def app_to_peer_GetEpsVoltage(app_struct):
    return antaris_api_pb2.GetEpsVoltage(correlation_id = app_struct.correlation_id, eps_voltage = app_struct.eps_voltage)

## @class: AntarisApiCallbackFuncList
## @brief: Callback-functions registration structure for channel creation
## @param: start_sequence                                  :    callback handler for start-sequence             
## @param: shutdown_app                                    :    callback handler for shutdown-app               
## @param: process_health_check                            :    callback handler for health-check request from PC
## @param: process_response_register                       :    callback handler for registration response      
## @param: process_response_get_current_location           :    callback handler for current-location response  
## @param: process_response_stage_file_download            :    callback handler for stage file download response
## @param: process_response_payload_power_control          :    callback handler for payload power control response
## @param: req_payload_metrics                             :    callback handler for request payload stats from PC
## @param: process_response_gnss_eph_stop                  :    callback handler for GNSS EPH data stop response
## @param: process_response_gnss_eph_start                 :    callback handler for GNSS EPH data start response
## @param: process_cb_gnss_eph_data                        :    callback handler for GNSS EPH data              
## @param: process_response_get_eps_voltage_stop           :    callback handler for get EPS voltage data stop  
## @param: process_response_get_eps_voltage_start          :    callback handler for get EPS voltage data start 
## @param: process_cb_get_eps_voltage                      :    callback handler for EPS voltage data           
class AntarisApiCallbackFuncList:
    def __init__(self, start_sequence, shutdown_app, process_health_check, process_response_register, process_response_get_current_location, process_response_stage_file_download, process_response_payload_power_control, req_payload_metrics, process_response_gnss_eph_stop, process_response_gnss_eph_start, process_cb_gnss_eph_data, process_response_get_eps_voltage_stop, process_response_get_eps_voltage_start, process_cb_get_eps_voltage):
        self.start_sequence = start_sequence
        self.shutdown_app = shutdown_app
        self.process_health_check = process_health_check
        self.process_response_register = process_response_register
        self.process_response_get_current_location = process_response_get_current_location
        self.process_response_stage_file_download = process_response_stage_file_download
        self.process_response_payload_power_control = process_response_payload_power_control
        self.req_payload_metrics = req_payload_metrics
        self.process_response_gnss_eph_stop = process_response_gnss_eph_stop
        self.process_response_gnss_eph_start = process_response_gnss_eph_start
        self.process_cb_gnss_eph_data = process_cb_gnss_eph_data
        self.process_response_get_eps_voltage_stop = process_response_get_eps_voltage_stop
        self.process_response_get_eps_voltage_start = process_response_get_eps_voltage_start
        self.process_cb_get_eps_voltage = process_cb_get_eps_voltage

    def __str__(self):
        ret_str = ""
        ret_str += "start_sequence:\n"
        ret_str += str(self.start_sequence) + "\n"
        ret_str += "shutdown_app:\n"
        ret_str += str(self.shutdown_app) + "\n"
        ret_str += "process_health_check:\n"
        ret_str += str(self.process_health_check) + "\n"
        ret_str += "process_response_register:\n"
        ret_str += str(self.process_response_register) + "\n"
        ret_str += "process_response_get_current_location:\n"
        ret_str += str(self.process_response_get_current_location) + "\n"
        ret_str += "process_response_stage_file_download:\n"
        ret_str += str(self.process_response_stage_file_download) + "\n"
        ret_str += "process_response_payload_power_control:\n"
        ret_str += str(self.process_response_payload_power_control) + "\n"
        ret_str += "req_payload_metrics:\n"
        ret_str += str(self.req_payload_metrics) + "\n"
        ret_str += "process_response_gnss_eph_stop:\n"
        ret_str += str(self.process_response_gnss_eph_stop) + "\n"
        ret_str += "process_response_gnss_eph_start:\n"
        ret_str += str(self.process_response_gnss_eph_start) + "\n"
        ret_str += "process_cb_gnss_eph_data:\n"
        ret_str += str(self.process_cb_gnss_eph_data) + "\n"
        ret_str += "process_response_get_eps_voltage_stop:\n"
        ret_str += str(self.process_response_get_eps_voltage_stop) + "\n"
        ret_str += "process_response_get_eps_voltage_start:\n"
        ret_str += str(self.process_response_get_eps_voltage_start) + "\n"
        ret_str += "process_cb_get_eps_voltage:\n"
        ret_str += str(self.process_cb_get_eps_voltage) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_AntarisApiCallbackFuncList(peer_struct):
    start_sequence = peer_struct.start_sequence
    shutdown_app = peer_struct.shutdown_app
    process_health_check = peer_struct.process_health_check
    process_response_register = peer_struct.process_response_register
    process_response_get_current_location = peer_struct.process_response_get_current_location
    process_response_stage_file_download = peer_struct.process_response_stage_file_download
    process_response_payload_power_control = peer_struct.process_response_payload_power_control
    req_payload_metrics = peer_struct.req_payload_metrics
    process_response_gnss_eph_stop = peer_struct.process_response_gnss_eph_stop
    process_response_gnss_eph_start = peer_struct.process_response_gnss_eph_start
    process_cb_gnss_eph_data = peer_struct.process_cb_gnss_eph_data
    process_response_get_eps_voltage_stop = peer_struct.process_response_get_eps_voltage_stop
    process_response_get_eps_voltage_start = peer_struct.process_response_get_eps_voltage_start
    process_cb_get_eps_voltage = peer_struct.process_cb_get_eps_voltage
    return AntarisApiCallbackFuncList(start_sequence, shutdown_app, process_health_check, process_response_register, process_response_get_current_location, process_response_stage_file_download, process_response_payload_power_control, req_payload_metrics, process_response_gnss_eph_stop, process_response_gnss_eph_start, process_cb_gnss_eph_data, process_response_get_eps_voltage_stop, process_response_get_eps_voltage_start, process_cb_get_eps_voltage)

def app_to_peer_AntarisApiCallbackFuncList(app_struct):
    return antaris_api_pb2.AntarisApiCallbackFuncList(start_sequence = app_struct.start_sequence, shutdown_app = app_struct.shutdown_app, process_health_check = app_struct.process_health_check, process_response_register = app_struct.process_response_register, process_response_get_current_location = app_struct.process_response_get_current_location, process_response_stage_file_download = app_struct.process_response_stage_file_download, process_response_payload_power_control = app_struct.process_response_payload_power_control, req_payload_metrics = app_struct.req_payload_metrics, process_response_gnss_eph_stop = app_struct.process_response_gnss_eph_stop, process_response_gnss_eph_start = app_struct.process_response_gnss_eph_start, process_cb_gnss_eph_data = app_struct.process_cb_gnss_eph_data, process_response_get_eps_voltage_stop = app_struct.process_response_get_eps_voltage_stop, process_response_get_eps_voltage_start = app_struct.process_response_get_eps_voltage_start, process_cb_get_eps_voltage = app_struct.process_cb_get_eps_voltage)

## @class: AntarisReturnType
## @brief: Wrapper structure for AntarisReturnCode
## @param: return_code                                     :    return code                                     
class AntarisReturnType:
    def __init__(self, return_code):
        self.return_code = return_code

    def __str__(self):
        ret_str = ""
        ret_str += "return_code:\n"
        ret_str += str(self.return_code) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_AntarisReturnType(peer_struct):
    return_code = peer_struct.return_code
    return AntarisReturnType(return_code)

def app_to_peer_AntarisReturnType(app_struct):
    return antaris_api_pb2.AntarisReturnType(return_code = app_struct.return_code)

