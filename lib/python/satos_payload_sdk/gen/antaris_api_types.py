###########################################################################
#
#  

#  Copyright 2022 Antaris, Inc.

#  

#  Licensed under the Apache License, Version 2.0 (the 'License');

#  you may not use this file except in compliance with the License.

#  You may obtain a copy of the License at

#  

#  http://www.apache.org/licenses/LICENSE-2.0

#  

#  Unless required by applicable law or agreed to in writing, software

#  distributed under the License is distributed on an 'AS IS' BASIS,

#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

#  See the License for the specific language governing permissions and

#  limitations under the License.

#  

#  Copyright: Copyright 2022 Antaris, Inc.

#  This is an autogenerated file. Any changes made to this file would likely be over-written at build time.

#  Generated-From: antaris_api.xml

#
###########################################################################


from satos_payload_sdk.gen import antaris_api_pb2
from satos_payload_sdk.gen import antaris_api_pb2_grpc

# >>>> Data Types <<<<<

# ENUM: AntarisReturnCode - Api return codes
class AntarisReturnCode:
    An_SUCCESS = 0 # Success
    An_GENERIC_FAILURE = -1 # Generic failure
    An_NOT_IMPLEMENTED = -2 # Feature/interface not implemented
    An_OUT_OF_RESOURCES = -3 # Not enough resources
    An_NOT_PERMITTED = -4 # Operation not allowed
    An_INVALID_PARAMS = -5 # Invalid parameter
    An_INCOMPATIBLE_VERSION = -6 # Incompatible version of SDK invocation


    reverse_dict = {0 : "An_SUCCESS", -1 : "An_GENERIC_FAILURE", -2 : "An_NOT_IMPLEMENTED", -3 : "An_OUT_OF_RESOURCES", -4 : "An_NOT_PERMITTED", -5 : "An_INVALID_PARAMS", -6 : "An_INCOMPATIBLE_VERSION"}



# ENUM: FilePriorities - File priority
class FilePriorities:
    FILE_DL_PRIORITY_LOW = 0 # low priority
    FILE_DL_PRIORITY_NORMAL = 1 # normal priority
    FILE_DL_PRIORITY_HIGH = 2 # high priority
    FILE_DL_PRIORITY_IMMEDIATE = 3 # highest priority


    reverse_dict = {0 : "FILE_DL_PRIORITY_LOW", 1 : "FILE_DL_PRIORITY_NORMAL", 2 : "FILE_DL_PRIORITY_HIGH", 3 : "FILE_DL_PRIORITY_IMMEDIATE"}



# ENUM: FileDlRadioType - File priority
class FileDlRadioType:
    FILE_DL_SBAND = 0 # S-band file downlink
    FILE_DL_XBAND = 1 # X-band file downlink


    reverse_dict = {0 : "FILE_DL_SBAND", 1 : "FILE_DL_XBAND"}



## @class: ReqRegisterParams
## @brief: Request parameters for registering with Payload Controller
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: health_check_fail_action                        :    Action to be taken by PC on application health check failure
class ReqRegisterParams:
    def __init__(self, correlation_id, health_check_fail_action):
        self.correlation_id = correlation_id
        self.health_check_fail_action = health_check_fail_action

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "health_check_fail_action:\n"
        ret_str += str(self.health_check_fail_action) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqRegisterParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    health_check_fail_action = peer_struct.health_check_fail_action
    return ReqRegisterParams(correlation_id, health_check_fail_action)

def app_to_peer_ReqRegisterParams(app_struct):
    return antaris_api_pb2.ReqRegisterParams(correlation_id = app_struct.correlation_id, health_check_fail_action = app_struct.health_check_fail_action)

## @class: RespRegisterParams
## @brief: Response parameters following registration with Payload Controller
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of registration request                  
## @param: auth_token                                      :    auth-token to be used in case secure communication had been requested for while registering
class RespRegisterParams:
    def __init__(self, correlation_id, req_status, auth_token):
        self.correlation_id = correlation_id
        self.req_status = req_status
        self.auth_token = auth_token

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"
        ret_str += "auth_token:\n"
        ret_str += str(self.auth_token) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespRegisterParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    auth_token = peer_struct.auth_token
    return RespRegisterParams(correlation_id, req_status, auth_token)

def app_to_peer_RespRegisterParams(app_struct):
    return antaris_api_pb2.RespRegisterParams(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status, auth_token = app_struct.auth_token)

## @class: ReqGetCurrentLocationParams
## @brief: Parameters for get current location request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
class ReqGetCurrentLocationParams:
    def __init__(self, correlation_id):
        self.correlation_id = correlation_id

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqGetCurrentLocationParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    return ReqGetCurrentLocationParams(correlation_id)

def app_to_peer_ReqGetCurrentLocationParams(app_struct):
    return antaris_api_pb2.ReqGetCurrentLocationParams(correlation_id = app_struct.correlation_id)

## @class: RespGetCurrentLocationParams
## @brief: Response parameters for Get Location Flight Service
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of get-location request                  
## @param: latitude                                        :    current latitude                                
## @param: longitude                                       :    current longitude                               
## @param: altitude                                        :    current altitude                                
## @param: sd_latitude                                     :    standard deviation in latitude                  
## @param: sd_longitude                                    :    standard deviation in longitude                 
## @param: sd_altitude                                     :    standard deviation in altitude                  
## @param: determined_at                                   :    time (seconds since epoch) when the location was determined
class RespGetCurrentLocationParams:
    def __init__(self, correlation_id, req_status, latitude, longitude, altitude, sd_latitude, sd_longitude, sd_altitude, determined_at):
        self.correlation_id = correlation_id
        self.req_status = req_status
        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude
        self.sd_latitude = sd_latitude
        self.sd_longitude = sd_longitude
        self.sd_altitude = sd_altitude
        self.determined_at = determined_at

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"
        ret_str += "latitude:\n"
        ret_str += str(self.latitude) + "\n"
        ret_str += "longitude:\n"
        ret_str += str(self.longitude) + "\n"
        ret_str += "altitude:\n"
        ret_str += str(self.altitude) + "\n"
        ret_str += "sd_latitude:\n"
        ret_str += str(self.sd_latitude) + "\n"
        ret_str += "sd_longitude:\n"
        ret_str += str(self.sd_longitude) + "\n"
        ret_str += "sd_altitude:\n"
        ret_str += str(self.sd_altitude) + "\n"
        ret_str += "determined_at:\n"
        ret_str += str(self.determined_at) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespGetCurrentLocationParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    latitude = peer_struct.latitude
    longitude = peer_struct.longitude
    altitude = peer_struct.altitude
    sd_latitude = peer_struct.sd_latitude
    sd_longitude = peer_struct.sd_longitude
    sd_altitude = peer_struct.sd_altitude
    determined_at = peer_struct.determined_at
    return RespGetCurrentLocationParams(correlation_id, req_status, latitude, longitude, altitude, sd_latitude, sd_longitude, sd_altitude, determined_at)

def app_to_peer_RespGetCurrentLocationParams(app_struct):
    return antaris_api_pb2.RespGetCurrentLocationParams(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status, latitude = app_struct.latitude, longitude = app_struct.longitude, altitude = app_struct.altitude, sd_latitude = app_struct.sd_latitude, sd_longitude = app_struct.sd_longitude, sd_altitude = app_struct.sd_altitude, determined_at = app_struct.determined_at)

## @class: ReqStageFileDownloadParams
## @brief: Request parameters to stage file download
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: file_path                                       :    File path relative to outbound mount-point      
## @param: file_priority                                   :    File priority                                   
## @param: file_dl_band                                    :    Radio Type for file downlink                    
class ReqStageFileDownloadParams:
    def __init__(self, correlation_id, file_path, file_priority, file_dl_band):
        self.correlation_id = correlation_id
        self.file_path = file_path
        self.file_priority = file_priority
        self.file_dl_band = file_dl_band

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "file_path:\n"
        ret_str += str(self.file_path) + "\n"
        ret_str += "file_priority:\n"
        ret_str += str(self.file_priority) + "\n"
        ret_str += "file_dl_band:\n"
        ret_str += str(self.file_dl_band) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqStageFileDownloadParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    file_path = peer_struct.file_path
    file_priority = peer_struct.file_priority
    file_dl_band = peer_struct.file_dl_band
    return ReqStageFileDownloadParams(correlation_id, file_path, file_priority, file_dl_band)

def app_to_peer_ReqStageFileDownloadParams(app_struct):
    return antaris_api_pb2.ReqStageFileDownloadParams(correlation_id = app_struct.correlation_id, file_path = app_struct.file_path, file_priority = app_struct.file_priority, file_dl_band = app_struct.file_dl_band)

## @class: RespStageFileDownloadParams
## @brief: Response parameters for stage file download reqeust
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of stage file-download request           
class RespStageFileDownloadParams:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespStageFileDownloadParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespStageFileDownloadParams(correlation_id, req_status)

def app_to_peer_RespStageFileDownloadParams(app_struct):
    return antaris_api_pb2.RespStageFileDownloadParams(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: ReqPayloadPowerControlParams
## @brief: Request parameters for Payload Power Control
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: power_operation                                 :    Power operation : Power-Off (0), Power-On (1)   
## @param: hw_id                                           :    HW Id of Payload                                
class ReqPayloadPowerControlParams:
    def __init__(self, correlation_id, power_operation, hw_id):
        self.correlation_id = correlation_id
        self.power_operation = power_operation
        self.hw_id = hw_id

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "power_operation:\n"
        ret_str += str(self.power_operation) + "\n"
        ret_str += "hw_id:\n"
        ret_str += str(self.hw_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqPayloadPowerControlParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    power_operation = peer_struct.power_operation
    hw_id = peer_struct.hw_id
    return ReqPayloadPowerControlParams(correlation_id, power_operation, hw_id)

def app_to_peer_ReqPayloadPowerControlParams(app_struct):
    return antaris_api_pb2.ReqPayloadPowerControlParams(correlation_id = app_struct.correlation_id, power_operation = app_struct.power_operation, hw_id = app_struct.hw_id)

## @class: RespPayloadPowerControlParams
## @brief: Response parameters for Payload Power Control request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of payload-power-control request         
class RespPayloadPowerControlParams:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespPayloadPowerControlParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespPayloadPowerControlParams(correlation_id, req_status)

def app_to_peer_RespPayloadPowerControlParams(app_struct):
    return antaris_api_pb2.RespPayloadPowerControlParams(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: RespShutdownParams
## @brief: Response parameters for application shutdown request from PC
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of payload application shutdown request  
class RespShutdownParams:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespShutdownParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespShutdownParams(correlation_id, req_status)

def app_to_peer_RespShutdownParams(app_struct):
    return antaris_api_pb2.RespShutdownParams(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: RespHealthCheckParams
## @brief: Response parameters for Health Check request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: application_state                               :    Application State : Good (0), Error (non-Zero)  
## @param: reqs_to_pc_in_err_cnt                           :    Number of requests to PC that faced error       
## @param: resps_to_pc_in_err_cnt                          :    Number of responses to PC that faced error      
class RespHealthCheckParams:
    def __init__(self, correlation_id, application_state, reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt):
        self.correlation_id = correlation_id
        self.application_state = application_state
        self.reqs_to_pc_in_err_cnt = reqs_to_pc_in_err_cnt
        self.resps_to_pc_in_err_cnt = resps_to_pc_in_err_cnt

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "application_state:\n"
        ret_str += str(self.application_state) + "\n"
        ret_str += "reqs_to_pc_in_err_cnt:\n"
        ret_str += str(self.reqs_to_pc_in_err_cnt) + "\n"
        ret_str += "resps_to_pc_in_err_cnt:\n"
        ret_str += str(self.resps_to_pc_in_err_cnt) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespHealthCheckParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    application_state = peer_struct.application_state
    reqs_to_pc_in_err_cnt = peer_struct.reqs_to_pc_in_err_cnt
    resps_to_pc_in_err_cnt = peer_struct.resps_to_pc_in_err_cnt
    return RespHealthCheckParams(correlation_id, application_state, reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt)

def app_to_peer_RespHealthCheckParams(app_struct):
    return antaris_api_pb2.RespHealthCheckParams(correlation_id = app_struct.correlation_id, application_state = app_struct.application_state, reqs_to_pc_in_err_cnt = app_struct.reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt = app_struct.resps_to_pc_in_err_cnt)

## @class: StartSequenceParams
## @brief: Parameters for Start-Sequence Callback
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: sequence_id                                     :    app-defined sequence-id for payload application to execute
## @param: sequence_params                                 :    app-defined sequence parameters corresponding to the sequence-id
## @param: scheduled_deadline                              :    Epoch time till this sequence is allowed to run 
class StartSequenceParams:
    def __init__(self, correlation_id, sequence_id, sequence_params, scheduled_deadline):
        self.correlation_id = correlation_id
        self.sequence_id = sequence_id
        self.sequence_params = sequence_params
        self.scheduled_deadline = scheduled_deadline

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "sequence_id:\n"
        ret_str += str(self.sequence_id) + "\n"
        ret_str += "sequence_params:\n"
        ret_str += str(self.sequence_params) + "\n"
        ret_str += "scheduled_deadline:\n"
        ret_str += str(self.scheduled_deadline) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_StartSequenceParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    sequence_id = peer_struct.sequence_id
    sequence_params = peer_struct.sequence_params
    scheduled_deadline = peer_struct.scheduled_deadline
    return StartSequenceParams(correlation_id, sequence_id, sequence_params, scheduled_deadline)

def app_to_peer_StartSequenceParams(app_struct):
    return antaris_api_pb2.StartSequenceParams(correlation_id = app_struct.correlation_id, sequence_id = app_struct.sequence_id, sequence_params = app_struct.sequence_params, scheduled_deadline = app_struct.scheduled_deadline)

## @class: ShutdownParams
## @brief: Callback parameters notifying Application of imminent shutdown
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: grace_time                                      :    grace time in seconds after which the VM will be powered down
class ShutdownParams:
    def __init__(self, correlation_id, grace_time):
        self.correlation_id = correlation_id
        self.grace_time = grace_time

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "grace_time:\n"
        ret_str += str(self.grace_time) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ShutdownParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    grace_time = peer_struct.grace_time
    return ShutdownParams(correlation_id, grace_time)

def app_to_peer_ShutdownParams(app_struct):
    return antaris_api_pb2.ShutdownParams(correlation_id = app_struct.correlation_id, grace_time = app_struct.grace_time)

## @class: HealthCheckParams
## @brief: HealthCheck message
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: application_state                               :    Application State : Good (0), Error (non-Zero)  
## @param: reqs_to_pc_in_err_cnt                           :    Number of requests to PC that faced error       
## @param: resps_to_pc_in_err_cnt                          :    Number of responses to PC that faced error      
class HealthCheckParams:
    def __init__(self, correlation_id, application_state, reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt):
        self.correlation_id = correlation_id
        self.application_state = application_state
        self.reqs_to_pc_in_err_cnt = reqs_to_pc_in_err_cnt
        self.resps_to_pc_in_err_cnt = resps_to_pc_in_err_cnt

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "application_state:\n"
        ret_str += str(self.application_state) + "\n"
        ret_str += "reqs_to_pc_in_err_cnt:\n"
        ret_str += str(self.reqs_to_pc_in_err_cnt) + "\n"
        ret_str += "resps_to_pc_in_err_cnt:\n"
        ret_str += str(self.resps_to_pc_in_err_cnt) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_HealthCheckParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    application_state = peer_struct.application_state
    reqs_to_pc_in_err_cnt = peer_struct.reqs_to_pc_in_err_cnt
    resps_to_pc_in_err_cnt = peer_struct.resps_to_pc_in_err_cnt
    return HealthCheckParams(correlation_id, application_state, reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt)

def app_to_peer_HealthCheckParams(app_struct):
    return antaris_api_pb2.HealthCheckParams(correlation_id = app_struct.correlation_id, application_state = app_struct.application_state, reqs_to_pc_in_err_cnt = app_struct.reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt = app_struct.resps_to_pc_in_err_cnt)

## @class: PayloadMetricsInfo
## @brief: Payload Metrics Parameters
## @param: counter                                         :    Counter number                                  
## @param: names                                           :    Counter names, string                           
class PayloadMetricsInfo:
    def __init__(self, counter, names):
        self.counter = counter
        self.names = names

    def __str__(self):
        ret_str = ""
        ret_str += "counter:\n"
        ret_str += str(self.counter) + "\n"
        ret_str += "names:\n"
        ret_str += str(self.names) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_PayloadMetricsInfo(peer_struct):
    counter = peer_struct.counter
    names = peer_struct.names
    return PayloadMetricsInfo(counter, names)

def app_to_peer_PayloadMetricsInfo(app_struct):
    return antaris_api_pb2.PayloadMetricsInfo(counter = app_struct.counter, names = app_struct.names)

## @class: ReqPayloadMetricsParams
## @brief: Payload Metrics Parameters
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
class ReqPayloadMetricsParams:
    def __init__(self, correlation_id):
        self.correlation_id = correlation_id

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqPayloadMetricsParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    return ReqPayloadMetricsParams(correlation_id)

def app_to_peer_ReqPayloadMetricsParams(app_struct):
    return antaris_api_pb2.ReqPayloadMetricsParams(correlation_id = app_struct.correlation_id)

## @class: PayloadMetricsResponse
## @brief: Payload Metrics Parameters
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: timestamp                                       :    Capture time stamp                              
## @param: used_counter                                    :    Counters used out of maximum 32 counters        
## @param: metrics                                         :    Counter values, maximum 32 counters             
class PayloadMetricsResponse:
    def __init__(self, correlation_id, timestamp, used_counter, metrics):
        self.correlation_id = correlation_id
        self.timestamp = timestamp
        self.used_counter = used_counter
        self.metrics = metrics

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "timestamp:\n"
        ret_str += str(self.timestamp) + "\n"
        ret_str += "used_counter:\n"
        ret_str += str(self.used_counter) + "\n"
        ret_str += "metrics:\n"
        ret_str += str(self.metrics) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_PayloadMetricsResponse(peer_struct):
    correlation_id = peer_struct.correlation_id
    timestamp = peer_struct.timestamp
    used_counter = peer_struct.used_counter
    metrics = peer_struct.metrics
    return PayloadMetricsResponse(correlation_id, timestamp, used_counter, metrics)

def app_to_peer_PayloadMetricsResponse(app_struct):
    return antaris_api_pb2.PayloadMetricsResponse(correlation_id = app_struct.correlation_id, timestamp = app_struct.timestamp, used_counter = app_struct.used_counter, metrics = app_struct.metrics)

## @class: CmdSequenceDoneParams
## @brief: Parameters for Command Sequence Done notification to Payload Controller
## @param: sequence_id                                     :    sequence id that has completed execution. MUST agree with StartSequenceParams.sequence-id.
class CmdSequenceDoneParams:
    def __init__(self, sequence_id):
        self.sequence_id = sequence_id

    def __str__(self):
        ret_str = ""
        ret_str += "sequence_id:\n"
        ret_str += str(self.sequence_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_CmdSequenceDoneParams(peer_struct):
    sequence_id = peer_struct.sequence_id
    return CmdSequenceDoneParams(sequence_id)

def app_to_peer_CmdSequenceDoneParams(app_struct):
    return antaris_api_pb2.CmdSequenceDoneParams(sequence_id = app_struct.sequence_id)

## @class: PaSatOsMsg
## @brief: To send message to SatOS from PA
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: command_id                                      :    command id                                      
## @param: payload_data                                    :    payload data for sending for SatOS, string      
class PaSatOsMsg:
    def __init__(self, correlation_id, command_id, payload_data):
        self.correlation_id = correlation_id
        self.command_id = command_id
        self.payload_data = payload_data

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "command_id:\n"
        ret_str += str(self.command_id) + "\n"
        ret_str += "payload_data:\n"
        ret_str += str(self.payload_data) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_PaSatOsMsg(peer_struct):
    correlation_id = peer_struct.correlation_id
    command_id = peer_struct.command_id
    payload_data = peer_struct.payload_data
    return PaSatOsMsg(correlation_id, command_id, payload_data)

def app_to_peer_PaSatOsMsg(app_struct):
    return antaris_api_pb2.PaSatOsMsg(correlation_id = app_struct.correlation_id, command_id = app_struct.command_id, payload_data = app_struct.payload_data)

## @class: RespPaSatOsMsg
## @brief: To send acknowledge to PA from SatOS
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: command_id                                      :    command id                                      
## @param: req_status                                      :    status of PA SatOS Message request              
class RespPaSatOsMsg:
    def __init__(self, correlation_id, command_id, req_status):
        self.correlation_id = correlation_id
        self.command_id = command_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "command_id:\n"
        ret_str += str(self.command_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespPaSatOsMsg(peer_struct):
    correlation_id = peer_struct.correlation_id
    command_id = peer_struct.command_id
    req_status = peer_struct.req_status
    return RespPaSatOsMsg(correlation_id, command_id, req_status)

def app_to_peer_RespPaSatOsMsg(app_struct):
    return antaris_api_pb2.RespPaSatOsMsg(correlation_id = app_struct.correlation_id, command_id = app_struct.command_id, req_status = app_struct.req_status)

## @class: ReqGnssEphStopDataReq
## @brief: Request GNSS EPH data stop
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
class ReqGnssEphStopDataReq:
    def __init__(self, correlation_id):
        self.correlation_id = correlation_id

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqGnssEphStopDataReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    return ReqGnssEphStopDataReq(correlation_id)

def app_to_peer_ReqGnssEphStopDataReq(app_struct):
    return antaris_api_pb2.ReqGnssEphStopDataReq(correlation_id = app_struct.correlation_id)

## @class: RespGnssEphStopDataReq
## @brief: Response to GNSS EPH data stop request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of GNSS EPH data stop request            
class RespGnssEphStopDataReq:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespGnssEphStopDataReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespGnssEphStopDataReq(correlation_id, req_status)

def app_to_peer_RespGnssEphStopDataReq(app_struct):
    return antaris_api_pb2.RespGnssEphStopDataReq(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: ReqGnssEphStartDataReq
## @brief: Request GNSS EPH data start
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: periodicity_in_ms                               :    Time between consecutive notifications in ms    
## @param: eph2_enable                                     :    0 = disable eph2, 1 = enable eph2               
class ReqGnssEphStartDataReq:
    def __init__(self, correlation_id, periodicity_in_ms, eph2_enable):
        self.correlation_id = correlation_id
        self.periodicity_in_ms = periodicity_in_ms
        self.eph2_enable = eph2_enable

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "periodicity_in_ms:\n"
        ret_str += str(self.periodicity_in_ms) + "\n"
        ret_str += "eph2_enable:\n"
        ret_str += str(self.eph2_enable) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqGnssEphStartDataReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    periodicity_in_ms = peer_struct.periodicity_in_ms
    eph2_enable = peer_struct.eph2_enable
    return ReqGnssEphStartDataReq(correlation_id, periodicity_in_ms, eph2_enable)

def app_to_peer_ReqGnssEphStartDataReq(app_struct):
    return antaris_api_pb2.ReqGnssEphStartDataReq(correlation_id = app_struct.correlation_id, periodicity_in_ms = app_struct.periodicity_in_ms, eph2_enable = app_struct.eph2_enable)

## @class: RespGnssEphStartDataReq
## @brief: Response to GNSS EPH data start request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of GNSS EPH data start request           
class RespGnssEphStartDataReq:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespGnssEphStartDataReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespGnssEphStartDataReq(correlation_id, req_status)

def app_to_peer_RespGnssEphStartDataReq(app_struct):
    return antaris_api_pb2.RespGnssEphStartDataReq(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: OBC_time
## @brief: OBC time
## @param: hour                                            :    hour                                            
## @param: minute                                          :    Minute                                          
## @param: millisecond                                     :    millisecond                                     
## @param: date                                            :    date                                            
## @param: month                                           :    month                                           
## @param: year                                            :    year                                            
class OBC_time:
    def __init__(self, hour, minute, millisecond, date, month, year):
        self.hour = hour
        self.minute = minute
        self.millisecond = millisecond
        self.date = date
        self.month = month
        self.year = year

    def __str__(self):
        ret_str = ""
        ret_str += "hour:\n"
        ret_str += str(self.hour) + "\n"
        ret_str += "minute:\n"
        ret_str += str(self.minute) + "\n"
        ret_str += "millisecond:\n"
        ret_str += str(self.millisecond) + "\n"
        ret_str += "date:\n"
        ret_str += str(self.date) + "\n"
        ret_str += "month:\n"
        ret_str += str(self.month) + "\n"
        ret_str += "year:\n"
        ret_str += str(self.year) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_OBC_time(peer_struct):
    hour = peer_struct.hour
    minute = peer_struct.minute
    millisecond = peer_struct.millisecond
    date = peer_struct.date
    month = peer_struct.month
    year = peer_struct.year
    return OBC_time(hour, minute, millisecond, date, month, year)

def app_to_peer_OBC_time(app_struct):
    return antaris_api_pb2.OBC_time(hour = app_struct.hour, minute = app_struct.minute, millisecond = app_struct.millisecond, date = app_struct.date, month = app_struct.month, year = app_struct.year)

## @class: GpsEphemerisData
## @brief: GNSS Eph1/Eph2 data
## @param: gps_fix_time                                    :    GPS time                                        
## @param: gps_sys_time                                    :    GPS System time                                 
## @param: obc_time                                        :    OBC time                                        
## @param: gps_position_ecef                               :    GPS position                                    
## @param: gps_velocity_ecef                               :    GPS velocity                                    
## @param: gps_validity_flag_pos_vel                       :    GPS validity flag                               
class GpsEphemerisData:
    def __init__(self, gps_fix_time, gps_sys_time, obc_time, gps_position_ecef, gps_velocity_ecef, gps_validity_flag_pos_vel):
        self.gps_fix_time = gps_fix_time
        self.gps_sys_time = gps_sys_time
        self.obc_time = obc_time
        self.gps_position_ecef = gps_position_ecef
        self.gps_velocity_ecef = gps_velocity_ecef
        self.gps_validity_flag_pos_vel = gps_validity_flag_pos_vel

    def __str__(self):
        ret_str = ""
        ret_str += "gps_fix_time:\n"
        ret_str += str(self.gps_fix_time) + "\n"
        ret_str += "gps_sys_time:\n"
        ret_str += str(self.gps_sys_time) + "\n"
        ret_str += "obc_time:\n"
        ret_str += str(self.obc_time) + "\n"
        ret_str += "gps_position_ecef:\n"
        ret_str += str(self.gps_position_ecef) + "\n"
        ret_str += "gps_velocity_ecef:\n"
        ret_str += str(self.gps_velocity_ecef) + "\n"
        ret_str += "gps_validity_flag_pos_vel:\n"
        ret_str += str(self.gps_validity_flag_pos_vel) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_GpsEphemerisData(peer_struct):
    gps_fix_time = peer_struct.gps_fix_time
    gps_sys_time = peer_struct.gps_sys_time
    obc_time = peer_struct.obc_time
    gps_position_ecef = peer_struct.gps_position_ecef
    gps_velocity_ecef = peer_struct.gps_velocity_ecef
    gps_validity_flag_pos_vel = peer_struct.gps_validity_flag_pos_vel
    return GpsEphemerisData(gps_fix_time, gps_sys_time, obc_time, gps_position_ecef, gps_velocity_ecef, gps_validity_flag_pos_vel)

def app_to_peer_GpsEphemerisData(app_struct):
    return antaris_api_pb2.GpsEphemerisData(gps_fix_time = app_struct.gps_fix_time, gps_sys_time = app_struct.gps_sys_time, obc_time = app_struct.obc_time, gps_position_ecef = app_struct.gps_position_ecef, gps_velocity_ecef = app_struct.gps_velocity_ecef, gps_validity_flag_pos_vel = app_struct.gps_validity_flag_pos_vel)

## @class: AdcsEphemerisData
## @brief: ADCS EPH data
## @param: orbit_time                                      :    ADCS Orbit Propagator/System Time               
## @param: eci_position_x                                  :    ECI Position X (km)                             
## @param: eci_position_y                                  :    ECI Position Y (km)                             
## @param: eci_position_z                                  :    ECI Position Z (km)                             
## @param: eci_velocity_x                                  :    ECI Velocity X (km/s)                           
## @param: eci_velocity_y                                  :    ECI Velocity Y (km/s)                           
## @param: eci_velocity_z                                  :    ECI Velocity Z (km/s)                           
## @param: ecef_position_x                                 :    ECEF Position X (km)                            
## @param: ecef_position_y                                 :    ECEF Position Y (km)                            
## @param: ecef_position_z                                 :    ECEF Position Z (km)                            
## @param: ecef_velocity_x                                 :    ECEF Velocity X (km/s)                          
## @param: ecef_velocity_y                                 :    ECEF Velocity Y (km/s)                          
## @param: ecef_velocity_z                                 :    ECEF Velocity Z (km/s)                          
## @param: ang_rate_x                                      :    X axis Angular rate (deg/s)                     
## @param: ang_rate_y                                      :    Y axis Angular rate (deg/s)                     
## @param: ang_rate_z                                      :    Z axis Angular rate (deg/s)                     
## @param: att_quat_1                                      :    Attitude Quaternion 1                           
## @param: att_quat_2                                      :    Attitude Quaternion 2                           
## @param: att_quat_3                                      :    Attitude Quaternion 3                           
## @param: att_quat_4                                      :    Attitude Quaternion 4                           
## @param: latitude                                        :    Latitude (deg)                                  
## @param: longitude                                       :    Longitude (deg)                                 
## @param: altitude                                        :    Altitude (km)                                   
## @param: nadir_vector_x                                  :    X Nadir Vector                                  
## @param: nadir_vector_y                                  :    Y Nadir Vector                                  
## @param: nadir_vector_z                                  :    Z Nadir Vector                                  
## @param: gd_nadir_vector_x                               :    X Geodetic Nadir Vector                         
## @param: gd_nadir_vector_y                               :    Y Geodetic Nadir Vector                         
## @param: gd_nadir_vector_z                               :    Z Geodetic Nadir Vector                         
## @param: beta_angle                                      :    Beta Angle (deg)                                
## @param: validity_flags                                  :    1-bit flags = Time Validity,Position and Velocity ECI Validity, Position and Velocity ECEF Validity, Rate Validity, Attitude Validity,Lat-Lon-Altitude Validity,Nadir Vector Validity,GD Nadir Vector Validity,Beta Angle Validity
class AdcsEphemerisData:
    def __init__(self, orbit_time, eci_position_x, eci_position_y, eci_position_z, eci_velocity_x, eci_velocity_y, eci_velocity_z, ecef_position_x, ecef_position_y, ecef_position_z, ecef_velocity_x, ecef_velocity_y, ecef_velocity_z, ang_rate_x, ang_rate_y, ang_rate_z, att_quat_1, att_quat_2, att_quat_3, att_quat_4, latitude, longitude, altitude, nadir_vector_x, nadir_vector_y, nadir_vector_z, gd_nadir_vector_x, gd_nadir_vector_y, gd_nadir_vector_z, beta_angle, validity_flags):
        self.orbit_time = orbit_time
        self.eci_position_x = eci_position_x
        self.eci_position_y = eci_position_y
        self.eci_position_z = eci_position_z
        self.eci_velocity_x = eci_velocity_x
        self.eci_velocity_y = eci_velocity_y
        self.eci_velocity_z = eci_velocity_z
        self.ecef_position_x = ecef_position_x
        self.ecef_position_y = ecef_position_y
        self.ecef_position_z = ecef_position_z
        self.ecef_velocity_x = ecef_velocity_x
        self.ecef_velocity_y = ecef_velocity_y
        self.ecef_velocity_z = ecef_velocity_z
        self.ang_rate_x = ang_rate_x
        self.ang_rate_y = ang_rate_y
        self.ang_rate_z = ang_rate_z
        self.att_quat_1 = att_quat_1
        self.att_quat_2 = att_quat_2
        self.att_quat_3 = att_quat_3
        self.att_quat_4 = att_quat_4
        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude
        self.nadir_vector_x = nadir_vector_x
        self.nadir_vector_y = nadir_vector_y
        self.nadir_vector_z = nadir_vector_z
        self.gd_nadir_vector_x = gd_nadir_vector_x
        self.gd_nadir_vector_y = gd_nadir_vector_y
        self.gd_nadir_vector_z = gd_nadir_vector_z
        self.beta_angle = beta_angle
        self.validity_flags = validity_flags

    def __str__(self):
        ret_str = ""
        ret_str += "orbit_time:\n"
        ret_str += str(self.orbit_time) + "\n"
        ret_str += "eci_position_x:\n"
        ret_str += str(self.eci_position_x) + "\n"
        ret_str += "eci_position_y:\n"
        ret_str += str(self.eci_position_y) + "\n"
        ret_str += "eci_position_z:\n"
        ret_str += str(self.eci_position_z) + "\n"
        ret_str += "eci_velocity_x:\n"
        ret_str += str(self.eci_velocity_x) + "\n"
        ret_str += "eci_velocity_y:\n"
        ret_str += str(self.eci_velocity_y) + "\n"
        ret_str += "eci_velocity_z:\n"
        ret_str += str(self.eci_velocity_z) + "\n"
        ret_str += "ecef_position_x:\n"
        ret_str += str(self.ecef_position_x) + "\n"
        ret_str += "ecef_position_y:\n"
        ret_str += str(self.ecef_position_y) + "\n"
        ret_str += "ecef_position_z:\n"
        ret_str += str(self.ecef_position_z) + "\n"
        ret_str += "ecef_velocity_x:\n"
        ret_str += str(self.ecef_velocity_x) + "\n"
        ret_str += "ecef_velocity_y:\n"
        ret_str += str(self.ecef_velocity_y) + "\n"
        ret_str += "ecef_velocity_z:\n"
        ret_str += str(self.ecef_velocity_z) + "\n"
        ret_str += "ang_rate_x:\n"
        ret_str += str(self.ang_rate_x) + "\n"
        ret_str += "ang_rate_y:\n"
        ret_str += str(self.ang_rate_y) + "\n"
        ret_str += "ang_rate_z:\n"
        ret_str += str(self.ang_rate_z) + "\n"
        ret_str += "att_quat_1:\n"
        ret_str += str(self.att_quat_1) + "\n"
        ret_str += "att_quat_2:\n"
        ret_str += str(self.att_quat_2) + "\n"
        ret_str += "att_quat_3:\n"
        ret_str += str(self.att_quat_3) + "\n"
        ret_str += "att_quat_4:\n"
        ret_str += str(self.att_quat_4) + "\n"
        ret_str += "latitude:\n"
        ret_str += str(self.latitude) + "\n"
        ret_str += "longitude:\n"
        ret_str += str(self.longitude) + "\n"
        ret_str += "altitude:\n"
        ret_str += str(self.altitude) + "\n"
        ret_str += "nadir_vector_x:\n"
        ret_str += str(self.nadir_vector_x) + "\n"
        ret_str += "nadir_vector_y:\n"
        ret_str += str(self.nadir_vector_y) + "\n"
        ret_str += "nadir_vector_z:\n"
        ret_str += str(self.nadir_vector_z) + "\n"
        ret_str += "gd_nadir_vector_x:\n"
        ret_str += str(self.gd_nadir_vector_x) + "\n"
        ret_str += "gd_nadir_vector_y:\n"
        ret_str += str(self.gd_nadir_vector_y) + "\n"
        ret_str += "gd_nadir_vector_z:\n"
        ret_str += str(self.gd_nadir_vector_z) + "\n"
        ret_str += "beta_angle:\n"
        ret_str += str(self.beta_angle) + "\n"
        ret_str += "validity_flags:\n"
        ret_str += str(self.validity_flags) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_AdcsEphemerisData(peer_struct):
    orbit_time = peer_struct.orbit_time
    eci_position_x = peer_struct.eci_position_x
    eci_position_y = peer_struct.eci_position_y
    eci_position_z = peer_struct.eci_position_z
    eci_velocity_x = peer_struct.eci_velocity_x
    eci_velocity_y = peer_struct.eci_velocity_y
    eci_velocity_z = peer_struct.eci_velocity_z
    ecef_position_x = peer_struct.ecef_position_x
    ecef_position_y = peer_struct.ecef_position_y
    ecef_position_z = peer_struct.ecef_position_z
    ecef_velocity_x = peer_struct.ecef_velocity_x
    ecef_velocity_y = peer_struct.ecef_velocity_y
    ecef_velocity_z = peer_struct.ecef_velocity_z
    ang_rate_x = peer_struct.ang_rate_x
    ang_rate_y = peer_struct.ang_rate_y
    ang_rate_z = peer_struct.ang_rate_z
    att_quat_1 = peer_struct.att_quat_1
    att_quat_2 = peer_struct.att_quat_2
    att_quat_3 = peer_struct.att_quat_3
    att_quat_4 = peer_struct.att_quat_4
    latitude = peer_struct.latitude
    longitude = peer_struct.longitude
    altitude = peer_struct.altitude
    nadir_vector_x = peer_struct.nadir_vector_x
    nadir_vector_y = peer_struct.nadir_vector_y
    nadir_vector_z = peer_struct.nadir_vector_z
    gd_nadir_vector_x = peer_struct.gd_nadir_vector_x
    gd_nadir_vector_y = peer_struct.gd_nadir_vector_y
    gd_nadir_vector_z = peer_struct.gd_nadir_vector_z
    beta_angle = peer_struct.beta_angle
    validity_flags = peer_struct.validity_flags
    return AdcsEphemerisData(orbit_time, eci_position_x, eci_position_y, eci_position_z, eci_velocity_x, eci_velocity_y, eci_velocity_z, ecef_position_x, ecef_position_y, ecef_position_z, ecef_velocity_x, ecef_velocity_y, ecef_velocity_z, ang_rate_x, ang_rate_y, ang_rate_z, att_quat_1, att_quat_2, att_quat_3, att_quat_4, latitude, longitude, altitude, nadir_vector_x, nadir_vector_y, nadir_vector_z, gd_nadir_vector_x, gd_nadir_vector_y, gd_nadir_vector_z, beta_angle, validity_flags)

def app_to_peer_AdcsEphemerisData(app_struct):
    return antaris_api_pb2.AdcsEphemerisData(orbit_time = app_struct.orbit_time, eci_position_x = app_struct.eci_position_x, eci_position_y = app_struct.eci_position_y, eci_position_z = app_struct.eci_position_z, eci_velocity_x = app_struct.eci_velocity_x, eci_velocity_y = app_struct.eci_velocity_y, eci_velocity_z = app_struct.eci_velocity_z, ecef_position_x = app_struct.ecef_position_x, ecef_position_y = app_struct.ecef_position_y, ecef_position_z = app_struct.ecef_position_z, ecef_velocity_x = app_struct.ecef_velocity_x, ecef_velocity_y = app_struct.ecef_velocity_y, ecef_velocity_z = app_struct.ecef_velocity_z, ang_rate_x = app_struct.ang_rate_x, ang_rate_y = app_struct.ang_rate_y, ang_rate_z = app_struct.ang_rate_z, att_quat_1 = app_struct.att_quat_1, att_quat_2 = app_struct.att_quat_2, att_quat_3 = app_struct.att_quat_3, att_quat_4 = app_struct.att_quat_4, latitude = app_struct.latitude, longitude = app_struct.longitude, altitude = app_struct.altitude, nadir_vector_x = app_struct.nadir_vector_x, nadir_vector_y = app_struct.nadir_vector_y, nadir_vector_z = app_struct.nadir_vector_z, gd_nadir_vector_x = app_struct.gd_nadir_vector_x, gd_nadir_vector_y = app_struct.gd_nadir_vector_y, gd_nadir_vector_z = app_struct.gd_nadir_vector_z, beta_angle = app_struct.beta_angle, validity_flags = app_struct.validity_flags)

## @class: GnssEphData
## @brief: GNSS Eph1/Eph2 data
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: adcs_eph_data                                   :    ADCS data                                       
## @param: gps_eph_data                                    :    GPS data                                        
## @param: adcs_timeout_flag                               :    ADCS flag                                       
## @param: gps_timeout_flag                                :    GPS flag                                        
class GnssEphData:
    def __init__(self, correlation_id, adcs_eph_data, gps_eph_data, adcs_timeout_flag, gps_timeout_flag):
        self.correlation_id = correlation_id
        self.adcs_eph_data = adcs_eph_data
        self.gps_eph_data = gps_eph_data
        self.adcs_timeout_flag = adcs_timeout_flag
        self.gps_timeout_flag = gps_timeout_flag

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "adcs_eph_data:\n"
        ret_str += str(self.adcs_eph_data) + "\n"
        ret_str += "gps_eph_data:\n"
        ret_str += str(self.gps_eph_data) + "\n"
        ret_str += "adcs_timeout_flag:\n"
        ret_str += str(self.adcs_timeout_flag) + "\n"
        ret_str += "gps_timeout_flag:\n"
        ret_str += str(self.gps_timeout_flag) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_GnssEphData(peer_struct):
    correlation_id = peer_struct.correlation_id
    adcs_eph_data = peer_struct.adcs_eph_data
    gps_eph_data = peer_struct.gps_eph_data
    adcs_timeout_flag = peer_struct.adcs_timeout_flag
    gps_timeout_flag = peer_struct.gps_timeout_flag
    return GnssEphData(correlation_id, adcs_eph_data, gps_eph_data, adcs_timeout_flag, gps_timeout_flag)

def app_to_peer_GnssEphData(app_struct):
    return antaris_api_pb2.GnssEphData(correlation_id = app_struct.correlation_id, adcs_eph_data = app_struct.adcs_eph_data, gps_eph_data = app_struct.gps_eph_data, adcs_timeout_flag = app_struct.adcs_timeout_flag, gps_timeout_flag = app_struct.gps_timeout_flag)

## @class: ReqGetEpsVoltageStopReq
## @brief: Stop request get-eps-voltage
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
class ReqGetEpsVoltageStopReq:
    def __init__(self, correlation_id):
        self.correlation_id = correlation_id

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqGetEpsVoltageStopReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    return ReqGetEpsVoltageStopReq(correlation_id)

def app_to_peer_ReqGetEpsVoltageStopReq(app_struct):
    return antaris_api_pb2.ReqGetEpsVoltageStopReq(correlation_id = app_struct.correlation_id)

## @class: RespGetEpsVoltageStopReq
## @brief: Response to stop get-eps-voltage
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of get-eps-voltage-stop request          
class RespGetEpsVoltageStopReq:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespGetEpsVoltageStopReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespGetEpsVoltageStopReq(correlation_id, req_status)

def app_to_peer_RespGetEpsVoltageStopReq(app_struct):
    return antaris_api_pb2.RespGetEpsVoltageStopReq(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: ReqGetEpsVoltageStartReq
## @brief: Start request eps voltage
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: periodicity_in_ms                               :    Time between consecutive notifications in ms    
class ReqGetEpsVoltageStartReq:
    def __init__(self, correlation_id, periodicity_in_ms):
        self.correlation_id = correlation_id
        self.periodicity_in_ms = periodicity_in_ms

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "periodicity_in_ms:\n"
        ret_str += str(self.periodicity_in_ms) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_ReqGetEpsVoltageStartReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    periodicity_in_ms = peer_struct.periodicity_in_ms
    return ReqGetEpsVoltageStartReq(correlation_id, periodicity_in_ms)

def app_to_peer_ReqGetEpsVoltageStartReq(app_struct):
    return antaris_api_pb2.ReqGetEpsVoltageStartReq(correlation_id = app_struct.correlation_id, periodicity_in_ms = app_struct.periodicity_in_ms)

## @class: RespGetEpsVoltageStartReq
## @brief: Response to start get eps voltage
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of get-eps-voltage-start request         
class RespGetEpsVoltageStartReq:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespGetEpsVoltageStartReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespGetEpsVoltageStartReq(correlation_id, req_status)

def app_to_peer_RespGetEpsVoltageStartReq(app_struct):
    return antaris_api_pb2.RespGetEpsVoltageStartReq(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: GetEpsVoltage
## @brief: get EPS voltage1
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: eps_voltage                                     :    EPS voltage                                     
class GetEpsVoltage:
    def __init__(self, correlation_id, eps_voltage):
        self.correlation_id = correlation_id
        self.eps_voltage = eps_voltage

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "eps_voltage:\n"
        ret_str += str(self.eps_voltage) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_GetEpsVoltage(peer_struct):
    correlation_id = peer_struct.correlation_id
    eps_voltage = peer_struct.eps_voltage
    return GetEpsVoltage(correlation_id, eps_voltage)

def app_to_peer_GetEpsVoltage(app_struct):
    return antaris_api_pb2.GetEpsVoltage(correlation_id = app_struct.correlation_id, eps_voltage = app_struct.eps_voltage)

## @class: StartSesThermMgmntReq
## @brief: Start SES thermal management
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: hardware_id                                     :    0:SESA, 1:SESB                                  
## @param: duration                                        :    duration in ms                                  
## @param: lower_threshold                                 :    lower temp threshold                            
## @param: upper_threshold                                 :    upper temp threshold                            
class StartSesThermMgmntReq:
    def __init__(self, correlation_id, hardware_id, duration, lower_threshold, upper_threshold):
        self.correlation_id = correlation_id
        self.hardware_id = hardware_id
        self.duration = duration
        self.lower_threshold = lower_threshold
        self.upper_threshold = upper_threshold

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "hardware_id:\n"
        ret_str += str(self.hardware_id) + "\n"
        ret_str += "duration:\n"
        ret_str += str(self.duration) + "\n"
        ret_str += "lower_threshold:\n"
        ret_str += str(self.lower_threshold) + "\n"
        ret_str += "upper_threshold:\n"
        ret_str += str(self.upper_threshold) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_StartSesThermMgmntReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    hardware_id = peer_struct.hardware_id
    duration = peer_struct.duration
    lower_threshold = peer_struct.lower_threshold
    upper_threshold = peer_struct.upper_threshold
    return StartSesThermMgmntReq(correlation_id, hardware_id, duration, lower_threshold, upper_threshold)

def app_to_peer_StartSesThermMgmntReq(app_struct):
    return antaris_api_pb2.StartSesThermMgmntReq(correlation_id = app_struct.correlation_id, hardware_id = app_struct.hardware_id, duration = app_struct.duration, lower_threshold = app_struct.lower_threshold, upper_threshold = app_struct.upper_threshold)

## @class: RespStartSesThermMgmntReq
## @brief: Response to Start SES thermal management
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    0: success, 1: fail                             
class RespStartSesThermMgmntReq:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespStartSesThermMgmntReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespStartSesThermMgmntReq(correlation_id, req_status)

def app_to_peer_RespStartSesThermMgmntReq(app_struct):
    return antaris_api_pb2.RespStartSesThermMgmntReq(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: StopSesThermMgmntReq
## @brief: Stop SES thermal management
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: hardware_id                                     :    0:SESA, 1:SESB                                  
class StopSesThermMgmntReq:
    def __init__(self, correlation_id, hardware_id):
        self.correlation_id = correlation_id
        self.hardware_id = hardware_id

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "hardware_id:\n"
        ret_str += str(self.hardware_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_StopSesThermMgmntReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    hardware_id = peer_struct.hardware_id
    return StopSesThermMgmntReq(correlation_id, hardware_id)

def app_to_peer_StopSesThermMgmntReq(app_struct):
    return antaris_api_pb2.StopSesThermMgmntReq(correlation_id = app_struct.correlation_id, hardware_id = app_struct.hardware_id)

## @class: RespStopSesThermMgmntReq
## @brief: Response to Stop SES thermal management
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    0: success, 1: fail                             
class RespStopSesThermMgmntReq:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "req_status:\n"
        ret_str += str(self.req_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespStopSesThermMgmntReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    req_status = peer_struct.req_status
    return RespStopSesThermMgmntReq(correlation_id, req_status)

def app_to_peer_RespStopSesThermMgmntReq(app_struct):
    return antaris_api_pb2.RespStopSesThermMgmntReq(correlation_id = app_struct.correlation_id, req_status = app_struct.req_status)

## @class: SesTempReq
## @brief: Request SES temperature
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: hardware_id                                     :    0:SESA, 1:SESB                                  
class SesTempReq:
    def __init__(self, correlation_id, hardware_id):
        self.correlation_id = correlation_id
        self.hardware_id = hardware_id

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "hardware_id:\n"
        ret_str += str(self.hardware_id) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_SesTempReq(peer_struct):
    correlation_id = peer_struct.correlation_id
    hardware_id = peer_struct.hardware_id
    return SesTempReq(correlation_id, hardware_id)

def app_to_peer_SesTempReq(app_struct):
    return antaris_api_pb2.SesTempReq(correlation_id = app_struct.correlation_id, hardware_id = app_struct.hardware_id)

## @class: RespSesTempReqParams
## @brief: Response to SES temperature request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: temp                                            :    in Celsius                                      
## @param: heater_pwr_status                               :    0:OFF, 1:ON                                     
class RespSesTempReqParams:
    def __init__(self, correlation_id, temp, heater_pwr_status):
        self.correlation_id = correlation_id
        self.temp = temp
        self.heater_pwr_status = heater_pwr_status

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "temp:\n"
        ret_str += str(self.temp) + "\n"
        ret_str += "heater_pwr_status:\n"
        ret_str += str(self.heater_pwr_status) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_RespSesTempReqParams(peer_struct):
    correlation_id = peer_struct.correlation_id
    temp = peer_struct.temp
    heater_pwr_status = peer_struct.heater_pwr_status
    return RespSesTempReqParams(correlation_id, temp, heater_pwr_status)

def app_to_peer_RespSesTempReqParams(app_struct):
    return antaris_api_pb2.RespSesTempReqParams(correlation_id = app_struct.correlation_id, temp = app_struct.temp, heater_pwr_status = app_struct.heater_pwr_status)

## @class: SesThermalStatusNtf
## @brief: SES thermal notification from PC
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: heater_pwr_status                               :    0:OFF, 1:ON                                     
## @param: temp                                            :    in Celsius                                      
class SesThermalStatusNtf:
    def __init__(self, correlation_id, heater_pwr_status, temp):
        self.correlation_id = correlation_id
        self.heater_pwr_status = heater_pwr_status
        self.temp = temp

    def __str__(self):
        ret_str = ""
        ret_str += "correlation_id:\n"
        ret_str += str(self.correlation_id) + "\n"
        ret_str += "heater_pwr_status:\n"
        ret_str += str(self.heater_pwr_status) + "\n"
        ret_str += "temp:\n"
        ret_str += str(self.temp) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_SesThermalStatusNtf(peer_struct):
    correlation_id = peer_struct.correlation_id
    heater_pwr_status = peer_struct.heater_pwr_status
    temp = peer_struct.temp
    return SesThermalStatusNtf(correlation_id, heater_pwr_status, temp)

def app_to_peer_SesThermalStatusNtf(app_struct):
    return antaris_api_pb2.SesThermalStatusNtf(correlation_id = app_struct.correlation_id, heater_pwr_status = app_struct.heater_pwr_status, temp = app_struct.temp)

## @class: AntarisApiCallbackFuncList
## @brief: Callback-functions registration structure for channel creation
## @param: start_sequence                                  :    callback handler for start-sequence             
## @param: shutdown_app                                    :    callback handler for shutdown-app               
## @param: process_health_check                            :    callback handler for health-check request from PC
## @param: process_response_register                       :    callback handler for registration response      
## @param: process_response_get_current_location           :    callback handler for current-location response  
## @param: process_response_stage_file_download            :    callback handler for stage file download response
## @param: process_response_payload_power_control          :    callback handler for payload power control response
## @param: req_payload_metrics                             :    callback handler for request payload stats from PC
## @param: process_response_gnss_eph_stop                  :    callback handler for GNSS EPH data stop response
## @param: process_response_gnss_eph_start                 :    callback handler for GNSS EPH data start response
## @param: process_cb_gnss_eph_data                        :    callback handler for GNSS EPH data              
## @param: process_response_get_eps_voltage_stop           :    callback handler for get EPS voltage data stop  
## @param: process_response_get_eps_voltage_start          :    callback handler for get EPS voltage data start 
## @param: process_cb_get_eps_voltage                      :    callback handler for EPS voltage data           
## @param: process_response_start_ses_therm_mgmnt_req      :    callback handler for start SES thermal management req response
## @param: process_response_stop_ses_therm_mgmnt_req       :    callback handler for stop SES thermal management req response
## @param: process_response_ses_temp_req                   :    callback handler for SES temperature req response
## @param: process_cb_ses_thrml_ntf                        :    callback handler for SES thermal nofirication   
## @param: process_pa_satos_msg_response                   :    callback handler for PA to satOS command response
class AntarisApiCallbackFuncList:
    def __init__(self, start_sequence, shutdown_app, process_health_check, process_response_register, process_response_get_current_location, process_response_stage_file_download, process_response_payload_power_control, req_payload_metrics, process_response_gnss_eph_stop, process_response_gnss_eph_start, process_cb_gnss_eph_data, process_response_get_eps_voltage_stop, process_response_get_eps_voltage_start, process_cb_get_eps_voltage, process_response_start_ses_therm_mgmnt_req, process_response_stop_ses_therm_mgmnt_req, process_response_ses_temp_req, process_cb_ses_thrml_ntf, process_pa_satos_msg_response):
        self.start_sequence = start_sequence
        self.shutdown_app = shutdown_app
        self.process_health_check = process_health_check
        self.process_response_register = process_response_register
        self.process_response_get_current_location = process_response_get_current_location
        self.process_response_stage_file_download = process_response_stage_file_download
        self.process_response_payload_power_control = process_response_payload_power_control
        self.req_payload_metrics = req_payload_metrics
        self.process_response_gnss_eph_stop = process_response_gnss_eph_stop
        self.process_response_gnss_eph_start = process_response_gnss_eph_start
        self.process_cb_gnss_eph_data = process_cb_gnss_eph_data
        self.process_response_get_eps_voltage_stop = process_response_get_eps_voltage_stop
        self.process_response_get_eps_voltage_start = process_response_get_eps_voltage_start
        self.process_cb_get_eps_voltage = process_cb_get_eps_voltage
        self.process_response_start_ses_therm_mgmnt_req = process_response_start_ses_therm_mgmnt_req
        self.process_response_stop_ses_therm_mgmnt_req = process_response_stop_ses_therm_mgmnt_req
        self.process_response_ses_temp_req = process_response_ses_temp_req
        self.process_cb_ses_thrml_ntf = process_cb_ses_thrml_ntf
        self.process_pa_satos_msg_response = process_pa_satos_msg_response

    def __str__(self):
        ret_str = ""
        ret_str += "start_sequence:\n"
        ret_str += str(self.start_sequence) + "\n"
        ret_str += "shutdown_app:\n"
        ret_str += str(self.shutdown_app) + "\n"
        ret_str += "process_health_check:\n"
        ret_str += str(self.process_health_check) + "\n"
        ret_str += "process_response_register:\n"
        ret_str += str(self.process_response_register) + "\n"
        ret_str += "process_response_get_current_location:\n"
        ret_str += str(self.process_response_get_current_location) + "\n"
        ret_str += "process_response_stage_file_download:\n"
        ret_str += str(self.process_response_stage_file_download) + "\n"
        ret_str += "process_response_payload_power_control:\n"
        ret_str += str(self.process_response_payload_power_control) + "\n"
        ret_str += "req_payload_metrics:\n"
        ret_str += str(self.req_payload_metrics) + "\n"
        ret_str += "process_response_gnss_eph_stop:\n"
        ret_str += str(self.process_response_gnss_eph_stop) + "\n"
        ret_str += "process_response_gnss_eph_start:\n"
        ret_str += str(self.process_response_gnss_eph_start) + "\n"
        ret_str += "process_cb_gnss_eph_data:\n"
        ret_str += str(self.process_cb_gnss_eph_data) + "\n"
        ret_str += "process_response_get_eps_voltage_stop:\n"
        ret_str += str(self.process_response_get_eps_voltage_stop) + "\n"
        ret_str += "process_response_get_eps_voltage_start:\n"
        ret_str += str(self.process_response_get_eps_voltage_start) + "\n"
        ret_str += "process_cb_get_eps_voltage:\n"
        ret_str += str(self.process_cb_get_eps_voltage) + "\n"
        ret_str += "process_response_start_ses_therm_mgmnt_req:\n"
        ret_str += str(self.process_response_start_ses_therm_mgmnt_req) + "\n"
        ret_str += "process_response_stop_ses_therm_mgmnt_req:\n"
        ret_str += str(self.process_response_stop_ses_therm_mgmnt_req) + "\n"
        ret_str += "process_response_ses_temp_req:\n"
        ret_str += str(self.process_response_ses_temp_req) + "\n"
        ret_str += "process_cb_ses_thrml_ntf:\n"
        ret_str += str(self.process_cb_ses_thrml_ntf) + "\n"
        ret_str += "process_pa_satos_msg_response:\n"
        ret_str += str(self.process_pa_satos_msg_response) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_AntarisApiCallbackFuncList(peer_struct):
    start_sequence = peer_struct.start_sequence
    shutdown_app = peer_struct.shutdown_app
    process_health_check = peer_struct.process_health_check
    process_response_register = peer_struct.process_response_register
    process_response_get_current_location = peer_struct.process_response_get_current_location
    process_response_stage_file_download = peer_struct.process_response_stage_file_download
    process_response_payload_power_control = peer_struct.process_response_payload_power_control
    req_payload_metrics = peer_struct.req_payload_metrics
    process_response_gnss_eph_stop = peer_struct.process_response_gnss_eph_stop
    process_response_gnss_eph_start = peer_struct.process_response_gnss_eph_start
    process_cb_gnss_eph_data = peer_struct.process_cb_gnss_eph_data
    process_response_get_eps_voltage_stop = peer_struct.process_response_get_eps_voltage_stop
    process_response_get_eps_voltage_start = peer_struct.process_response_get_eps_voltage_start
    process_cb_get_eps_voltage = peer_struct.process_cb_get_eps_voltage
    process_response_start_ses_therm_mgmnt_req = peer_struct.process_response_start_ses_therm_mgmnt_req
    process_response_stop_ses_therm_mgmnt_req = peer_struct.process_response_stop_ses_therm_mgmnt_req
    process_response_ses_temp_req = peer_struct.process_response_ses_temp_req
    process_cb_ses_thrml_ntf = peer_struct.process_cb_ses_thrml_ntf
    process_pa_satos_msg_response = peer_struct.process_pa_satos_msg_response
    return AntarisApiCallbackFuncList(start_sequence, shutdown_app, process_health_check, process_response_register, process_response_get_current_location, process_response_stage_file_download, process_response_payload_power_control, req_payload_metrics, process_response_gnss_eph_stop, process_response_gnss_eph_start, process_cb_gnss_eph_data, process_response_get_eps_voltage_stop, process_response_get_eps_voltage_start, process_cb_get_eps_voltage, process_response_start_ses_therm_mgmnt_req, process_response_stop_ses_therm_mgmnt_req, process_response_ses_temp_req, process_cb_ses_thrml_ntf, process_pa_satos_msg_response)

def app_to_peer_AntarisApiCallbackFuncList(app_struct):
    return antaris_api_pb2.AntarisApiCallbackFuncList(start_sequence = app_struct.start_sequence, shutdown_app = app_struct.shutdown_app, process_health_check = app_struct.process_health_check, process_response_register = app_struct.process_response_register, process_response_get_current_location = app_struct.process_response_get_current_location, process_response_stage_file_download = app_struct.process_response_stage_file_download, process_response_payload_power_control = app_struct.process_response_payload_power_control, req_payload_metrics = app_struct.req_payload_metrics, process_response_gnss_eph_stop = app_struct.process_response_gnss_eph_stop, process_response_gnss_eph_start = app_struct.process_response_gnss_eph_start, process_cb_gnss_eph_data = app_struct.process_cb_gnss_eph_data, process_response_get_eps_voltage_stop = app_struct.process_response_get_eps_voltage_stop, process_response_get_eps_voltage_start = app_struct.process_response_get_eps_voltage_start, process_cb_get_eps_voltage = app_struct.process_cb_get_eps_voltage, process_response_start_ses_therm_mgmnt_req = app_struct.process_response_start_ses_therm_mgmnt_req, process_response_stop_ses_therm_mgmnt_req = app_struct.process_response_stop_ses_therm_mgmnt_req, process_response_ses_temp_req = app_struct.process_response_ses_temp_req, process_cb_ses_thrml_ntf = app_struct.process_cb_ses_thrml_ntf, process_pa_satos_msg_response = app_struct.process_pa_satos_msg_response)

## @class: AntarisReturnType
## @brief: Wrapper structure for AntarisReturnCode
## @param: return_code                                     :    return code                                     
class AntarisReturnType:
    def __init__(self, return_code):
        self.return_code = return_code

    def __str__(self):
        ret_str = ""
        ret_str += "return_code:\n"
        ret_str += str(self.return_code) + "\n"

        return ret_str

    def display(self):
        print(str(self))

def peer_to_app_AntarisReturnType(peer_struct):
    return_code = peer_struct.return_code
    return AntarisReturnType(return_code)

def app_to_peer_AntarisReturnType(app_struct):
    return antaris_api_pb2.AntarisReturnType(return_code = app_struct.return_code)

