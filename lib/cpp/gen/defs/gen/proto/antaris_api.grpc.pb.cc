// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: defs/gen/proto/antaris_api.proto

#include "defs/gen/proto/antaris_api.pb.h"
#include "defs/gen/proto/antaris_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace antaris_api_peer_to_peer {

static const char* AntarisapiApplicationCallback_method_names[] = {
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_StartSequence",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ShutdownApp",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessHealthCheck",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessResponseRegister",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessResponseGetCurrentLocation",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessResponseStageFileDownload",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessResponsePayloadPowerControl",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessReqPayloadMetrics",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessRespGnssEphStopDataReq",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessRespGnssEphStartDataReq",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessGnssEphData",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessRespGetEpsVoltageStopReq",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessRespGetEpsVoltageStartReq",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessGetEpsVoltage",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessRespStartSesThermMgmntReq",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessRespStopSesThermMgmntReq",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessRespSesTempReq",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessSesThrmlNtf",
  "/antaris_api_peer_to_peer.AntarisapiApplicationCallback/PA_ProcessRespPaSatOsMsg",
};

std::unique_ptr< AntarisapiApplicationCallback::Stub> AntarisapiApplicationCallback::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AntarisapiApplicationCallback::Stub> stub(new AntarisapiApplicationCallback::Stub(channel, options));
  return stub;
}

AntarisapiApplicationCallback::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PA_StartSequence_(AntarisapiApplicationCallback_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ShutdownApp_(AntarisapiApplicationCallback_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessHealthCheck_(AntarisapiApplicationCallback_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessResponseRegister_(AntarisapiApplicationCallback_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessResponseGetCurrentLocation_(AntarisapiApplicationCallback_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessResponseStageFileDownload_(AntarisapiApplicationCallback_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessResponsePayloadPowerControl_(AntarisapiApplicationCallback_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessReqPayloadMetrics_(AntarisapiApplicationCallback_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessRespGnssEphStopDataReq_(AntarisapiApplicationCallback_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessRespGnssEphStartDataReq_(AntarisapiApplicationCallback_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessGnssEphData_(AntarisapiApplicationCallback_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessRespGetEpsVoltageStopReq_(AntarisapiApplicationCallback_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessRespGetEpsVoltageStartReq_(AntarisapiApplicationCallback_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessGetEpsVoltage_(AntarisapiApplicationCallback_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessRespStartSesThermMgmntReq_(AntarisapiApplicationCallback_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessRespStopSesThermMgmntReq_(AntarisapiApplicationCallback_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessRespSesTempReq_(AntarisapiApplicationCallback_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessSesThrmlNtf_(AntarisapiApplicationCallback_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PA_ProcessRespPaSatOsMsg_(AntarisapiApplicationCallback_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_StartSequence(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StartSequenceParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::StartSequenceParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_StartSequence_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_StartSequence(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StartSequenceParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::StartSequenceParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_StartSequence_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_StartSequence(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StartSequenceParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_StartSequence_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_StartSequenceRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StartSequenceParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::StartSequenceParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_StartSequence_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_StartSequenceRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StartSequenceParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_StartSequenceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ShutdownApp(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ShutdownParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::ShutdownParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ShutdownApp_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ShutdownApp(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ShutdownParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::ShutdownParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ShutdownApp_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ShutdownApp(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ShutdownParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ShutdownApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ShutdownAppRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ShutdownParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::ShutdownParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ShutdownApp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ShutdownAppRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ShutdownParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ShutdownAppRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessHealthCheck(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::HealthCheckParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::HealthCheckParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessHealthCheck_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessHealthCheck(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::HealthCheckParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::HealthCheckParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessHealthCheck_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessHealthCheck(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::HealthCheckParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessHealthCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessHealthCheckRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::HealthCheckParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::HealthCheckParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessHealthCheck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessHealthCheckRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::HealthCheckParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessHealthCheckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessResponseRegister(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespRegisterParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespRegisterParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessResponseRegister_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessResponseRegister(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespRegisterParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespRegisterParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessResponseRegister_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessResponseRegister(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespRegisterParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessResponseRegister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessResponseRegisterRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespRegisterParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespRegisterParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessResponseRegister_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessResponseRegisterRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespRegisterParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessResponseRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessResponseGetCurrentLocation(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetCurrentLocationParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespGetCurrentLocationParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessResponseGetCurrentLocation_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessResponseGetCurrentLocation(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetCurrentLocationParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespGetCurrentLocationParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessResponseGetCurrentLocation_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessResponseGetCurrentLocation(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetCurrentLocationParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessResponseGetCurrentLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessResponseGetCurrentLocationRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetCurrentLocationParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespGetCurrentLocationParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessResponseGetCurrentLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessResponseGetCurrentLocationRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetCurrentLocationParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessResponseGetCurrentLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessResponseStageFileDownload(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStageFileDownloadParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespStageFileDownloadParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessResponseStageFileDownload_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessResponseStageFileDownload(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStageFileDownloadParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespStageFileDownloadParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessResponseStageFileDownload_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessResponseStageFileDownload(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStageFileDownloadParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessResponseStageFileDownload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessResponseStageFileDownloadRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStageFileDownloadParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespStageFileDownloadParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessResponseStageFileDownload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessResponseStageFileDownloadRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStageFileDownloadParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessResponseStageFileDownloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessResponsePayloadPowerControl(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespPayloadPowerControlParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespPayloadPowerControlParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessResponsePayloadPowerControl_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessResponsePayloadPowerControl(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespPayloadPowerControlParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespPayloadPowerControlParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessResponsePayloadPowerControl_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessResponsePayloadPowerControl(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespPayloadPowerControlParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessResponsePayloadPowerControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessResponsePayloadPowerControlRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespPayloadPowerControlParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespPayloadPowerControlParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessResponsePayloadPowerControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessResponsePayloadPowerControlRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespPayloadPowerControlParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessResponsePayloadPowerControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessReqPayloadMetrics(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqPayloadMetricsParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::ReqPayloadMetricsParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessReqPayloadMetrics_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessReqPayloadMetrics(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqPayloadMetricsParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::ReqPayloadMetricsParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessReqPayloadMetrics_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessReqPayloadMetrics(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqPayloadMetricsParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessReqPayloadMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessReqPayloadMetricsRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqPayloadMetricsParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::ReqPayloadMetricsParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessReqPayloadMetrics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessReqPayloadMetricsRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqPayloadMetricsParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessReqPayloadMetricsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessRespGnssEphStopDataReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStopDataReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespGnssEphStopDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessRespGnssEphStopDataReq_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespGnssEphStopDataReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStopDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespGnssEphStopDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespGnssEphStopDataReq_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespGnssEphStopDataReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStopDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespGnssEphStopDataReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessRespGnssEphStopDataReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStopDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespGnssEphStopDataReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessRespGnssEphStopDataReq_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessRespGnssEphStopDataReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStopDataReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessRespGnssEphStopDataReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessRespGnssEphStartDataReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStartDataReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespGnssEphStartDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessRespGnssEphStartDataReq_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespGnssEphStartDataReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStartDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespGnssEphStartDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespGnssEphStartDataReq_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespGnssEphStartDataReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStartDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespGnssEphStartDataReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessRespGnssEphStartDataReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStartDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespGnssEphStartDataReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessRespGnssEphStartDataReq_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessRespGnssEphStartDataReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStartDataReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessRespGnssEphStartDataReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessGnssEphData(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::GnssEphData& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::GnssEphData, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessGnssEphData_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessGnssEphData(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::GnssEphData* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::GnssEphData, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessGnssEphData_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessGnssEphData(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::GnssEphData* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessGnssEphData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessGnssEphDataRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::GnssEphData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::GnssEphData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessGnssEphData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessGnssEphDataRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::GnssEphData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessGnssEphDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessRespGetEpsVoltageStopReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessRespGetEpsVoltageStopReq_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespGetEpsVoltageStopReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespGetEpsVoltageStopReq_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespGetEpsVoltageStopReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespGetEpsVoltageStopReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessRespGetEpsVoltageStopReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessRespGetEpsVoltageStopReq_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessRespGetEpsVoltageStopReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessRespGetEpsVoltageStopReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessRespGetEpsVoltageStartReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessRespGetEpsVoltageStartReq_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespGetEpsVoltageStartReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespGetEpsVoltageStartReq_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespGetEpsVoltageStartReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespGetEpsVoltageStartReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessRespGetEpsVoltageStartReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessRespGetEpsVoltageStartReq_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessRespGetEpsVoltageStartReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessRespGetEpsVoltageStartReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessGetEpsVoltage(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::GetEpsVoltage& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::GetEpsVoltage, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessGetEpsVoltage_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessGetEpsVoltage(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::GetEpsVoltage* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::GetEpsVoltage, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessGetEpsVoltage_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessGetEpsVoltage(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::GetEpsVoltage* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessGetEpsVoltage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessGetEpsVoltageRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::GetEpsVoltage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::GetEpsVoltage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessGetEpsVoltage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessGetEpsVoltageRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::GetEpsVoltage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessGetEpsVoltageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessRespStartSesThermMgmntReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessRespStartSesThermMgmntReq_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespStartSesThermMgmntReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespStartSesThermMgmntReq_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespStartSesThermMgmntReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespStartSesThermMgmntReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessRespStartSesThermMgmntReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessRespStartSesThermMgmntReq_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessRespStartSesThermMgmntReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessRespStartSesThermMgmntReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessRespStopSesThermMgmntReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessRespStopSesThermMgmntReq_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespStopSesThermMgmntReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespStopSesThermMgmntReq_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespStopSesThermMgmntReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespStopSesThermMgmntReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessRespStopSesThermMgmntReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessRespStopSesThermMgmntReq_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessRespStopSesThermMgmntReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessRespStopSesThermMgmntReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessRespSesTempReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespSesTempReqParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespSesTempReqParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessRespSesTempReq_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespSesTempReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespSesTempReqParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespSesTempReqParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespSesTempReq_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespSesTempReq(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespSesTempReqParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespSesTempReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessRespSesTempReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespSesTempReqParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespSesTempReqParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessRespSesTempReq_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessRespSesTempReqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespSesTempReqParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessRespSesTempReqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessSesThrmlNtf(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::SesThermalStatusNtf& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::SesThermalStatusNtf, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessSesThrmlNtf_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessSesThrmlNtf(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::SesThermalStatusNtf* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::SesThermalStatusNtf, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessSesThrmlNtf_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessSesThrmlNtf(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::SesThermalStatusNtf* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessSesThrmlNtf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessSesThrmlNtfRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::SesThermalStatusNtf& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::SesThermalStatusNtf, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessSesThrmlNtf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessSesThrmlNtfRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::SesThermalStatusNtf& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessSesThrmlNtfRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiApplicationCallback::Stub::PA_ProcessRespPaSatOsMsg(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespPaSatOsMsg& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespPaSatOsMsg, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PA_ProcessRespPaSatOsMsg_, context, request, response);
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespPaSatOsMsg(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespPaSatOsMsg* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespPaSatOsMsg, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespPaSatOsMsg_, context, request, response, std::move(f));
}

void AntarisapiApplicationCallback::Stub::async::PA_ProcessRespPaSatOsMsg(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespPaSatOsMsg* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PA_ProcessRespPaSatOsMsg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::PrepareAsyncPA_ProcessRespPaSatOsMsgRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespPaSatOsMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespPaSatOsMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PA_ProcessRespPaSatOsMsg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiApplicationCallback::Stub::AsyncPA_ProcessRespPaSatOsMsgRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespPaSatOsMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPA_ProcessRespPaSatOsMsgRaw(context, request, cq);
  result->StartCall();
  return result;
}

AntarisapiApplicationCallback::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::StartSequenceParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::StartSequenceParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_StartSequence(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::ShutdownParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::ShutdownParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ShutdownApp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::HealthCheckParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::HealthCheckParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessHealthCheck(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespRegisterParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespRegisterParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessResponseRegister(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespGetCurrentLocationParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespGetCurrentLocationParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessResponseGetCurrentLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespStageFileDownloadParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespStageFileDownloadParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessResponseStageFileDownload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespPayloadPowerControlParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespPayloadPowerControlParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessResponsePayloadPowerControl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::ReqPayloadMetricsParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::ReqPayloadMetricsParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessReqPayloadMetrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespGnssEphStopDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespGnssEphStopDataReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessRespGnssEphStopDataReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespGnssEphStartDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespGnssEphStartDataReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessRespGnssEphStartDataReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::GnssEphData, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::GnssEphData* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessGnssEphData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessRespGetEpsVoltageStopReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessRespGetEpsVoltageStartReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::GetEpsVoltage, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::GetEpsVoltage* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessGetEpsVoltage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessRespStartSesThermMgmntReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessRespStopSesThermMgmntReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespSesTempReqParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespSesTempReqParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessRespSesTempReq(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::SesThermalStatusNtf, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::SesThermalStatusNtf* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessSesThrmlNtf(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiApplicationCallback_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiApplicationCallback::Service, ::antaris_api_peer_to_peer::RespPaSatOsMsg, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiApplicationCallback::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespPaSatOsMsg* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PA_ProcessRespPaSatOsMsg(ctx, req, resp);
             }, this)));
}

AntarisapiApplicationCallback::Service::~Service() {
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_StartSequence(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::StartSequenceParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ShutdownApp(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::ShutdownParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessHealthCheck(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::HealthCheckParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessResponseRegister(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespRegisterParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessResponseGetCurrentLocation(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespGetCurrentLocationParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessResponseStageFileDownload(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespStageFileDownloadParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessResponsePayloadPowerControl(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespPayloadPowerControlParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessReqPayloadMetrics(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::ReqPayloadMetricsParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessRespGnssEphStopDataReq(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStopDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessRespGnssEphStartDataReq(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespGnssEphStartDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessGnssEphData(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::GnssEphData* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessRespGetEpsVoltageStopReq(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessRespGetEpsVoltageStartReq(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessGetEpsVoltage(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::GetEpsVoltage* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessRespStartSesThermMgmntReq(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessRespStopSesThermMgmntReq(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessRespSesTempReq(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespSesTempReqParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessSesThrmlNtf(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::SesThermalStatusNtf* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiApplicationCallback::Service::PA_ProcessRespPaSatOsMsg(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespPaSatOsMsg* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* AntarisapiPayloadController_method_names[] = {
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_register",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_get_current_location",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_stage_file_download",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_sequence_done",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_payload_power_control",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_response_health_check",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_response_shutdown",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_response_payload_metrics",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_gnss_eph_stop_req",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_gnss_eph_start_req",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_get_eps_voltage_stop_req",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_get_eps_voltage_start_req",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_start_ses_therm_mgmnt_req",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_stop_ses_therm_mgmnt_req",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_ses_temp_req",
  "/antaris_api_peer_to_peer.AntarisapiPayloadController/PC_pa_satos_message",
};

std::unique_ptr< AntarisapiPayloadController::Stub> AntarisapiPayloadController::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AntarisapiPayloadController::Stub> stub(new AntarisapiPayloadController::Stub(channel, options));
  return stub;
}

AntarisapiPayloadController::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PC_register_(AntarisapiPayloadController_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_get_current_location_(AntarisapiPayloadController_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_stage_file_download_(AntarisapiPayloadController_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_sequence_done_(AntarisapiPayloadController_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_payload_power_control_(AntarisapiPayloadController_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_response_health_check_(AntarisapiPayloadController_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_response_shutdown_(AntarisapiPayloadController_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_response_payload_metrics_(AntarisapiPayloadController_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_gnss_eph_stop_req_(AntarisapiPayloadController_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_gnss_eph_start_req_(AntarisapiPayloadController_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_get_eps_voltage_stop_req_(AntarisapiPayloadController_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_get_eps_voltage_start_req_(AntarisapiPayloadController_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_start_ses_therm_mgmnt_req_(AntarisapiPayloadController_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_stop_ses_therm_mgmnt_req_(AntarisapiPayloadController_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_ses_temp_req_(AntarisapiPayloadController_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PC_pa_satos_message_(AntarisapiPayloadController_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AntarisapiPayloadController::Stub::PC_register(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqRegisterParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::ReqRegisterParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_register_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_register(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqRegisterParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::ReqRegisterParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_register_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_register(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqRegisterParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_registerRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqRegisterParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::ReqRegisterParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_registerRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqRegisterParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_registerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_get_current_location(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_get_current_location_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_get_current_location(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_get_current_location_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_get_current_location(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_get_current_location_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_get_current_locationRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_get_current_location_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_get_current_locationRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_get_current_locationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_stage_file_download(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqStageFileDownloadParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::ReqStageFileDownloadParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_stage_file_download_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_stage_file_download(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqStageFileDownloadParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::ReqStageFileDownloadParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_stage_file_download_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_stage_file_download(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqStageFileDownloadParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_stage_file_download_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_stage_file_downloadRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqStageFileDownloadParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::ReqStageFileDownloadParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_stage_file_download_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_stage_file_downloadRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqStageFileDownloadParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_stage_file_downloadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_sequence_done(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::CmdSequenceDoneParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::CmdSequenceDoneParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_sequence_done_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_sequence_done(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::CmdSequenceDoneParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::CmdSequenceDoneParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_sequence_done_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_sequence_done(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::CmdSequenceDoneParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_sequence_done_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_sequence_doneRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::CmdSequenceDoneParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::CmdSequenceDoneParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_sequence_done_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_sequence_doneRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::CmdSequenceDoneParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_sequence_doneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_payload_power_control(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_payload_power_control_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_payload_power_control(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_payload_power_control_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_payload_power_control(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_payload_power_control_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_payload_power_controlRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_payload_power_control_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_payload_power_controlRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_payload_power_controlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_response_health_check(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespHealthCheckParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespHealthCheckParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_response_health_check_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_response_health_check(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespHealthCheckParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespHealthCheckParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_response_health_check_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_response_health_check(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespHealthCheckParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_response_health_check_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_response_health_checkRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespHealthCheckParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespHealthCheckParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_response_health_check_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_response_health_checkRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespHealthCheckParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_response_health_checkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_response_shutdown(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespShutdownParams& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::RespShutdownParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_response_shutdown_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_response_shutdown(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespShutdownParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::RespShutdownParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_response_shutdown_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_response_shutdown(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespShutdownParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_response_shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_response_shutdownRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespShutdownParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::RespShutdownParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_response_shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_response_shutdownRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::RespShutdownParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_response_shutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_response_payload_metrics(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::PayloadMetricsResponse& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::PayloadMetricsResponse, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_response_payload_metrics_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_response_payload_metrics(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::PayloadMetricsResponse* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::PayloadMetricsResponse, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_response_payload_metrics_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_response_payload_metrics(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::PayloadMetricsResponse* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_response_payload_metrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_response_payload_metricsRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::PayloadMetricsResponse& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::PayloadMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_response_payload_metrics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_response_payload_metricsRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::PayloadMetricsResponse& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_response_payload_metricsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_gnss_eph_stop_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_gnss_eph_stop_req_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_gnss_eph_stop_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_gnss_eph_stop_req_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_gnss_eph_stop_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_gnss_eph_stop_req_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_gnss_eph_stop_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_gnss_eph_stop_req_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_gnss_eph_stop_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_gnss_eph_stop_reqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_gnss_eph_start_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_gnss_eph_start_req_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_gnss_eph_start_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_gnss_eph_start_req_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_gnss_eph_start_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_gnss_eph_start_req_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_gnss_eph_start_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_gnss_eph_start_req_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_gnss_eph_start_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_gnss_eph_start_reqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_get_eps_voltage_stop_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_get_eps_voltage_stop_req_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_get_eps_voltage_stop_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_get_eps_voltage_stop_req_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_get_eps_voltage_stop_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_get_eps_voltage_stop_req_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_get_eps_voltage_stop_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_get_eps_voltage_stop_req_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_get_eps_voltage_stop_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_get_eps_voltage_stop_reqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_get_eps_voltage_start_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_get_eps_voltage_start_req_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_get_eps_voltage_start_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_get_eps_voltage_start_req_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_get_eps_voltage_start_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_get_eps_voltage_start_req_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_get_eps_voltage_start_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_get_eps_voltage_start_req_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_get_eps_voltage_start_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_get_eps_voltage_start_reqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_start_ses_therm_mgmnt_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StartSesThermMgmntReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::StartSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_start_ses_therm_mgmnt_req_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_start_ses_therm_mgmnt_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StartSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::StartSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_start_ses_therm_mgmnt_req_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_start_ses_therm_mgmnt_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StartSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_start_ses_therm_mgmnt_req_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_start_ses_therm_mgmnt_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StartSesThermMgmntReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::StartSesThermMgmntReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_start_ses_therm_mgmnt_req_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_start_ses_therm_mgmnt_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StartSesThermMgmntReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_start_ses_therm_mgmnt_reqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_stop_ses_therm_mgmnt_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StopSesThermMgmntReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::StopSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_stop_ses_therm_mgmnt_req_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_stop_ses_therm_mgmnt_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StopSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::StopSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_stop_ses_therm_mgmnt_req_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_stop_ses_therm_mgmnt_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StopSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_stop_ses_therm_mgmnt_req_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_stop_ses_therm_mgmnt_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StopSesThermMgmntReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::StopSesThermMgmntReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_stop_ses_therm_mgmnt_req_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_stop_ses_therm_mgmnt_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::StopSesThermMgmntReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_stop_ses_therm_mgmnt_reqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_ses_temp_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::SesTempReq& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::SesTempReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_ses_temp_req_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_ses_temp_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::SesTempReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::SesTempReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_ses_temp_req_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_ses_temp_req(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::SesTempReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_ses_temp_req_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_ses_temp_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::SesTempReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::SesTempReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_ses_temp_req_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_ses_temp_reqRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::SesTempReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_ses_temp_reqRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AntarisapiPayloadController::Stub::PC_pa_satos_message(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::PaSatOsMsg& request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  return ::grpc::internal::BlockingUnaryCall< ::antaris_api_peer_to_peer::PaSatOsMsg, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PC_pa_satos_message_, context, request, response);
}

void AntarisapiPayloadController::Stub::async::PC_pa_satos_message(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::PaSatOsMsg* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::antaris_api_peer_to_peer::PaSatOsMsg, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_pa_satos_message_, context, request, response, std::move(f));
}

void AntarisapiPayloadController::Stub::async::PC_pa_satos_message(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::PaSatOsMsg* request, ::antaris_api_peer_to_peer::AntarisReturnType* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PC_pa_satos_message_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::PrepareAsyncPC_pa_satos_messageRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::PaSatOsMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::antaris_api_peer_to_peer::AntarisReturnType, ::antaris_api_peer_to_peer::PaSatOsMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PC_pa_satos_message_, context, request);
}

::grpc::ClientAsyncResponseReader< ::antaris_api_peer_to_peer::AntarisReturnType>* AntarisapiPayloadController::Stub::AsyncPC_pa_satos_messageRaw(::grpc::ClientContext* context, const ::antaris_api_peer_to_peer::PaSatOsMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPC_pa_satos_messageRaw(context, request, cq);
  result->StartCall();
  return result;
}

AntarisapiPayloadController::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::ReqRegisterParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::ReqRegisterParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_get_current_location(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::ReqStageFileDownloadParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::ReqStageFileDownloadParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_stage_file_download(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::CmdSequenceDoneParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::CmdSequenceDoneParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_sequence_done(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_payload_power_control(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::RespHealthCheckParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespHealthCheckParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_response_health_check(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::RespShutdownParams, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::RespShutdownParams* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_response_shutdown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::PayloadMetricsResponse, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::PayloadMetricsResponse* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_response_payload_metrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_gnss_eph_stop_req(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_gnss_eph_start_req(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_get_eps_voltage_stop_req(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_get_eps_voltage_start_req(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::StartSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::StartSesThermMgmntReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_start_ses_therm_mgmnt_req(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::StopSesThermMgmntReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::StopSesThermMgmntReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_stop_ses_therm_mgmnt_req(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::SesTempReq, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::SesTempReq* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_ses_temp_req(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AntarisapiPayloadController_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AntarisapiPayloadController::Service, ::antaris_api_peer_to_peer::PaSatOsMsg, ::antaris_api_peer_to_peer::AntarisReturnType, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AntarisapiPayloadController::Service* service,
             ::grpc::ServerContext* ctx,
             const ::antaris_api_peer_to_peer::PaSatOsMsg* req,
             ::antaris_api_peer_to_peer::AntarisReturnType* resp) {
               return service->PC_pa_satos_message(ctx, req, resp);
             }, this)));
}

AntarisapiPayloadController::Service::~Service() {
}

::grpc::Status AntarisapiPayloadController::Service::PC_register(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::ReqRegisterParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_get_current_location(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_stage_file_download(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::ReqStageFileDownloadParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_sequence_done(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::CmdSequenceDoneParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_payload_power_control(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_response_health_check(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespHealthCheckParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_response_shutdown(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::RespShutdownParams* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_response_payload_metrics(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::PayloadMetricsResponse* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_gnss_eph_stop_req(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_gnss_eph_start_req(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_get_eps_voltage_stop_req(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_get_eps_voltage_start_req(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_start_ses_therm_mgmnt_req(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::StartSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_stop_ses_therm_mgmnt_req(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::StopSesThermMgmntReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_ses_temp_req(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::SesTempReq* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AntarisapiPayloadController::Service::PC_pa_satos_message(::grpc::ServerContext* context, const ::antaris_api_peer_to_peer::PaSatOsMsg* request, ::antaris_api_peer_to_peer::AntarisReturnType* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace antaris_api_peer_to_peer

