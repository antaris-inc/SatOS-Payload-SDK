// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: defs/gen/proto/antaris_api.proto

#include "defs/gen/proto/antaris_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace antaris_api_peer_to_peer {
constexpr AntarisSdkVersion::AntarisSdkVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : major_(0)
  , minor_(0)
  , patch_(0){}
struct AntarisSdkVersionDefaultTypeInternal {
  constexpr AntarisSdkVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AntarisSdkVersionDefaultTypeInternal() {}
  union {
    AntarisSdkVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AntarisSdkVersionDefaultTypeInternal _AntarisSdkVersion_default_instance_;
constexpr ReqRegisterParams::ReqRegisterParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sdk_version_(nullptr)
  , correlation_id_(0)
  , health_check_fail_action_(0){}
struct ReqRegisterParamsDefaultTypeInternal {
  constexpr ReqRegisterParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqRegisterParamsDefaultTypeInternal() {}
  union {
    ReqRegisterParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqRegisterParamsDefaultTypeInternal _ReqRegisterParams_default_instance_;
constexpr RespRegisterParams::RespRegisterParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , correlation_id_(0)
  , req_status_(0){}
struct RespRegisterParamsDefaultTypeInternal {
  constexpr RespRegisterParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespRegisterParamsDefaultTypeInternal() {}
  union {
    RespRegisterParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespRegisterParamsDefaultTypeInternal _RespRegisterParams_default_instance_;
constexpr ReqGetCurrentLocationParams::ReqGetCurrentLocationParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0){}
struct ReqGetCurrentLocationParamsDefaultTypeInternal {
  constexpr ReqGetCurrentLocationParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetCurrentLocationParamsDefaultTypeInternal() {}
  union {
    ReqGetCurrentLocationParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetCurrentLocationParamsDefaultTypeInternal _ReqGetCurrentLocationParams_default_instance_;
constexpr RespGetCurrentLocationParams::RespGetCurrentLocationParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0)
  , longitude_(0)
  , latitude_(0)
  , determined_at_(int64_t{0})
  , altitude_(0){}
struct RespGetCurrentLocationParamsDefaultTypeInternal {
  constexpr RespGetCurrentLocationParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespGetCurrentLocationParamsDefaultTypeInternal() {}
  union {
    RespGetCurrentLocationParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespGetCurrentLocationParamsDefaultTypeInternal _RespGetCurrentLocationParams_default_instance_;
constexpr ReqStageFileDownloadParams::ReqStageFileDownloadParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , correlation_id_(0){}
struct ReqStageFileDownloadParamsDefaultTypeInternal {
  constexpr ReqStageFileDownloadParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqStageFileDownloadParamsDefaultTypeInternal() {}
  union {
    ReqStageFileDownloadParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqStageFileDownloadParamsDefaultTypeInternal _ReqStageFileDownloadParams_default_instance_;
constexpr RespStageFileDownloadParams::RespStageFileDownloadParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespStageFileDownloadParamsDefaultTypeInternal {
  constexpr RespStageFileDownloadParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespStageFileDownloadParamsDefaultTypeInternal() {}
  union {
    RespStageFileDownloadParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespStageFileDownloadParamsDefaultTypeInternal _RespStageFileDownloadParams_default_instance_;
constexpr ReqPayloadPowerControlParams::ReqPayloadPowerControlParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , power_operation_(0){}
struct ReqPayloadPowerControlParamsDefaultTypeInternal {
  constexpr ReqPayloadPowerControlParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqPayloadPowerControlParamsDefaultTypeInternal() {}
  union {
    ReqPayloadPowerControlParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqPayloadPowerControlParamsDefaultTypeInternal _ReqPayloadPowerControlParams_default_instance_;
constexpr RespPayloadPowerControlParams::RespPayloadPowerControlParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespPayloadPowerControlParamsDefaultTypeInternal {
  constexpr RespPayloadPowerControlParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespPayloadPowerControlParamsDefaultTypeInternal() {}
  union {
    RespPayloadPowerControlParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespPayloadPowerControlParamsDefaultTypeInternal _RespPayloadPowerControlParams_default_instance_;
constexpr RespShutdownParams::RespShutdownParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespShutdownParamsDefaultTypeInternal {
  constexpr RespShutdownParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespShutdownParamsDefaultTypeInternal() {}
  union {
    RespShutdownParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespShutdownParamsDefaultTypeInternal _RespShutdownParams_default_instance_;
constexpr RespHealthCheckParams::RespHealthCheckParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , application_state_(0)
  , reqs_to_pc_in_err_cnt_(0)
  , resps_to_pc_in_err_cnt_(0){}
struct RespHealthCheckParamsDefaultTypeInternal {
  constexpr RespHealthCheckParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespHealthCheckParamsDefaultTypeInternal() {}
  union {
    RespHealthCheckParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespHealthCheckParamsDefaultTypeInternal _RespHealthCheckParams_default_instance_;
constexpr StartSequenceParams::StartSequenceParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequence_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sequence_params_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scheduled_deadline_(int64_t{0})
  , correlation_id_(0){}
struct StartSequenceParamsDefaultTypeInternal {
  constexpr StartSequenceParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartSequenceParamsDefaultTypeInternal() {}
  union {
    StartSequenceParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartSequenceParamsDefaultTypeInternal _StartSequenceParams_default_instance_;
constexpr ShutdownParams::ShutdownParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , grace_time_(0){}
struct ShutdownParamsDefaultTypeInternal {
  constexpr ShutdownParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShutdownParamsDefaultTypeInternal() {}
  union {
    ShutdownParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShutdownParamsDefaultTypeInternal _ShutdownParams_default_instance_;
constexpr HealthCheckParams::HealthCheckParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , application_state_(0)
  , reqs_to_pc_in_err_cnt_(0)
  , resps_to_pc_in_err_cnt_(0){}
struct HealthCheckParamsDefaultTypeInternal {
  constexpr HealthCheckParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HealthCheckParamsDefaultTypeInternal() {}
  union {
    HealthCheckParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HealthCheckParamsDefaultTypeInternal _HealthCheckParams_default_instance_;
constexpr PayloadMetricsInfo::PayloadMetricsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : names_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , counter_(0){}
struct PayloadMetricsInfoDefaultTypeInternal {
  constexpr PayloadMetricsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PayloadMetricsInfoDefaultTypeInternal() {}
  union {
    PayloadMetricsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PayloadMetricsInfoDefaultTypeInternal _PayloadMetricsInfo_default_instance_;
constexpr ReqPayloadMetricsParams::ReqPayloadMetricsParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0){}
struct ReqPayloadMetricsParamsDefaultTypeInternal {
  constexpr ReqPayloadMetricsParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqPayloadMetricsParamsDefaultTypeInternal() {}
  union {
    ReqPayloadMetricsParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqPayloadMetricsParamsDefaultTypeInternal _ReqPayloadMetricsParams_default_instance_;
constexpr PayloadMetricsResponse::PayloadMetricsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metrics_()
  , timestamp_(int64_t{0})
  , correlation_id_(0)
  , used_counter_(0){}
struct PayloadMetricsResponseDefaultTypeInternal {
  constexpr PayloadMetricsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PayloadMetricsResponseDefaultTypeInternal() {}
  union {
    PayloadMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PayloadMetricsResponseDefaultTypeInternal _PayloadMetricsResponse_default_instance_;
constexpr CmdSequenceDoneParams::CmdSequenceDoneParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequence_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CmdSequenceDoneParamsDefaultTypeInternal {
  constexpr CmdSequenceDoneParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CmdSequenceDoneParamsDefaultTypeInternal() {}
  union {
    CmdSequenceDoneParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CmdSequenceDoneParamsDefaultTypeInternal _CmdSequenceDoneParams_default_instance_;
constexpr AntarisCorrelationId::AntarisCorrelationId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0){}
struct AntarisCorrelationIdDefaultTypeInternal {
  constexpr AntarisCorrelationIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AntarisCorrelationIdDefaultTypeInternal() {}
  union {
    AntarisCorrelationId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AntarisCorrelationIdDefaultTypeInternal _AntarisCorrelationId_default_instance_;
constexpr AntarisReturnType::AntarisReturnType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : return_code_(0)
{}
struct AntarisReturnTypeDefaultTypeInternal {
  constexpr AntarisReturnTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AntarisReturnTypeDefaultTypeInternal() {}
  union {
    AntarisReturnType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AntarisReturnTypeDefaultTypeInternal _AntarisReturnType_default_instance_;
}  // namespace antaris_api_peer_to_peer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_defs_2fgen_2fproto_2fantaris_5fapi_2eproto = nullptr;

const uint32_t TableStruct_defs_2fgen_2fproto_2fantaris_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisSdkVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisSdkVersion, major_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisSdkVersion, minor_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisSdkVersion, patch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqRegisterParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqRegisterParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqRegisterParams, health_check_fail_action_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqRegisterParams, sdk_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespRegisterParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespRegisterParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespRegisterParams, req_status_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespRegisterParams, auth_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGetCurrentLocationParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGetCurrentLocationParams, correlation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, req_status_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, longitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, latitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, altitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, determined_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqStageFileDownloadParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqStageFileDownloadParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqStageFileDownloadParams, file_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStageFileDownloadParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStageFileDownloadParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStageFileDownloadParams, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqPayloadPowerControlParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqPayloadPowerControlParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqPayloadPowerControlParams, power_operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespPayloadPowerControlParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespPayloadPowerControlParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespPayloadPowerControlParams, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespShutdownParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespShutdownParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespShutdownParams, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespHealthCheckParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespHealthCheckParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespHealthCheckParams, application_state_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespHealthCheckParams, reqs_to_pc_in_err_cnt_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespHealthCheckParams, resps_to_pc_in_err_cnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSequenceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSequenceParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSequenceParams, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSequenceParams, sequence_params_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSequenceParams, scheduled_deadline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ShutdownParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ShutdownParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ShutdownParams, grace_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::HealthCheckParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::HealthCheckParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::HealthCheckParams, application_state_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::HealthCheckParams, reqs_to_pc_in_err_cnt_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::HealthCheckParams, resps_to_pc_in_err_cnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsInfo, counter_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsInfo, names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqPayloadMetricsParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqPayloadMetricsParams, correlation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsResponse, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsResponse, used_counter_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsResponse, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::CmdSequenceDoneParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::CmdSequenceDoneParams, sequence_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisCorrelationId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisCorrelationId, correlation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisReturnType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisReturnType, return_code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::antaris_api_peer_to_peer::AntarisSdkVersion)},
  { 9, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqRegisterParams)},
  { 18, -1, -1, sizeof(::antaris_api_peer_to_peer::RespRegisterParams)},
  { 27, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqGetCurrentLocationParams)},
  { 34, -1, -1, sizeof(::antaris_api_peer_to_peer::RespGetCurrentLocationParams)},
  { 46, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqStageFileDownloadParams)},
  { 54, -1, -1, sizeof(::antaris_api_peer_to_peer::RespStageFileDownloadParams)},
  { 62, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqPayloadPowerControlParams)},
  { 70, -1, -1, sizeof(::antaris_api_peer_to_peer::RespPayloadPowerControlParams)},
  { 78, -1, -1, sizeof(::antaris_api_peer_to_peer::RespShutdownParams)},
  { 86, -1, -1, sizeof(::antaris_api_peer_to_peer::RespHealthCheckParams)},
  { 96, -1, -1, sizeof(::antaris_api_peer_to_peer::StartSequenceParams)},
  { 106, -1, -1, sizeof(::antaris_api_peer_to_peer::ShutdownParams)},
  { 114, -1, -1, sizeof(::antaris_api_peer_to_peer::HealthCheckParams)},
  { 124, -1, -1, sizeof(::antaris_api_peer_to_peer::PayloadMetricsInfo)},
  { 132, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqPayloadMetricsParams)},
  { 139, -1, -1, sizeof(::antaris_api_peer_to_peer::PayloadMetricsResponse)},
  { 149, -1, -1, sizeof(::antaris_api_peer_to_peer::CmdSequenceDoneParams)},
  { 156, -1, -1, sizeof(::antaris_api_peer_to_peer::AntarisCorrelationId)},
  { 163, -1, -1, sizeof(::antaris_api_peer_to_peer::AntarisReturnType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_AntarisSdkVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqRegisterParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespRegisterParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqGetCurrentLocationParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespGetCurrentLocationParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqStageFileDownloadParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespStageFileDownloadParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqPayloadPowerControlParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespPayloadPowerControlParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespShutdownParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespHealthCheckParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_StartSequenceParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ShutdownParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_HealthCheckParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_PayloadMetricsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqPayloadMetricsParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_PayloadMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_CmdSequenceDoneParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_AntarisCorrelationId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_AntarisReturnType_default_instance_),
};

const char descriptor_table_protodef_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n defs/gen/proto/antaris_api.proto\022\030anta"
  "ris_api_peer_to_peer\"@\n\021AntarisSdkVersio"
  "n\022\r\n\005major\030\001 \001(\005\022\r\n\005minor\030\002 \001(\005\022\r\n\005patch"
  "\030\003 \001(\005\"\217\001\n\021ReqRegisterParams\022\026\n\016correlat"
  "ion_id\030\001 \001(\005\022 \n\030health_check_fail_action"
  "\030\002 \001(\005\022@\n\013sdk_version\030\003 \001(\0132+.antaris_ap"
  "i_peer_to_peer.AntarisSdkVersion\"T\n\022Resp"
  "RegisterParams\022\026\n\016correlation_id\030\001 \001(\005\022\022"
  "\n\nreq_status\030\002 \001(\005\022\022\n\nauth_token\030\003 \001(\t\"5"
  "\n\033ReqGetCurrentLocationParams\022\026\n\016correla"
  "tion_id\030\001 \001(\005\"\230\001\n\034RespGetCurrentLocation"
  "Params\022\026\n\016correlation_id\030\001 \001(\005\022\022\n\nreq_st"
  "atus\030\002 \001(\005\022\021\n\tlongitude\030\003 \001(\002\022\020\n\010latitud"
  "e\030\004 \001(\002\022\020\n\010altitude\030\005 \001(\002\022\025\n\rdetermined_"
  "at\030\006 \001(\003\"G\n\032ReqStageFileDownloadParams\022\026"
  "\n\016correlation_id\030\001 \001(\005\022\021\n\tfile_path\030\002 \001("
  "\t\"I\n\033RespStageFileDownloadParams\022\026\n\016corr"
  "elation_id\030\001 \001(\005\022\022\n\nreq_status\030\002 \001(\005\"O\n\034"
  "ReqPayloadPowerControlParams\022\026\n\016correlat"
  "ion_id\030\001 \001(\005\022\027\n\017power_operation\030\002 \001(\005\"K\n"
  "\035RespPayloadPowerControlParams\022\026\n\016correl"
  "ation_id\030\001 \001(\005\022\022\n\nreq_status\030\002 \001(\005\"@\n\022Re"
  "spShutdownParams\022\026\n\016correlation_id\030\001 \001(\005"
  "\022\022\n\nreq_status\030\002 \001(\005\"\211\001\n\025RespHealthCheck"
  "Params\022\026\n\016correlation_id\030\001 \001(\005\022\031\n\021applic"
  "ation_state\030\002 \001(\005\022\035\n\025reqs_to_pc_in_err_c"
  "nt\030\003 \001(\005\022\036\n\026resps_to_pc_in_err_cnt\030\004 \001(\005"
  "\"w\n\023StartSequenceParams\022\026\n\016correlation_i"
  "d\030\001 \001(\005\022\023\n\013sequence_id\030\002 \001(\t\022\027\n\017sequence"
  "_params\030\003 \001(\t\022\032\n\022scheduled_deadline\030\004 \001("
  "\003\"<\n\016ShutdownParams\022\026\n\016correlation_id\030\001 "
  "\001(\005\022\022\n\ngrace_time\030\002 \001(\005\"\205\001\n\021HealthCheckP"
  "arams\022\026\n\016correlation_id\030\001 \001(\005\022\031\n\021applica"
  "tion_state\030\002 \001(\005\022\035\n\025reqs_to_pc_in_err_cn"
  "t\030\003 \001(\005\022\036\n\026resps_to_pc_in_err_cnt\030\004 \001(\005\""
  "4\n\022PayloadMetricsInfo\022\017\n\007counter\030\001 \001(\005\022\r"
  "\n\005names\030\002 \001(\t\"1\n\027ReqPayloadMetricsParams"
  "\022\026\n\016correlation_id\030\001 \001(\005\"\230\001\n\026PayloadMetr"
  "icsResponse\022\026\n\016correlation_id\030\001 \001(\005\022\021\n\tt"
  "imestamp\030\002 \001(\003\022\024\n\014used_counter\030\003 \001(\005\022=\n\007"
  "metrics\030\004 \003(\0132,.antaris_api_peer_to_peer"
  ".PayloadMetricsInfo\",\n\025CmdSequenceDonePa"
  "rams\022\023\n\013sequence_id\030\001 \001(\t\".\n\024AntarisCorr"
  "elationId\022\026\n\016correlation_id\030\001 \001(\005\"U\n\021Ant"
  "arisReturnType\022@\n\013return_code\030\001 \001(\0162+.an"
  "taris_api_peer_to_peer.AntarisReturnCode"
  "*\354\001\n\021AntarisReturnCode\022\016\n\nAn_SUCCESS\020\000\022\037"
  "\n\022An_GENERIC_FAILURE\020\377\377\377\377\377\377\377\377\377\001\022\037\n\022An_NO"
  "T_IMPLEMENTED\020\376\377\377\377\377\377\377\377\377\001\022 \n\023An_OUT_OF_RE"
  "SOURCES\020\375\377\377\377\377\377\377\377\377\001\022\035\n\020An_NOT_PERMITTED\020\374"
  "\377\377\377\377\377\377\377\377\001\022\036\n\021An_INVALID_PARAMS\020\373\377\377\377\377\377\377\377\377"
  "\001\022$\n\027An_INCOMPATIBLE_VERSION\020\372\377\377\377\377\377\377\377\377\0012"
  "\235\010\n\035AntarisapiApplicationCallback\022p\n\020PA_"
  "StartSequence\022-.antaris_api_peer_to_peer"
  ".StartSequenceParams\032+.antaris_api_peer_"
  "to_peer.AntarisReturnType\"\000\022i\n\016PA_Shutdo"
  "wnApp\022(.antaris_api_peer_to_peer.Shutdow"
  "nParams\032+.antaris_api_peer_to_peer.Antar"
  "isReturnType\"\000\022s\n\025PA_ProcessHealthCheck\022"
  "+.antaris_api_peer_to_peer.HealthCheckPa"
  "rams\032+.antaris_api_peer_to_peer.AntarisR"
  "eturnType\"\000\022y\n\032PA_ProcessResponseRegiste"
  "r\022,.antaris_api_peer_to_peer.RespRegiste"
  "rParams\032+.antaris_api_peer_to_peer.Antar"
  "isReturnType\"\000\022\215\001\n$PA_ProcessResponseGet"
  "CurrentLocation\0226.antaris_api_peer_to_pe"
  "er.RespGetCurrentLocationParams\032+.antari"
  "s_api_peer_to_peer.AntarisReturnType\"\000\022\213"
  "\001\n#PA_ProcessResponseStageFileDownload\0225"
  ".antaris_api_peer_to_peer.RespStageFileD"
  "ownloadParams\032+.antaris_api_peer_to_peer"
  ".AntarisReturnType\"\000\022\217\001\n%PA_ProcessRespo"
  "nsePayloadPowerControl\0227.antaris_api_pee"
  "r_to_peer.RespPayloadPowerControlParams\032"
  "+.antaris_api_peer_to_peer.AntarisReturn"
  "Type\"\000\022\177\n\033PA_ProcessReqPayloadMetrics\0221."
  "antaris_api_peer_to_peer.ReqPayloadMetri"
  "csParams\032+.antaris_api_peer_to_peer.Anta"
  "risReturnType\"\0002\361\007\n\033AntarisapiPayloadCon"
  "troller\022i\n\013PC_register\022+.antaris_api_pee"
  "r_to_peer.ReqRegisterParams\032+.antaris_ap"
  "i_peer_to_peer.AntarisReturnType\"\000\022\177\n\027PC"
  "_get_current_location\0225.antaris_api_peer"
  "_to_peer.ReqGetCurrentLocationParams\032+.a"
  "ntaris_api_peer_to_peer.AntarisReturnTyp"
  "e\"\000\022}\n\026PC_stage_file_download\0224.antaris_"
  "api_peer_to_peer.ReqStageFileDownloadPar"
  "ams\032+.antaris_api_peer_to_peer.AntarisRe"
  "turnType\"\000\022r\n\020PC_sequence_done\022/.antaris"
  "_api_peer_to_peer.CmdSequenceDoneParams\032"
  "+.antaris_api_peer_to_peer.AntarisReturn"
  "Type\"\000\022\201\001\n\030PC_payload_power_control\0226.an"
  "taris_api_peer_to_peer.ReqPayloadPowerCo"
  "ntrolParams\032+.antaris_api_peer_to_peer.A"
  "ntarisReturnType\"\000\022z\n\030PC_response_health"
  "_check\022/.antaris_api_peer_to_peer.RespHe"
  "althCheckParams\032+.antaris_api_peer_to_pe"
  "er.AntarisReturnType\"\000\022s\n\024PC_response_sh"
  "utdown\022,.antaris_api_peer_to_peer.RespSh"
  "utdownParams\032+.antaris_api_peer_to_peer."
  "AntarisReturnType\"\000\022~\n\033PC_response_paylo"
  "ad_metrics\0220.antaris_api_peer_to_peer.Pa"
  "yloadMetricsResponse\032+.antaris_api_peer_"
  "to_peer.AntarisReturnType\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto = {
  false, false, 4155, descriptor_table_protodef_defs_2fgen_2fproto_2fantaris_5fapi_2eproto, "defs/gen/proto/antaris_api.proto", 
  &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once, nullptr, 0, 20,
  schemas, file_default_instances, TableStruct_defs_2fgen_2fproto_2fantaris_5fapi_2eproto::offsets,
  file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto, file_level_enum_descriptors_defs_2fgen_2fproto_2fantaris_5fapi_2eproto, file_level_service_descriptors_defs_2fgen_2fproto_2fantaris_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter() {
  return &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_defs_2fgen_2fproto_2fantaris_5fapi_2eproto(&descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto);
namespace antaris_api_peer_to_peer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AntarisReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto);
  return file_level_enum_descriptors_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[0];
}
bool AntarisReturnCode_IsValid(int value) {
  switch (value) {
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AntarisSdkVersion::_Internal {
 public:
};

AntarisSdkVersion::AntarisSdkVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.AntarisSdkVersion)
}
AntarisSdkVersion::AntarisSdkVersion(const AntarisSdkVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.AntarisSdkVersion)
}

inline void AntarisSdkVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&major_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

AntarisSdkVersion::~AntarisSdkVersion() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.AntarisSdkVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AntarisSdkVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntarisSdkVersion::ArenaDtor(void* object) {
  AntarisSdkVersion* _this = reinterpret_cast< AntarisSdkVersion* >(object);
  (void)_this;
}
void AntarisSdkVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AntarisSdkVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AntarisSdkVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.AntarisSdkVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntarisSdkVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AntarisSdkVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.AntarisSdkVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_major(), target);
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minor(), target);
  }

  // int32 patch = 3;
  if (this->_internal_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.AntarisSdkVersion)
  return target;
}

size_t AntarisSdkVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.AntarisSdkVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_major());
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
  }

  // int32 patch = 3;
  if (this->_internal_patch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_patch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntarisSdkVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AntarisSdkVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntarisSdkVersion::GetClassData() const { return &_class_data_; }

void AntarisSdkVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AntarisSdkVersion *>(to)->MergeFrom(
      static_cast<const AntarisSdkVersion &>(from));
}


void AntarisSdkVersion::MergeFrom(const AntarisSdkVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.AntarisSdkVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  if (from._internal_patch() != 0) {
    _internal_set_patch(from._internal_patch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntarisSdkVersion::CopyFrom(const AntarisSdkVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.AntarisSdkVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntarisSdkVersion::IsInitialized() const {
  return true;
}

void AntarisSdkVersion::InternalSwap(AntarisSdkVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntarisSdkVersion, patch_)
      + sizeof(AntarisSdkVersion::patch_)
      - PROTOBUF_FIELD_OFFSET(AntarisSdkVersion, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntarisSdkVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[0]);
}

// ===================================================================

class ReqRegisterParams::_Internal {
 public:
  static const ::antaris_api_peer_to_peer::AntarisSdkVersion& sdk_version(const ReqRegisterParams* msg);
};

const ::antaris_api_peer_to_peer::AntarisSdkVersion&
ReqRegisterParams::_Internal::sdk_version(const ReqRegisterParams* msg) {
  return *msg->sdk_version_;
}
ReqRegisterParams::ReqRegisterParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqRegisterParams)
}
ReqRegisterParams::ReqRegisterParams(const ReqRegisterParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sdk_version()) {
    sdk_version_ = new ::antaris_api_peer_to_peer::AntarisSdkVersion(*from.sdk_version_);
  } else {
    sdk_version_ = nullptr;
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&health_check_fail_action_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(health_check_fail_action_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqRegisterParams)
}

inline void ReqRegisterParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sdk_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&health_check_fail_action_) -
    reinterpret_cast<char*>(&sdk_version_)) + sizeof(health_check_fail_action_));
}

ReqRegisterParams::~ReqRegisterParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqRegisterParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqRegisterParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sdk_version_;
}

void ReqRegisterParams::ArenaDtor(void* object) {
  ReqRegisterParams* _this = reinterpret_cast< ReqRegisterParams* >(object);
  (void)_this;
}
void ReqRegisterParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqRegisterParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqRegisterParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqRegisterParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sdk_version_ != nullptr) {
    delete sdk_version_;
  }
  sdk_version_ = nullptr;
  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&health_check_fail_action_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(health_check_fail_action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqRegisterParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 health_check_fail_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          health_check_fail_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .antaris_api_peer_to_peer.AntarisSdkVersion sdk_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sdk_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqRegisterParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqRegisterParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 health_check_fail_action = 2;
  if (this->_internal_health_check_fail_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_health_check_fail_action(), target);
  }

  // .antaris_api_peer_to_peer.AntarisSdkVersion sdk_version = 3;
  if (this->_internal_has_sdk_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sdk_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqRegisterParams)
  return target;
}

size_t ReqRegisterParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqRegisterParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .antaris_api_peer_to_peer.AntarisSdkVersion sdk_version = 3;
  if (this->_internal_has_sdk_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sdk_version_);
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 health_check_fail_action = 2;
  if (this->_internal_health_check_fail_action() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_health_check_fail_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqRegisterParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqRegisterParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqRegisterParams::GetClassData() const { return &_class_data_; }

void ReqRegisterParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqRegisterParams *>(to)->MergeFrom(
      static_cast<const ReqRegisterParams &>(from));
}


void ReqRegisterParams::MergeFrom(const ReqRegisterParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqRegisterParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sdk_version()) {
    _internal_mutable_sdk_version()->::antaris_api_peer_to_peer::AntarisSdkVersion::MergeFrom(from._internal_sdk_version());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_health_check_fail_action() != 0) {
    _internal_set_health_check_fail_action(from._internal_health_check_fail_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqRegisterParams::CopyFrom(const ReqRegisterParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqRegisterParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegisterParams::IsInitialized() const {
  return true;
}

void ReqRegisterParams::InternalSwap(ReqRegisterParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqRegisterParams, health_check_fail_action_)
      + sizeof(ReqRegisterParams::health_check_fail_action_)
      - PROTOBUF_FIELD_OFFSET(ReqRegisterParams, sdk_version_)>(
          reinterpret_cast<char*>(&sdk_version_),
          reinterpret_cast<char*>(&other->sdk_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqRegisterParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[1]);
}

// ===================================================================

class RespRegisterParams::_Internal {
 public:
};

RespRegisterParams::RespRegisterParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespRegisterParams)
}
RespRegisterParams::RespRegisterParams(const RespRegisterParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_token().empty()) {
    auth_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespRegisterParams)
}

inline void RespRegisterParams::SharedCtor() {
auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespRegisterParams::~RespRegisterParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespRegisterParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespRegisterParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RespRegisterParams::ArenaDtor(void* object) {
  RespRegisterParams* _this = reinterpret_cast< RespRegisterParams* >(object);
  (void)_this;
}
void RespRegisterParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespRegisterParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespRegisterParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespRegisterParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_token_.ClearToEmpty();
  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespRegisterParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string auth_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.RespRegisterParams.auth_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespRegisterParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespRegisterParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  // string auth_token = 3;
  if (!this->_internal_auth_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.RespRegisterParams.auth_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_auth_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespRegisterParams)
  return target;
}

size_t RespRegisterParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespRegisterParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_token = 3;
  if (!this->_internal_auth_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespRegisterParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespRegisterParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespRegisterParams::GetClassData() const { return &_class_data_; }

void RespRegisterParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespRegisterParams *>(to)->MergeFrom(
      static_cast<const RespRegisterParams &>(from));
}


void RespRegisterParams::MergeFrom(const RespRegisterParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespRegisterParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_auth_token().empty()) {
    _internal_set_auth_token(from._internal_auth_token());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespRegisterParams::CopyFrom(const RespRegisterParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespRegisterParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespRegisterParams::IsInitialized() const {
  return true;
}

void RespRegisterParams::InternalSwap(RespRegisterParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_token_, lhs_arena,
      &other->auth_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespRegisterParams, req_status_)
      + sizeof(RespRegisterParams::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespRegisterParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespRegisterParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[2]);
}

// ===================================================================

class ReqGetCurrentLocationParams::_Internal {
 public:
};

ReqGetCurrentLocationParams::ReqGetCurrentLocationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
}
ReqGetCurrentLocationParams::ReqGetCurrentLocationParams(const ReqGetCurrentLocationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  correlation_id_ = from.correlation_id_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
}

inline void ReqGetCurrentLocationParams::SharedCtor() {
correlation_id_ = 0;
}

ReqGetCurrentLocationParams::~ReqGetCurrentLocationParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqGetCurrentLocationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqGetCurrentLocationParams::ArenaDtor(void* object) {
  ReqGetCurrentLocationParams* _this = reinterpret_cast< ReqGetCurrentLocationParams* >(object);
  (void)_this;
}
void ReqGetCurrentLocationParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetCurrentLocationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetCurrentLocationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlation_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetCurrentLocationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqGetCurrentLocationParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  return target;
}

size_t ReqGetCurrentLocationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqGetCurrentLocationParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqGetCurrentLocationParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqGetCurrentLocationParams::GetClassData() const { return &_class_data_; }

void ReqGetCurrentLocationParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqGetCurrentLocationParams *>(to)->MergeFrom(
      static_cast<const ReqGetCurrentLocationParams &>(from));
}


void ReqGetCurrentLocationParams::MergeFrom(const ReqGetCurrentLocationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqGetCurrentLocationParams::CopyFrom(const ReqGetCurrentLocationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetCurrentLocationParams::IsInitialized() const {
  return true;
}

void ReqGetCurrentLocationParams::InternalSwap(ReqGetCurrentLocationParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(correlation_id_, other->correlation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetCurrentLocationParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[3]);
}

// ===================================================================

class RespGetCurrentLocationParams::_Internal {
 public:
};

RespGetCurrentLocationParams::RespGetCurrentLocationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
}
RespGetCurrentLocationParams::RespGetCurrentLocationParams(const RespGetCurrentLocationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
}

inline void RespGetCurrentLocationParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(altitude_));
}

RespGetCurrentLocationParams::~RespGetCurrentLocationParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespGetCurrentLocationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespGetCurrentLocationParams::ArenaDtor(void* object) {
  RespGetCurrentLocationParams* _this = reinterpret_cast< RespGetCurrentLocationParams* >(object);
  (void)_this;
}
void RespGetCurrentLocationParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespGetCurrentLocationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespGetCurrentLocationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(altitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespGetCurrentLocationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 determined_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          determined_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespGetCurrentLocationParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  // float longitude = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_longitude(), target);
  }

  // float latitude = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_latitude(), target);
  }

  // float altitude = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_altitude(), target);
  }

  // int64 determined_at = 6;
  if (this->_internal_determined_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_determined_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  return target;
}

size_t RespGetCurrentLocationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  // float longitude = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 4;
  }

  // float latitude = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 4;
  }

  // int64 determined_at = 6;
  if (this->_internal_determined_at() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_determined_at());
  }

  // float altitude = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespGetCurrentLocationParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespGetCurrentLocationParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespGetCurrentLocationParams::GetClassData() const { return &_class_data_; }

void RespGetCurrentLocationParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespGetCurrentLocationParams *>(to)->MergeFrom(
      static_cast<const RespGetCurrentLocationParams &>(from));
}


void RespGetCurrentLocationParams::MergeFrom(const RespGetCurrentLocationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = from._internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = from._internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (from._internal_determined_at() != 0) {
    _internal_set_determined_at(from._internal_determined_at());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = from._internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _internal_set_altitude(from._internal_altitude());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespGetCurrentLocationParams::CopyFrom(const RespGetCurrentLocationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespGetCurrentLocationParams::IsInitialized() const {
  return true;
}

void RespGetCurrentLocationParams::InternalSwap(RespGetCurrentLocationParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespGetCurrentLocationParams, altitude_)
      + sizeof(RespGetCurrentLocationParams::altitude_)
      - PROTOBUF_FIELD_OFFSET(RespGetCurrentLocationParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespGetCurrentLocationParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[4]);
}

// ===================================================================

class ReqStageFileDownloadParams::_Internal {
 public:
};

ReqStageFileDownloadParams::ReqStageFileDownloadParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
}
ReqStageFileDownloadParams::ReqStageFileDownloadParams(const ReqStageFileDownloadParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArenaForAllocation());
  }
  correlation_id_ = from.correlation_id_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
}

inline void ReqStageFileDownloadParams::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
correlation_id_ = 0;
}

ReqStageFileDownloadParams::~ReqStageFileDownloadParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqStageFileDownloadParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqStageFileDownloadParams::ArenaDtor(void* object) {
  ReqStageFileDownloadParams* _this = reinterpret_cast< ReqStageFileDownloadParams* >(object);
  (void)_this;
}
void ReqStageFileDownloadParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqStageFileDownloadParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqStageFileDownloadParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmpty();
  correlation_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqStageFileDownloadParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.ReqStageFileDownloadParams.file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqStageFileDownloadParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // string file_path = 2;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.ReqStageFileDownloadParams.file_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  return target;
}

size_t ReqStageFileDownloadParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 2;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqStageFileDownloadParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqStageFileDownloadParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqStageFileDownloadParams::GetClassData() const { return &_class_data_; }

void ReqStageFileDownloadParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqStageFileDownloadParams *>(to)->MergeFrom(
      static_cast<const ReqStageFileDownloadParams &>(from));
}


void ReqStageFileDownloadParams::MergeFrom(const ReqStageFileDownloadParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqStageFileDownloadParams::CopyFrom(const ReqStageFileDownloadParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStageFileDownloadParams::IsInitialized() const {
  return true;
}

void ReqStageFileDownloadParams::InternalSwap(ReqStageFileDownloadParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  swap(correlation_id_, other->correlation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqStageFileDownloadParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[5]);
}

// ===================================================================

class RespStageFileDownloadParams::_Internal {
 public:
};

RespStageFileDownloadParams::RespStageFileDownloadParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespStageFileDownloadParams)
}
RespStageFileDownloadParams::RespStageFileDownloadParams(const RespStageFileDownloadParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespStageFileDownloadParams)
}

inline void RespStageFileDownloadParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespStageFileDownloadParams::~RespStageFileDownloadParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespStageFileDownloadParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespStageFileDownloadParams::ArenaDtor(void* object) {
  RespStageFileDownloadParams* _this = reinterpret_cast< RespStageFileDownloadParams* >(object);
  (void)_this;
}
void RespStageFileDownloadParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespStageFileDownloadParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespStageFileDownloadParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespStageFileDownloadParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespStageFileDownloadParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  return target;
}

size_t RespStageFileDownloadParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespStageFileDownloadParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespStageFileDownloadParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespStageFileDownloadParams::GetClassData() const { return &_class_data_; }

void RespStageFileDownloadParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespStageFileDownloadParams *>(to)->MergeFrom(
      static_cast<const RespStageFileDownloadParams &>(from));
}


void RespStageFileDownloadParams::MergeFrom(const RespStageFileDownloadParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespStageFileDownloadParams::CopyFrom(const RespStageFileDownloadParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespStageFileDownloadParams::IsInitialized() const {
  return true;
}

void RespStageFileDownloadParams::InternalSwap(RespStageFileDownloadParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespStageFileDownloadParams, req_status_)
      + sizeof(RespStageFileDownloadParams::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespStageFileDownloadParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespStageFileDownloadParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[6]);
}

// ===================================================================

class ReqPayloadPowerControlParams::_Internal {
 public:
};

ReqPayloadPowerControlParams::ReqPayloadPowerControlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
}
ReqPayloadPowerControlParams::ReqPayloadPowerControlParams(const ReqPayloadPowerControlParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_operation_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(power_operation_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
}

inline void ReqPayloadPowerControlParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&power_operation_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(power_operation_));
}

ReqPayloadPowerControlParams::~ReqPayloadPowerControlParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqPayloadPowerControlParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqPayloadPowerControlParams::ArenaDtor(void* object) {
  ReqPayloadPowerControlParams* _this = reinterpret_cast< ReqPayloadPowerControlParams* >(object);
  (void)_this;
}
void ReqPayloadPowerControlParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqPayloadPowerControlParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqPayloadPowerControlParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_operation_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(power_operation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqPayloadPowerControlParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 power_operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          power_operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqPayloadPowerControlParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 power_operation = 2;
  if (this->_internal_power_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_power_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  return target;
}

size_t ReqPayloadPowerControlParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 power_operation = 2;
  if (this->_internal_power_operation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_power_operation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqPayloadPowerControlParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqPayloadPowerControlParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqPayloadPowerControlParams::GetClassData() const { return &_class_data_; }

void ReqPayloadPowerControlParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqPayloadPowerControlParams *>(to)->MergeFrom(
      static_cast<const ReqPayloadPowerControlParams &>(from));
}


void ReqPayloadPowerControlParams::MergeFrom(const ReqPayloadPowerControlParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_power_operation() != 0) {
    _internal_set_power_operation(from._internal_power_operation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqPayloadPowerControlParams::CopyFrom(const ReqPayloadPowerControlParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPayloadPowerControlParams::IsInitialized() const {
  return true;
}

void ReqPayloadPowerControlParams::InternalSwap(ReqPayloadPowerControlParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqPayloadPowerControlParams, power_operation_)
      + sizeof(ReqPayloadPowerControlParams::power_operation_)
      - PROTOBUF_FIELD_OFFSET(ReqPayloadPowerControlParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqPayloadPowerControlParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[7]);
}

// ===================================================================

class RespPayloadPowerControlParams::_Internal {
 public:
};

RespPayloadPowerControlParams::RespPayloadPowerControlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
}
RespPayloadPowerControlParams::RespPayloadPowerControlParams(const RespPayloadPowerControlParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
}

inline void RespPayloadPowerControlParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespPayloadPowerControlParams::~RespPayloadPowerControlParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespPayloadPowerControlParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespPayloadPowerControlParams::ArenaDtor(void* object) {
  RespPayloadPowerControlParams* _this = reinterpret_cast< RespPayloadPowerControlParams* >(object);
  (void)_this;
}
void RespPayloadPowerControlParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespPayloadPowerControlParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespPayloadPowerControlParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespPayloadPowerControlParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespPayloadPowerControlParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  return target;
}

size_t RespPayloadPowerControlParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespPayloadPowerControlParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespPayloadPowerControlParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespPayloadPowerControlParams::GetClassData() const { return &_class_data_; }

void RespPayloadPowerControlParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespPayloadPowerControlParams *>(to)->MergeFrom(
      static_cast<const RespPayloadPowerControlParams &>(from));
}


void RespPayloadPowerControlParams::MergeFrom(const RespPayloadPowerControlParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespPayloadPowerControlParams::CopyFrom(const RespPayloadPowerControlParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespPayloadPowerControlParams::IsInitialized() const {
  return true;
}

void RespPayloadPowerControlParams::InternalSwap(RespPayloadPowerControlParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespPayloadPowerControlParams, req_status_)
      + sizeof(RespPayloadPowerControlParams::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespPayloadPowerControlParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespPayloadPowerControlParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[8]);
}

// ===================================================================

class RespShutdownParams::_Internal {
 public:
};

RespShutdownParams::RespShutdownParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespShutdownParams)
}
RespShutdownParams::RespShutdownParams(const RespShutdownParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespShutdownParams)
}

inline void RespShutdownParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespShutdownParams::~RespShutdownParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespShutdownParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespShutdownParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespShutdownParams::ArenaDtor(void* object) {
  RespShutdownParams* _this = reinterpret_cast< RespShutdownParams* >(object);
  (void)_this;
}
void RespShutdownParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespShutdownParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespShutdownParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespShutdownParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespShutdownParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespShutdownParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespShutdownParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespShutdownParams)
  return target;
}

size_t RespShutdownParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespShutdownParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespShutdownParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespShutdownParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespShutdownParams::GetClassData() const { return &_class_data_; }

void RespShutdownParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespShutdownParams *>(to)->MergeFrom(
      static_cast<const RespShutdownParams &>(from));
}


void RespShutdownParams::MergeFrom(const RespShutdownParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespShutdownParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespShutdownParams::CopyFrom(const RespShutdownParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespShutdownParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespShutdownParams::IsInitialized() const {
  return true;
}

void RespShutdownParams::InternalSwap(RespShutdownParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespShutdownParams, req_status_)
      + sizeof(RespShutdownParams::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespShutdownParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespShutdownParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[9]);
}

// ===================================================================

class RespHealthCheckParams::_Internal {
 public:
};

RespHealthCheckParams::RespHealthCheckParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespHealthCheckParams)
}
RespHealthCheckParams::RespHealthCheckParams(const RespHealthCheckParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespHealthCheckParams)
}

inline void RespHealthCheckParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
}

RespHealthCheckParams::~RespHealthCheckParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespHealthCheckParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespHealthCheckParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespHealthCheckParams::ArenaDtor(void* object) {
  RespHealthCheckParams* _this = reinterpret_cast< RespHealthCheckParams* >(object);
  (void)_this;
}
void RespHealthCheckParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespHealthCheckParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespHealthCheckParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespHealthCheckParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespHealthCheckParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 application_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          application_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqs_to_pc_in_err_cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          reqs_to_pc_in_err_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 resps_to_pc_in_err_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          resps_to_pc_in_err_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespHealthCheckParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespHealthCheckParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 application_state = 2;
  if (this->_internal_application_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_application_state(), target);
  }

  // int32 reqs_to_pc_in_err_cnt = 3;
  if (this->_internal_reqs_to_pc_in_err_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reqs_to_pc_in_err_cnt(), target);
  }

  // int32 resps_to_pc_in_err_cnt = 4;
  if (this->_internal_resps_to_pc_in_err_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_resps_to_pc_in_err_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespHealthCheckParams)
  return target;
}

size_t RespHealthCheckParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespHealthCheckParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 application_state = 2;
  if (this->_internal_application_state() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_application_state());
  }

  // int32 reqs_to_pc_in_err_cnt = 3;
  if (this->_internal_reqs_to_pc_in_err_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqs_to_pc_in_err_cnt());
  }

  // int32 resps_to_pc_in_err_cnt = 4;
  if (this->_internal_resps_to_pc_in_err_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_resps_to_pc_in_err_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespHealthCheckParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespHealthCheckParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespHealthCheckParams::GetClassData() const { return &_class_data_; }

void RespHealthCheckParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespHealthCheckParams *>(to)->MergeFrom(
      static_cast<const RespHealthCheckParams &>(from));
}


void RespHealthCheckParams::MergeFrom(const RespHealthCheckParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespHealthCheckParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_application_state() != 0) {
    _internal_set_application_state(from._internal_application_state());
  }
  if (from._internal_reqs_to_pc_in_err_cnt() != 0) {
    _internal_set_reqs_to_pc_in_err_cnt(from._internal_reqs_to_pc_in_err_cnt());
  }
  if (from._internal_resps_to_pc_in_err_cnt() != 0) {
    _internal_set_resps_to_pc_in_err_cnt(from._internal_resps_to_pc_in_err_cnt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespHealthCheckParams::CopyFrom(const RespHealthCheckParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespHealthCheckParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespHealthCheckParams::IsInitialized() const {
  return true;
}

void RespHealthCheckParams::InternalSwap(RespHealthCheckParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespHealthCheckParams, resps_to_pc_in_err_cnt_)
      + sizeof(RespHealthCheckParams::resps_to_pc_in_err_cnt_)
      - PROTOBUF_FIELD_OFFSET(RespHealthCheckParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespHealthCheckParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[10]);
}

// ===================================================================

class StartSequenceParams::_Internal {
 public:
};

StartSequenceParams::StartSequenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.StartSequenceParams)
}
StartSequenceParams::StartSequenceParams(const StartSequenceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sequence_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequence_id().empty()) {
    sequence_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence_id(), 
      GetArenaForAllocation());
  }
  sequence_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sequence_params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequence_params().empty()) {
    sequence_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence_params(), 
      GetArenaForAllocation());
  }
  ::memcpy(&scheduled_deadline_, &from.scheduled_deadline_,
    static_cast<size_t>(reinterpret_cast<char*>(&correlation_id_) -
    reinterpret_cast<char*>(&scheduled_deadline_)) + sizeof(correlation_id_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.StartSequenceParams)
}

inline void StartSequenceParams::SharedCtor() {
sequence_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sequence_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sequence_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sequence_params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scheduled_deadline_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&correlation_id_) -
    reinterpret_cast<char*>(&scheduled_deadline_)) + sizeof(correlation_id_));
}

StartSequenceParams::~StartSequenceParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.StartSequenceParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartSequenceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sequence_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartSequenceParams::ArenaDtor(void* object) {
  StartSequenceParams* _this = reinterpret_cast< StartSequenceParams* >(object);
  (void)_this;
}
void StartSequenceParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartSequenceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartSequenceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.StartSequenceParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_id_.ClearToEmpty();
  sequence_params_.ClearToEmpty();
  ::memset(&scheduled_deadline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correlation_id_) -
      reinterpret_cast<char*>(&scheduled_deadline_)) + sizeof(correlation_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartSequenceParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sequence_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sequence_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.StartSequenceParams.sequence_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sequence_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sequence_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.StartSequenceParams.sequence_params"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 scheduled_deadline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          scheduled_deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartSequenceParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.StartSequenceParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // string sequence_id = 2;
  if (!this->_internal_sequence_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_id().data(), static_cast<int>(this->_internal_sequence_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.StartSequenceParams.sequence_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sequence_id(), target);
  }

  // string sequence_params = 3;
  if (!this->_internal_sequence_params().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_params().data(), static_cast<int>(this->_internal_sequence_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.StartSequenceParams.sequence_params");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sequence_params(), target);
  }

  // int64 scheduled_deadline = 4;
  if (this->_internal_scheduled_deadline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_scheduled_deadline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.StartSequenceParams)
  return target;
}

size_t StartSequenceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.StartSequenceParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sequence_id = 2;
  if (!this->_internal_sequence_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_id());
  }

  // string sequence_params = 3;
  if (!this->_internal_sequence_params().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_params());
  }

  // int64 scheduled_deadline = 4;
  if (this->_internal_scheduled_deadline() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_scheduled_deadline());
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartSequenceParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartSequenceParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartSequenceParams::GetClassData() const { return &_class_data_; }

void StartSequenceParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartSequenceParams *>(to)->MergeFrom(
      static_cast<const StartSequenceParams &>(from));
}


void StartSequenceParams::MergeFrom(const StartSequenceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.StartSequenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sequence_id().empty()) {
    _internal_set_sequence_id(from._internal_sequence_id());
  }
  if (!from._internal_sequence_params().empty()) {
    _internal_set_sequence_params(from._internal_sequence_params());
  }
  if (from._internal_scheduled_deadline() != 0) {
    _internal_set_scheduled_deadline(from._internal_scheduled_deadline());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartSequenceParams::CopyFrom(const StartSequenceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.StartSequenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSequenceParams::IsInitialized() const {
  return true;
}

void StartSequenceParams::InternalSwap(StartSequenceParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sequence_id_, lhs_arena,
      &other->sequence_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sequence_params_, lhs_arena,
      &other->sequence_params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartSequenceParams, correlation_id_)
      + sizeof(StartSequenceParams::correlation_id_)
      - PROTOBUF_FIELD_OFFSET(StartSequenceParams, scheduled_deadline_)>(
          reinterpret_cast<char*>(&scheduled_deadline_),
          reinterpret_cast<char*>(&other->scheduled_deadline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartSequenceParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[11]);
}

// ===================================================================

class ShutdownParams::_Internal {
 public:
};

ShutdownParams::ShutdownParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ShutdownParams)
}
ShutdownParams::ShutdownParams(const ShutdownParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&grace_time_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(grace_time_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ShutdownParams)
}

inline void ShutdownParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grace_time_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(grace_time_));
}

ShutdownParams::~ShutdownParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ShutdownParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShutdownParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShutdownParams::ArenaDtor(void* object) {
  ShutdownParams* _this = reinterpret_cast< ShutdownParams* >(object);
  (void)_this;
}
void ShutdownParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShutdownParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShutdownParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ShutdownParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grace_time_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(grace_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 grace_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          grace_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShutdownParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ShutdownParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 grace_time = 2;
  if (this->_internal_grace_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_grace_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ShutdownParams)
  return target;
}

size_t ShutdownParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ShutdownParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 grace_time = 2;
  if (this->_internal_grace_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_grace_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShutdownParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownParams::GetClassData() const { return &_class_data_; }

void ShutdownParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShutdownParams *>(to)->MergeFrom(
      static_cast<const ShutdownParams &>(from));
}


void ShutdownParams::MergeFrom(const ShutdownParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ShutdownParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_grace_time() != 0) {
    _internal_set_grace_time(from._internal_grace_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShutdownParams::CopyFrom(const ShutdownParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ShutdownParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownParams::IsInitialized() const {
  return true;
}

void ShutdownParams::InternalSwap(ShutdownParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShutdownParams, grace_time_)
      + sizeof(ShutdownParams::grace_time_)
      - PROTOBUF_FIELD_OFFSET(ShutdownParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[12]);
}

// ===================================================================

class HealthCheckParams::_Internal {
 public:
};

HealthCheckParams::HealthCheckParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.HealthCheckParams)
}
HealthCheckParams::HealthCheckParams(const HealthCheckParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.HealthCheckParams)
}

inline void HealthCheckParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
}

HealthCheckParams::~HealthCheckParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.HealthCheckParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HealthCheckParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HealthCheckParams::ArenaDtor(void* object) {
  HealthCheckParams* _this = reinterpret_cast< HealthCheckParams* >(object);
  (void)_this;
}
void HealthCheckParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthCheckParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HealthCheckParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.HealthCheckParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 application_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          application_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqs_to_pc_in_err_cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          reqs_to_pc_in_err_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 resps_to_pc_in_err_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          resps_to_pc_in_err_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.HealthCheckParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 application_state = 2;
  if (this->_internal_application_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_application_state(), target);
  }

  // int32 reqs_to_pc_in_err_cnt = 3;
  if (this->_internal_reqs_to_pc_in_err_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reqs_to_pc_in_err_cnt(), target);
  }

  // int32 resps_to_pc_in_err_cnt = 4;
  if (this->_internal_resps_to_pc_in_err_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_resps_to_pc_in_err_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.HealthCheckParams)
  return target;
}

size_t HealthCheckParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.HealthCheckParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 application_state = 2;
  if (this->_internal_application_state() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_application_state());
  }

  // int32 reqs_to_pc_in_err_cnt = 3;
  if (this->_internal_reqs_to_pc_in_err_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqs_to_pc_in_err_cnt());
  }

  // int32 resps_to_pc_in_err_cnt = 4;
  if (this->_internal_resps_to_pc_in_err_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_resps_to_pc_in_err_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HealthCheckParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckParams::GetClassData() const { return &_class_data_; }

void HealthCheckParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HealthCheckParams *>(to)->MergeFrom(
      static_cast<const HealthCheckParams &>(from));
}


void HealthCheckParams::MergeFrom(const HealthCheckParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.HealthCheckParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_application_state() != 0) {
    _internal_set_application_state(from._internal_application_state());
  }
  if (from._internal_reqs_to_pc_in_err_cnt() != 0) {
    _internal_set_reqs_to_pc_in_err_cnt(from._internal_reqs_to_pc_in_err_cnt());
  }
  if (from._internal_resps_to_pc_in_err_cnt() != 0) {
    _internal_set_resps_to_pc_in_err_cnt(from._internal_resps_to_pc_in_err_cnt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckParams::CopyFrom(const HealthCheckParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.HealthCheckParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckParams::IsInitialized() const {
  return true;
}

void HealthCheckParams::InternalSwap(HealthCheckParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthCheckParams, resps_to_pc_in_err_cnt_)
      + sizeof(HealthCheckParams::resps_to_pc_in_err_cnt_)
      - PROTOBUF_FIELD_OFFSET(HealthCheckParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[13]);
}

// ===================================================================

class PayloadMetricsInfo::_Internal {
 public:
};

PayloadMetricsInfo::PayloadMetricsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.PayloadMetricsInfo)
}
PayloadMetricsInfo::PayloadMetricsInfo(const PayloadMetricsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  names_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    names_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_names().empty()) {
    names_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_names(), 
      GetArenaForAllocation());
  }
  counter_ = from.counter_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.PayloadMetricsInfo)
}

inline void PayloadMetricsInfo::SharedCtor() {
names_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  names_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
counter_ = 0;
}

PayloadMetricsInfo::~PayloadMetricsInfo() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.PayloadMetricsInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PayloadMetricsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  names_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PayloadMetricsInfo::ArenaDtor(void* object) {
  PayloadMetricsInfo* _this = reinterpret_cast< PayloadMetricsInfo* >(object);
  (void)_this;
}
void PayloadMetricsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PayloadMetricsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PayloadMetricsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.PayloadMetricsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.ClearToEmpty();
  counter_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PayloadMetricsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_names();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.PayloadMetricsInfo.names"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PayloadMetricsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.PayloadMetricsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 counter = 1;
  if (this->_internal_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_counter(), target);
  }

  // string names = 2;
  if (!this->_internal_names().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_names().data(), static_cast<int>(this->_internal_names().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.PayloadMetricsInfo.names");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_names(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.PayloadMetricsInfo)
  return target;
}

size_t PayloadMetricsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.PayloadMetricsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string names = 2;
  if (!this->_internal_names().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_names());
  }

  // int32 counter = 1;
  if (this->_internal_counter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_counter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PayloadMetricsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PayloadMetricsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PayloadMetricsInfo::GetClassData() const { return &_class_data_; }

void PayloadMetricsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PayloadMetricsInfo *>(to)->MergeFrom(
      static_cast<const PayloadMetricsInfo &>(from));
}


void PayloadMetricsInfo::MergeFrom(const PayloadMetricsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.PayloadMetricsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_names().empty()) {
    _internal_set_names(from._internal_names());
  }
  if (from._internal_counter() != 0) {
    _internal_set_counter(from._internal_counter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PayloadMetricsInfo::CopyFrom(const PayloadMetricsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.PayloadMetricsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadMetricsInfo::IsInitialized() const {
  return true;
}

void PayloadMetricsInfo::InternalSwap(PayloadMetricsInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &names_, lhs_arena,
      &other->names_, rhs_arena
  );
  swap(counter_, other->counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PayloadMetricsInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[14]);
}

// ===================================================================

class ReqPayloadMetricsParams::_Internal {
 public:
};

ReqPayloadMetricsParams::ReqPayloadMetricsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
}
ReqPayloadMetricsParams::ReqPayloadMetricsParams(const ReqPayloadMetricsParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  correlation_id_ = from.correlation_id_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
}

inline void ReqPayloadMetricsParams::SharedCtor() {
correlation_id_ = 0;
}

ReqPayloadMetricsParams::~ReqPayloadMetricsParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqPayloadMetricsParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqPayloadMetricsParams::ArenaDtor(void* object) {
  ReqPayloadMetricsParams* _this = reinterpret_cast< ReqPayloadMetricsParams* >(object);
  (void)_this;
}
void ReqPayloadMetricsParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqPayloadMetricsParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqPayloadMetricsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlation_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqPayloadMetricsParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqPayloadMetricsParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  return target;
}

size_t ReqPayloadMetricsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqPayloadMetricsParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqPayloadMetricsParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqPayloadMetricsParams::GetClassData() const { return &_class_data_; }

void ReqPayloadMetricsParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqPayloadMetricsParams *>(to)->MergeFrom(
      static_cast<const ReqPayloadMetricsParams &>(from));
}


void ReqPayloadMetricsParams::MergeFrom(const ReqPayloadMetricsParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqPayloadMetricsParams::CopyFrom(const ReqPayloadMetricsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPayloadMetricsParams::IsInitialized() const {
  return true;
}

void ReqPayloadMetricsParams::InternalSwap(ReqPayloadMetricsParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(correlation_id_, other->correlation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqPayloadMetricsParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[15]);
}

// ===================================================================

class PayloadMetricsResponse::_Internal {
 public:
};

PayloadMetricsResponse::PayloadMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metrics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.PayloadMetricsResponse)
}
PayloadMetricsResponse::PayloadMetricsResponse(const PayloadMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_counter_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(used_counter_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.PayloadMetricsResponse)
}

inline void PayloadMetricsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&used_counter_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(used_counter_));
}

PayloadMetricsResponse::~PayloadMetricsResponse() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.PayloadMetricsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PayloadMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PayloadMetricsResponse::ArenaDtor(void* object) {
  PayloadMetricsResponse* _this = reinterpret_cast< PayloadMetricsResponse* >(object);
  (void)_this;
}
void PayloadMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PayloadMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PayloadMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.PayloadMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_counter_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(used_counter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PayloadMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 used_counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          used_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .antaris_api_peer_to_peer.PayloadMetricsInfo metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PayloadMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.PayloadMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // int32 used_counter = 3;
  if (this->_internal_used_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_used_counter(), target);
  }

  // repeated .antaris_api_peer_to_peer.PayloadMetricsInfo metrics = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.PayloadMetricsResponse)
  return target;
}

size_t PayloadMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.PayloadMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .antaris_api_peer_to_peer.PayloadMetricsInfo metrics = 4;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 used_counter = 3;
  if (this->_internal_used_counter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_used_counter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PayloadMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PayloadMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PayloadMetricsResponse::GetClassData() const { return &_class_data_; }

void PayloadMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PayloadMetricsResponse *>(to)->MergeFrom(
      static_cast<const PayloadMetricsResponse &>(from));
}


void PayloadMetricsResponse::MergeFrom(const PayloadMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.PayloadMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_used_counter() != 0) {
    _internal_set_used_counter(from._internal_used_counter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PayloadMetricsResponse::CopyFrom(const PayloadMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.PayloadMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadMetricsResponse::IsInitialized() const {
  return true;
}

void PayloadMetricsResponse::InternalSwap(PayloadMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metrics_.InternalSwap(&other->metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PayloadMetricsResponse, used_counter_)
      + sizeof(PayloadMetricsResponse::used_counter_)
      - PROTOBUF_FIELD_OFFSET(PayloadMetricsResponse, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PayloadMetricsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[16]);
}

// ===================================================================

class CmdSequenceDoneParams::_Internal {
 public:
};

CmdSequenceDoneParams::CmdSequenceDoneParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.CmdSequenceDoneParams)
}
CmdSequenceDoneParams::CmdSequenceDoneParams(const CmdSequenceDoneParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sequence_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequence_id().empty()) {
    sequence_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.CmdSequenceDoneParams)
}

inline void CmdSequenceDoneParams::SharedCtor() {
sequence_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sequence_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CmdSequenceDoneParams::~CmdSequenceDoneParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CmdSequenceDoneParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sequence_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CmdSequenceDoneParams::ArenaDtor(void* object) {
  CmdSequenceDoneParams* _this = reinterpret_cast< CmdSequenceDoneParams* >(object);
  (void)_this;
}
void CmdSequenceDoneParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmdSequenceDoneParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CmdSequenceDoneParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdSequenceDoneParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sequence_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sequence_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.CmdSequenceDoneParams.sequence_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CmdSequenceDoneParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence_id = 1;
  if (!this->_internal_sequence_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_id().data(), static_cast<int>(this->_internal_sequence_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.CmdSequenceDoneParams.sequence_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sequence_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  return target;
}

size_t CmdSequenceDoneParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sequence_id = 1;
  if (!this->_internal_sequence_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CmdSequenceDoneParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CmdSequenceDoneParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CmdSequenceDoneParams::GetClassData() const { return &_class_data_; }

void CmdSequenceDoneParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CmdSequenceDoneParams *>(to)->MergeFrom(
      static_cast<const CmdSequenceDoneParams &>(from));
}


void CmdSequenceDoneParams::MergeFrom(const CmdSequenceDoneParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sequence_id().empty()) {
    _internal_set_sequence_id(from._internal_sequence_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CmdSequenceDoneParams::CopyFrom(const CmdSequenceDoneParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdSequenceDoneParams::IsInitialized() const {
  return true;
}

void CmdSequenceDoneParams::InternalSwap(CmdSequenceDoneParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sequence_id_, lhs_arena,
      &other->sequence_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdSequenceDoneParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[17]);
}

// ===================================================================

class AntarisCorrelationId::_Internal {
 public:
};

AntarisCorrelationId::AntarisCorrelationId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.AntarisCorrelationId)
}
AntarisCorrelationId::AntarisCorrelationId(const AntarisCorrelationId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  correlation_id_ = from.correlation_id_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.AntarisCorrelationId)
}

inline void AntarisCorrelationId::SharedCtor() {
correlation_id_ = 0;
}

AntarisCorrelationId::~AntarisCorrelationId() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.AntarisCorrelationId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AntarisCorrelationId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntarisCorrelationId::ArenaDtor(void* object) {
  AntarisCorrelationId* _this = reinterpret_cast< AntarisCorrelationId* >(object);
  (void)_this;
}
void AntarisCorrelationId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AntarisCorrelationId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AntarisCorrelationId::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.AntarisCorrelationId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlation_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntarisCorrelationId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AntarisCorrelationId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.AntarisCorrelationId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.AntarisCorrelationId)
  return target;
}

size_t AntarisCorrelationId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.AntarisCorrelationId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntarisCorrelationId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AntarisCorrelationId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntarisCorrelationId::GetClassData() const { return &_class_data_; }

void AntarisCorrelationId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AntarisCorrelationId *>(to)->MergeFrom(
      static_cast<const AntarisCorrelationId &>(from));
}


void AntarisCorrelationId::MergeFrom(const AntarisCorrelationId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.AntarisCorrelationId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntarisCorrelationId::CopyFrom(const AntarisCorrelationId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.AntarisCorrelationId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntarisCorrelationId::IsInitialized() const {
  return true;
}

void AntarisCorrelationId::InternalSwap(AntarisCorrelationId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(correlation_id_, other->correlation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AntarisCorrelationId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[18]);
}

// ===================================================================

class AntarisReturnType::_Internal {
 public:
};

AntarisReturnType::AntarisReturnType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.AntarisReturnType)
}
AntarisReturnType::AntarisReturnType(const AntarisReturnType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  return_code_ = from.return_code_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.AntarisReturnType)
}

inline void AntarisReturnType::SharedCtor() {
return_code_ = 0;
}

AntarisReturnType::~AntarisReturnType() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.AntarisReturnType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AntarisReturnType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntarisReturnType::ArenaDtor(void* object) {
  AntarisReturnType* _this = reinterpret_cast< AntarisReturnType* >(object);
  (void)_this;
}
void AntarisReturnType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AntarisReturnType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AntarisReturnType::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.AntarisReturnType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntarisReturnType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .antaris_api_peer_to_peer.AntarisReturnCode return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_return_code(static_cast<::antaris_api_peer_to_peer::AntarisReturnCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AntarisReturnType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.AntarisReturnType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .antaris_api_peer_to_peer.AntarisReturnCode return_code = 1;
  if (this->_internal_return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_return_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.AntarisReturnType)
  return target;
}

size_t AntarisReturnType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.AntarisReturnType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .antaris_api_peer_to_peer.AntarisReturnCode return_code = 1;
  if (this->_internal_return_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_return_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntarisReturnType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AntarisReturnType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntarisReturnType::GetClassData() const { return &_class_data_; }

void AntarisReturnType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AntarisReturnType *>(to)->MergeFrom(
      static_cast<const AntarisReturnType &>(from));
}


void AntarisReturnType::MergeFrom(const AntarisReturnType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.AntarisReturnType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_return_code() != 0) {
    _internal_set_return_code(from._internal_return_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntarisReturnType::CopyFrom(const AntarisReturnType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.AntarisReturnType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntarisReturnType::IsInitialized() const {
  return true;
}

void AntarisReturnType::InternalSwap(AntarisReturnType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(return_code_, other->return_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AntarisReturnType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace antaris_api_peer_to_peer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::AntarisSdkVersion* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::AntarisSdkVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::AntarisSdkVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqRegisterParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqRegisterParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqRegisterParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespRegisterParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespRegisterParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespRegisterParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespGetCurrentLocationParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespGetCurrentLocationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespGetCurrentLocationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqStageFileDownloadParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqStageFileDownloadParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqStageFileDownloadParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespStageFileDownloadParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespStageFileDownloadParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespStageFileDownloadParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespPayloadPowerControlParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespPayloadPowerControlParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespPayloadPowerControlParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespShutdownParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespShutdownParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespShutdownParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespHealthCheckParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespHealthCheckParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespHealthCheckParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::StartSequenceParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::StartSequenceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::StartSequenceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ShutdownParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ShutdownParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ShutdownParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::HealthCheckParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::HealthCheckParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::HealthCheckParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::PayloadMetricsInfo* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::PayloadMetricsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::PayloadMetricsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqPayloadMetricsParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqPayloadMetricsParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqPayloadMetricsParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::PayloadMetricsResponse* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::PayloadMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::PayloadMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::CmdSequenceDoneParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::CmdSequenceDoneParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::CmdSequenceDoneParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::AntarisCorrelationId* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::AntarisCorrelationId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::AntarisCorrelationId >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::AntarisReturnType* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::AntarisReturnType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::AntarisReturnType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
