// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: defs/gen/proto/antaris_api.proto

#include "defs/gen/proto/antaris_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace antaris_api_peer_to_peer {
constexpr AntarisSdkVersion::AntarisSdkVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : major_(0)
  , minor_(0)
  , patch_(0){}
struct AntarisSdkVersionDefaultTypeInternal {
  constexpr AntarisSdkVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AntarisSdkVersionDefaultTypeInternal() {}
  union {
    AntarisSdkVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AntarisSdkVersionDefaultTypeInternal _AntarisSdkVersion_default_instance_;
constexpr ReqRegisterParams::ReqRegisterParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sdk_version_(nullptr)
  , correlation_id_(0)
  , health_check_fail_action_(0){}
struct ReqRegisterParamsDefaultTypeInternal {
  constexpr ReqRegisterParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqRegisterParamsDefaultTypeInternal() {}
  union {
    ReqRegisterParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqRegisterParamsDefaultTypeInternal _ReqRegisterParams_default_instance_;
constexpr RespRegisterParams::RespRegisterParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , correlation_id_(0)
  , req_status_(0){}
struct RespRegisterParamsDefaultTypeInternal {
  constexpr RespRegisterParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespRegisterParamsDefaultTypeInternal() {}
  union {
    RespRegisterParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespRegisterParamsDefaultTypeInternal _RespRegisterParams_default_instance_;
constexpr ReqGetCurrentLocationParams::ReqGetCurrentLocationParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0){}
struct ReqGetCurrentLocationParamsDefaultTypeInternal {
  constexpr ReqGetCurrentLocationParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetCurrentLocationParamsDefaultTypeInternal() {}
  union {
    ReqGetCurrentLocationParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetCurrentLocationParamsDefaultTypeInternal _ReqGetCurrentLocationParams_default_instance_;
constexpr RespGetCurrentLocationParams::RespGetCurrentLocationParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0)
  , latitude_(0)
  , longitude_(0)
  , altitude_(0)
  , sd_latitude_(0)
  , sd_longitude_(0)
  , determined_at_(int64_t{0})
  , sd_altitude_(0){}
struct RespGetCurrentLocationParamsDefaultTypeInternal {
  constexpr RespGetCurrentLocationParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespGetCurrentLocationParamsDefaultTypeInternal() {}
  union {
    RespGetCurrentLocationParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespGetCurrentLocationParamsDefaultTypeInternal _RespGetCurrentLocationParams_default_instance_;
constexpr ReqStageFileDownloadParams::ReqStageFileDownloadParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , correlation_id_(0)
  , file_priority_(0)
{}
struct ReqStageFileDownloadParamsDefaultTypeInternal {
  constexpr ReqStageFileDownloadParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqStageFileDownloadParamsDefaultTypeInternal() {}
  union {
    ReqStageFileDownloadParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqStageFileDownloadParamsDefaultTypeInternal _ReqStageFileDownloadParams_default_instance_;
constexpr RespStageFileDownloadParams::RespStageFileDownloadParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespStageFileDownloadParamsDefaultTypeInternal {
  constexpr RespStageFileDownloadParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespStageFileDownloadParamsDefaultTypeInternal() {}
  union {
    RespStageFileDownloadParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespStageFileDownloadParamsDefaultTypeInternal _RespStageFileDownloadParams_default_instance_;
constexpr ReqPayloadPowerControlParams::ReqPayloadPowerControlParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , power_operation_(0)
  , hw_id_(0){}
struct ReqPayloadPowerControlParamsDefaultTypeInternal {
  constexpr ReqPayloadPowerControlParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqPayloadPowerControlParamsDefaultTypeInternal() {}
  union {
    ReqPayloadPowerControlParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqPayloadPowerControlParamsDefaultTypeInternal _ReqPayloadPowerControlParams_default_instance_;
constexpr RespPayloadPowerControlParams::RespPayloadPowerControlParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespPayloadPowerControlParamsDefaultTypeInternal {
  constexpr RespPayloadPowerControlParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespPayloadPowerControlParamsDefaultTypeInternal() {}
  union {
    RespPayloadPowerControlParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespPayloadPowerControlParamsDefaultTypeInternal _RespPayloadPowerControlParams_default_instance_;
constexpr RespShutdownParams::RespShutdownParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespShutdownParamsDefaultTypeInternal {
  constexpr RespShutdownParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespShutdownParamsDefaultTypeInternal() {}
  union {
    RespShutdownParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespShutdownParamsDefaultTypeInternal _RespShutdownParams_default_instance_;
constexpr RespHealthCheckParams::RespHealthCheckParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , application_state_(0)
  , reqs_to_pc_in_err_cnt_(0)
  , resps_to_pc_in_err_cnt_(0){}
struct RespHealthCheckParamsDefaultTypeInternal {
  constexpr RespHealthCheckParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespHealthCheckParamsDefaultTypeInternal() {}
  union {
    RespHealthCheckParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespHealthCheckParamsDefaultTypeInternal _RespHealthCheckParams_default_instance_;
constexpr StartSequenceParams::StartSequenceParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequence_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sequence_params_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scheduled_deadline_(int64_t{0})
  , correlation_id_(0){}
struct StartSequenceParamsDefaultTypeInternal {
  constexpr StartSequenceParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartSequenceParamsDefaultTypeInternal() {}
  union {
    StartSequenceParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartSequenceParamsDefaultTypeInternal _StartSequenceParams_default_instance_;
constexpr ShutdownParams::ShutdownParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , grace_time_(0){}
struct ShutdownParamsDefaultTypeInternal {
  constexpr ShutdownParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ShutdownParamsDefaultTypeInternal() {}
  union {
    ShutdownParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ShutdownParamsDefaultTypeInternal _ShutdownParams_default_instance_;
constexpr HealthCheckParams::HealthCheckParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , application_state_(0)
  , reqs_to_pc_in_err_cnt_(0)
  , resps_to_pc_in_err_cnt_(0){}
struct HealthCheckParamsDefaultTypeInternal {
  constexpr HealthCheckParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HealthCheckParamsDefaultTypeInternal() {}
  union {
    HealthCheckParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HealthCheckParamsDefaultTypeInternal _HealthCheckParams_default_instance_;
constexpr PayloadMetricsInfo::PayloadMetricsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : names_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , counter_(0){}
struct PayloadMetricsInfoDefaultTypeInternal {
  constexpr PayloadMetricsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PayloadMetricsInfoDefaultTypeInternal() {}
  union {
    PayloadMetricsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PayloadMetricsInfoDefaultTypeInternal _PayloadMetricsInfo_default_instance_;
constexpr ReqPayloadMetricsParams::ReqPayloadMetricsParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0){}
struct ReqPayloadMetricsParamsDefaultTypeInternal {
  constexpr ReqPayloadMetricsParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqPayloadMetricsParamsDefaultTypeInternal() {}
  union {
    ReqPayloadMetricsParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqPayloadMetricsParamsDefaultTypeInternal _ReqPayloadMetricsParams_default_instance_;
constexpr PayloadMetricsResponse::PayloadMetricsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : metrics_()
  , timestamp_(int64_t{0})
  , correlation_id_(0)
  , used_counter_(0){}
struct PayloadMetricsResponseDefaultTypeInternal {
  constexpr PayloadMetricsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PayloadMetricsResponseDefaultTypeInternal() {}
  union {
    PayloadMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PayloadMetricsResponseDefaultTypeInternal _PayloadMetricsResponse_default_instance_;
constexpr CmdSequenceDoneParams::CmdSequenceDoneParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequence_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CmdSequenceDoneParamsDefaultTypeInternal {
  constexpr CmdSequenceDoneParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CmdSequenceDoneParamsDefaultTypeInternal() {}
  union {
    CmdSequenceDoneParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CmdSequenceDoneParamsDefaultTypeInternal _CmdSequenceDoneParams_default_instance_;
constexpr PaSatOsMsg::PaSatOsMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , correlation_id_(0)
  , command_id_(0){}
struct PaSatOsMsgDefaultTypeInternal {
  constexpr PaSatOsMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PaSatOsMsgDefaultTypeInternal() {}
  union {
    PaSatOsMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PaSatOsMsgDefaultTypeInternal _PaSatOsMsg_default_instance_;
constexpr RespPaSatOsMsg::RespPaSatOsMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , command_id_(0)
  , req_status_(0){}
struct RespPaSatOsMsgDefaultTypeInternal {
  constexpr RespPaSatOsMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespPaSatOsMsgDefaultTypeInternal() {}
  union {
    RespPaSatOsMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespPaSatOsMsgDefaultTypeInternal _RespPaSatOsMsg_default_instance_;
constexpr ReqGnssEphStopDataReq::ReqGnssEphStopDataReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0){}
struct ReqGnssEphStopDataReqDefaultTypeInternal {
  constexpr ReqGnssEphStopDataReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGnssEphStopDataReqDefaultTypeInternal() {}
  union {
    ReqGnssEphStopDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGnssEphStopDataReqDefaultTypeInternal _ReqGnssEphStopDataReq_default_instance_;
constexpr RespGnssEphStopDataReq::RespGnssEphStopDataReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespGnssEphStopDataReqDefaultTypeInternal {
  constexpr RespGnssEphStopDataReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespGnssEphStopDataReqDefaultTypeInternal() {}
  union {
    RespGnssEphStopDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespGnssEphStopDataReqDefaultTypeInternal _RespGnssEphStopDataReq_default_instance_;
constexpr ReqGnssEphStartDataReq::ReqGnssEphStartDataReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , periodicity_in_ms_(0)
  , eph2_enable_(0){}
struct ReqGnssEphStartDataReqDefaultTypeInternal {
  constexpr ReqGnssEphStartDataReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGnssEphStartDataReqDefaultTypeInternal() {}
  union {
    ReqGnssEphStartDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGnssEphStartDataReqDefaultTypeInternal _ReqGnssEphStartDataReq_default_instance_;
constexpr RespGnssEphStartDataReq::RespGnssEphStartDataReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespGnssEphStartDataReqDefaultTypeInternal {
  constexpr RespGnssEphStartDataReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespGnssEphStartDataReqDefaultTypeInternal() {}
  union {
    RespGnssEphStartDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespGnssEphStartDataReqDefaultTypeInternal _RespGnssEphStartDataReq_default_instance_;
constexpr OBC_time::OBC_time(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hour_(0)
  , minute_(0)
  , millisecond_(0)
  , date_(0)
  , month_(0)
  , year_(0){}
struct OBC_timeDefaultTypeInternal {
  constexpr OBC_timeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OBC_timeDefaultTypeInternal() {}
  union {
    OBC_time _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OBC_timeDefaultTypeInternal _OBC_time_default_instance_;
constexpr GpsEphemerisData::GpsEphemerisData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gps_position_ecef_()
  , _gps_position_ecef_cached_byte_size_(0)
  , gps_velocity_ecef_()
  , _gps_velocity_ecef_cached_byte_size_(0)
  , obc_time_(nullptr)
  , gps_sys_time_(int64_t{0})
  , gps_fix_time_(0)
  , gps_validity_flag_pos_vel_(0){}
struct GpsEphemerisDataDefaultTypeInternal {
  constexpr GpsEphemerisDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpsEphemerisDataDefaultTypeInternal() {}
  union {
    GpsEphemerisData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpsEphemerisDataDefaultTypeInternal _GpsEphemerisData_default_instance_;
constexpr AdcsEphemerisData::AdcsEphemerisData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orbit_time_(0)
  , eci_position_x_(0)
  , eci_position_y_(0)
  , eci_position_z_(0)
  , eci_velocity_x_(0)
  , eci_velocity_y_(0)
  , eci_velocity_z_(0)
  , ecef_position_x_(0)
  , ecef_position_y_(0)
  , ecef_position_z_(0)
  , ecef_velocity_x_(0)
  , ecef_velocity_y_(0)
  , ecef_velocity_z_(0)
  , ang_rate_x_(0)
  , ang_rate_y_(0)
  , ang_rate_z_(0)
  , att_quat_1_(0)
  , att_quat_2_(0)
  , att_quat_3_(0)
  , att_quat_4_(0)
  , latitude_(0)
  , longitude_(0)
  , altitude_(0)
  , nadir_vector_x_(0)
  , nadir_vector_y_(0)
  , nadir_vector_z_(0)
  , gd_nadir_vector_x_(0)
  , gd_nadir_vector_y_(0)
  , gd_nadir_vector_z_(0)
  , beta_angle_(0)
  , validity_flags_(0){}
struct AdcsEphemerisDataDefaultTypeInternal {
  constexpr AdcsEphemerisDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdcsEphemerisDataDefaultTypeInternal() {}
  union {
    AdcsEphemerisData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdcsEphemerisDataDefaultTypeInternal _AdcsEphemerisData_default_instance_;
constexpr GnssEphData::GnssEphData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : adcs_eph_data_(nullptr)
  , gps_eph_data_(nullptr)
  , correlation_id_(0)
  , adcs_timeout_flag_(0)
  , gps_timeout_flag_(0){}
struct GnssEphDataDefaultTypeInternal {
  constexpr GnssEphDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GnssEphDataDefaultTypeInternal() {}
  union {
    GnssEphData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GnssEphDataDefaultTypeInternal _GnssEphData_default_instance_;
constexpr ReqGetEpsVoltageStopReq::ReqGetEpsVoltageStopReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0){}
struct ReqGetEpsVoltageStopReqDefaultTypeInternal {
  constexpr ReqGetEpsVoltageStopReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetEpsVoltageStopReqDefaultTypeInternal() {}
  union {
    ReqGetEpsVoltageStopReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetEpsVoltageStopReqDefaultTypeInternal _ReqGetEpsVoltageStopReq_default_instance_;
constexpr RespGetEpsVoltageStopReq::RespGetEpsVoltageStopReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespGetEpsVoltageStopReqDefaultTypeInternal {
  constexpr RespGetEpsVoltageStopReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespGetEpsVoltageStopReqDefaultTypeInternal() {}
  union {
    RespGetEpsVoltageStopReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespGetEpsVoltageStopReqDefaultTypeInternal _RespGetEpsVoltageStopReq_default_instance_;
constexpr ReqGetEpsVoltageStartReq::ReqGetEpsVoltageStartReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , periodicity_in_ms_(0){}
struct ReqGetEpsVoltageStartReqDefaultTypeInternal {
  constexpr ReqGetEpsVoltageStartReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqGetEpsVoltageStartReqDefaultTypeInternal() {}
  union {
    ReqGetEpsVoltageStartReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqGetEpsVoltageStartReqDefaultTypeInternal _ReqGetEpsVoltageStartReq_default_instance_;
constexpr RespGetEpsVoltageStartReq::RespGetEpsVoltageStartReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespGetEpsVoltageStartReqDefaultTypeInternal {
  constexpr RespGetEpsVoltageStartReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespGetEpsVoltageStartReqDefaultTypeInternal() {}
  union {
    RespGetEpsVoltageStartReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespGetEpsVoltageStartReqDefaultTypeInternal _RespGetEpsVoltageStartReq_default_instance_;
constexpr GetEpsVoltage::GetEpsVoltage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , eps_voltage_(0){}
struct GetEpsVoltageDefaultTypeInternal {
  constexpr GetEpsVoltageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetEpsVoltageDefaultTypeInternal() {}
  union {
    GetEpsVoltage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetEpsVoltageDefaultTypeInternal _GetEpsVoltage_default_instance_;
constexpr StartSesThermMgmntReq::StartSesThermMgmntReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , hardware_id_(0)
  , duration_(0)
  , lower_threshold_(0)
  , upper_threshold_(0){}
struct StartSesThermMgmntReqDefaultTypeInternal {
  constexpr StartSesThermMgmntReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartSesThermMgmntReqDefaultTypeInternal() {}
  union {
    StartSesThermMgmntReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartSesThermMgmntReqDefaultTypeInternal _StartSesThermMgmntReq_default_instance_;
constexpr RespStartSesThermMgmntReq::RespStartSesThermMgmntReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespStartSesThermMgmntReqDefaultTypeInternal {
  constexpr RespStartSesThermMgmntReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespStartSesThermMgmntReqDefaultTypeInternal() {}
  union {
    RespStartSesThermMgmntReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespStartSesThermMgmntReqDefaultTypeInternal _RespStartSesThermMgmntReq_default_instance_;
constexpr StopSesThermMgmntReq::StopSesThermMgmntReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , hardware_id_(0){}
struct StopSesThermMgmntReqDefaultTypeInternal {
  constexpr StopSesThermMgmntReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopSesThermMgmntReqDefaultTypeInternal() {}
  union {
    StopSesThermMgmntReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopSesThermMgmntReqDefaultTypeInternal _StopSesThermMgmntReq_default_instance_;
constexpr RespStopSesThermMgmntReq::RespStopSesThermMgmntReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , req_status_(0){}
struct RespStopSesThermMgmntReqDefaultTypeInternal {
  constexpr RespStopSesThermMgmntReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespStopSesThermMgmntReqDefaultTypeInternal() {}
  union {
    RespStopSesThermMgmntReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespStopSesThermMgmntReqDefaultTypeInternal _RespStopSesThermMgmntReq_default_instance_;
constexpr SesTempReq::SesTempReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , hardware_id_(0){}
struct SesTempReqDefaultTypeInternal {
  constexpr SesTempReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SesTempReqDefaultTypeInternal() {}
  union {
    SesTempReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SesTempReqDefaultTypeInternal _SesTempReq_default_instance_;
constexpr RespSesTempReqParams::RespSesTempReqParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , temp_(0)
  , heater_pwr_status_(0){}
struct RespSesTempReqParamsDefaultTypeInternal {
  constexpr RespSesTempReqParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RespSesTempReqParamsDefaultTypeInternal() {}
  union {
    RespSesTempReqParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RespSesTempReqParamsDefaultTypeInternal _RespSesTempReqParams_default_instance_;
constexpr SesThermalStatusNtf::SesThermalStatusNtf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0)
  , heater_pwr_status_(0)
  , temp_(0){}
struct SesThermalStatusNtfDefaultTypeInternal {
  constexpr SesThermalStatusNtfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SesThermalStatusNtfDefaultTypeInternal() {}
  union {
    SesThermalStatusNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SesThermalStatusNtfDefaultTypeInternal _SesThermalStatusNtf_default_instance_;
constexpr AntarisCorrelationId::AntarisCorrelationId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : correlation_id_(0){}
struct AntarisCorrelationIdDefaultTypeInternal {
  constexpr AntarisCorrelationIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AntarisCorrelationIdDefaultTypeInternal() {}
  union {
    AntarisCorrelationId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AntarisCorrelationIdDefaultTypeInternal _AntarisCorrelationId_default_instance_;
constexpr AntarisReturnType::AntarisReturnType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : return_code_(0)
{}
struct AntarisReturnTypeDefaultTypeInternal {
  constexpr AntarisReturnTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AntarisReturnTypeDefaultTypeInternal() {}
  union {
    AntarisReturnType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AntarisReturnTypeDefaultTypeInternal _AntarisReturnType_default_instance_;
}  // namespace antaris_api_peer_to_peer
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[42];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_defs_2fgen_2fproto_2fantaris_5fapi_2eproto = nullptr;

const uint32_t TableStruct_defs_2fgen_2fproto_2fantaris_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisSdkVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisSdkVersion, major_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisSdkVersion, minor_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisSdkVersion, patch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqRegisterParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqRegisterParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqRegisterParams, health_check_fail_action_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqRegisterParams, sdk_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespRegisterParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespRegisterParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespRegisterParams, req_status_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespRegisterParams, auth_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGetCurrentLocationParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGetCurrentLocationParams, correlation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, req_status_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, latitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, longitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, altitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, sd_latitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, sd_longitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, sd_altitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetCurrentLocationParams, determined_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqStageFileDownloadParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqStageFileDownloadParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqStageFileDownloadParams, file_path_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqStageFileDownloadParams, file_priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStageFileDownloadParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStageFileDownloadParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStageFileDownloadParams, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqPayloadPowerControlParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqPayloadPowerControlParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqPayloadPowerControlParams, power_operation_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqPayloadPowerControlParams, hw_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespPayloadPowerControlParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespPayloadPowerControlParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespPayloadPowerControlParams, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespShutdownParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespShutdownParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespShutdownParams, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespHealthCheckParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespHealthCheckParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespHealthCheckParams, application_state_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespHealthCheckParams, reqs_to_pc_in_err_cnt_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespHealthCheckParams, resps_to_pc_in_err_cnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSequenceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSequenceParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSequenceParams, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSequenceParams, sequence_params_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSequenceParams, scheduled_deadline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ShutdownParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ShutdownParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ShutdownParams, grace_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::HealthCheckParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::HealthCheckParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::HealthCheckParams, application_state_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::HealthCheckParams, reqs_to_pc_in_err_cnt_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::HealthCheckParams, resps_to_pc_in_err_cnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsInfo, counter_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsInfo, names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqPayloadMetricsParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqPayloadMetricsParams, correlation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsResponse, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsResponse, used_counter_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PayloadMetricsResponse, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::CmdSequenceDoneParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::CmdSequenceDoneParams, sequence_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PaSatOsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PaSatOsMsg, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PaSatOsMsg, command_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::PaSatOsMsg, payload_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespPaSatOsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespPaSatOsMsg, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespPaSatOsMsg, command_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespPaSatOsMsg, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGnssEphStopDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGnssEphStopDataReq, correlation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGnssEphStopDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGnssEphStopDataReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGnssEphStopDataReq, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGnssEphStartDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGnssEphStartDataReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGnssEphStartDataReq, periodicity_in_ms_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGnssEphStartDataReq, eph2_enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGnssEphStartDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGnssEphStartDataReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGnssEphStartDataReq, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::OBC_time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::OBC_time, hour_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::OBC_time, minute_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::OBC_time, millisecond_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::OBC_time, date_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::OBC_time, month_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::OBC_time, year_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GpsEphemerisData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GpsEphemerisData, gps_fix_time_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GpsEphemerisData, gps_sys_time_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GpsEphemerisData, obc_time_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GpsEphemerisData, gps_position_ecef_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GpsEphemerisData, gps_velocity_ecef_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GpsEphemerisData, gps_validity_flag_pos_vel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, orbit_time_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, eci_position_x_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, eci_position_y_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, eci_position_z_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, eci_velocity_x_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, eci_velocity_y_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, eci_velocity_z_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, ecef_position_x_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, ecef_position_y_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, ecef_position_z_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, ecef_velocity_x_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, ecef_velocity_y_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, ecef_velocity_z_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, ang_rate_x_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, ang_rate_y_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, ang_rate_z_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, att_quat_1_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, att_quat_2_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, att_quat_3_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, att_quat_4_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, latitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, longitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, altitude_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, nadir_vector_x_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, nadir_vector_y_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, nadir_vector_z_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, gd_nadir_vector_x_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, gd_nadir_vector_y_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, gd_nadir_vector_z_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, beta_angle_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AdcsEphemerisData, validity_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GnssEphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GnssEphData, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GnssEphData, adcs_eph_data_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GnssEphData, gps_eph_data_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GnssEphData, adcs_timeout_flag_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GnssEphData, gps_timeout_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq, correlation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq, periodicity_in_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GetEpsVoltage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GetEpsVoltage, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::GetEpsVoltage, eps_voltage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSesThermMgmntReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSesThermMgmntReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSesThermMgmntReq, hardware_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSesThermMgmntReq, duration_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSesThermMgmntReq, lower_threshold_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StartSesThermMgmntReq, upper_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStartSesThermMgmntReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStartSesThermMgmntReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStartSesThermMgmntReq, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StopSesThermMgmntReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StopSesThermMgmntReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::StopSesThermMgmntReq, hardware_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStopSesThermMgmntReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStopSesThermMgmntReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespStopSesThermMgmntReq, req_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::SesTempReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::SesTempReq, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::SesTempReq, hardware_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespSesTempReqParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespSesTempReqParams, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespSesTempReqParams, temp_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::RespSesTempReqParams, heater_pwr_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::SesThermalStatusNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::SesThermalStatusNtf, correlation_id_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::SesThermalStatusNtf, heater_pwr_status_),
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::SesThermalStatusNtf, temp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisCorrelationId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisCorrelationId, correlation_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisReturnType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::antaris_api_peer_to_peer::AntarisReturnType, return_code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::antaris_api_peer_to_peer::AntarisSdkVersion)},
  { 9, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqRegisterParams)},
  { 18, -1, -1, sizeof(::antaris_api_peer_to_peer::RespRegisterParams)},
  { 27, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqGetCurrentLocationParams)},
  { 34, -1, -1, sizeof(::antaris_api_peer_to_peer::RespGetCurrentLocationParams)},
  { 49, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqStageFileDownloadParams)},
  { 58, -1, -1, sizeof(::antaris_api_peer_to_peer::RespStageFileDownloadParams)},
  { 66, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqPayloadPowerControlParams)},
  { 75, -1, -1, sizeof(::antaris_api_peer_to_peer::RespPayloadPowerControlParams)},
  { 83, -1, -1, sizeof(::antaris_api_peer_to_peer::RespShutdownParams)},
  { 91, -1, -1, sizeof(::antaris_api_peer_to_peer::RespHealthCheckParams)},
  { 101, -1, -1, sizeof(::antaris_api_peer_to_peer::StartSequenceParams)},
  { 111, -1, -1, sizeof(::antaris_api_peer_to_peer::ShutdownParams)},
  { 119, -1, -1, sizeof(::antaris_api_peer_to_peer::HealthCheckParams)},
  { 129, -1, -1, sizeof(::antaris_api_peer_to_peer::PayloadMetricsInfo)},
  { 137, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqPayloadMetricsParams)},
  { 144, -1, -1, sizeof(::antaris_api_peer_to_peer::PayloadMetricsResponse)},
  { 154, -1, -1, sizeof(::antaris_api_peer_to_peer::CmdSequenceDoneParams)},
  { 161, -1, -1, sizeof(::antaris_api_peer_to_peer::PaSatOsMsg)},
  { 170, -1, -1, sizeof(::antaris_api_peer_to_peer::RespPaSatOsMsg)},
  { 179, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqGnssEphStopDataReq)},
  { 186, -1, -1, sizeof(::antaris_api_peer_to_peer::RespGnssEphStopDataReq)},
  { 194, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqGnssEphStartDataReq)},
  { 203, -1, -1, sizeof(::antaris_api_peer_to_peer::RespGnssEphStartDataReq)},
  { 211, -1, -1, sizeof(::antaris_api_peer_to_peer::OBC_time)},
  { 223, -1, -1, sizeof(::antaris_api_peer_to_peer::GpsEphemerisData)},
  { 235, -1, -1, sizeof(::antaris_api_peer_to_peer::AdcsEphemerisData)},
  { 272, -1, -1, sizeof(::antaris_api_peer_to_peer::GnssEphData)},
  { 283, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq)},
  { 290, -1, -1, sizeof(::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq)},
  { 298, -1, -1, sizeof(::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq)},
  { 306, -1, -1, sizeof(::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq)},
  { 314, -1, -1, sizeof(::antaris_api_peer_to_peer::GetEpsVoltage)},
  { 322, -1, -1, sizeof(::antaris_api_peer_to_peer::StartSesThermMgmntReq)},
  { 333, -1, -1, sizeof(::antaris_api_peer_to_peer::RespStartSesThermMgmntReq)},
  { 341, -1, -1, sizeof(::antaris_api_peer_to_peer::StopSesThermMgmntReq)},
  { 349, -1, -1, sizeof(::antaris_api_peer_to_peer::RespStopSesThermMgmntReq)},
  { 357, -1, -1, sizeof(::antaris_api_peer_to_peer::SesTempReq)},
  { 365, -1, -1, sizeof(::antaris_api_peer_to_peer::RespSesTempReqParams)},
  { 374, -1, -1, sizeof(::antaris_api_peer_to_peer::SesThermalStatusNtf)},
  { 383, -1, -1, sizeof(::antaris_api_peer_to_peer::AntarisCorrelationId)},
  { 390, -1, -1, sizeof(::antaris_api_peer_to_peer::AntarisReturnType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_AntarisSdkVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqRegisterParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespRegisterParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqGetCurrentLocationParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespGetCurrentLocationParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqStageFileDownloadParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespStageFileDownloadParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqPayloadPowerControlParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespPayloadPowerControlParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespShutdownParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespHealthCheckParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_StartSequenceParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ShutdownParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_HealthCheckParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_PayloadMetricsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqPayloadMetricsParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_PayloadMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_CmdSequenceDoneParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_PaSatOsMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespPaSatOsMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqGnssEphStopDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespGnssEphStopDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqGnssEphStartDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespGnssEphStartDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_OBC_time_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_GpsEphemerisData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_AdcsEphemerisData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_GnssEphData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqGetEpsVoltageStopReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespGetEpsVoltageStopReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_ReqGetEpsVoltageStartReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespGetEpsVoltageStartReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_GetEpsVoltage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_StartSesThermMgmntReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespStartSesThermMgmntReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_StopSesThermMgmntReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespStopSesThermMgmntReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_SesTempReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_RespSesTempReqParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_SesThermalStatusNtf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_AntarisCorrelationId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::antaris_api_peer_to_peer::_AntarisReturnType_default_instance_),
};

const char descriptor_table_protodef_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n defs/gen/proto/antaris_api.proto\022\030anta"
  "ris_api_peer_to_peer\"@\n\021AntarisSdkVersio"
  "n\022\r\n\005major\030\001 \001(\005\022\r\n\005minor\030\002 \001(\005\022\r\n\005patch"
  "\030\003 \001(\005\"\217\001\n\021ReqRegisterParams\022\026\n\016correlat"
  "ion_id\030\001 \001(\005\022 \n\030health_check_fail_action"
  "\030\002 \001(\005\022@\n\013sdk_version\030\003 \001(\0132+.antaris_ap"
  "i_peer_to_peer.AntarisSdkVersion\"T\n\022Resp"
  "RegisterParams\022\026\n\016correlation_id\030\001 \001(\005\022\022"
  "\n\nreq_status\030\002 \001(\005\022\022\n\nauth_token\030\003 \001(\t\"5"
  "\n\033ReqGetCurrentLocationParams\022\026\n\016correla"
  "tion_id\030\001 \001(\005\"\330\001\n\034RespGetCurrentLocation"
  "Params\022\026\n\016correlation_id\030\001 \001(\005\022\022\n\nreq_st"
  "atus\030\002 \001(\005\022\020\n\010latitude\030\003 \001(\001\022\021\n\tlongitud"
  "e\030\004 \001(\001\022\020\n\010altitude\030\005 \001(\001\022\023\n\013sd_latitude"
  "\030\006 \001(\002\022\024\n\014sd_longitude\030\007 \001(\002\022\023\n\013sd_altit"
  "ude\030\010 \001(\002\022\025\n\rdetermined_at\030\t \001(\003\"\210\001\n\032Req"
  "StageFileDownloadParams\022\026\n\016correlation_i"
  "d\030\001 \001(\005\022\021\n\tfile_path\030\002 \001(\t\022\?\n\rfile_prior"
  "ity\030\003 \001(\0162(.antaris_api_peer_to_peer.Fil"
  "ePriorities\"I\n\033RespStageFileDownloadPara"
  "ms\022\026\n\016correlation_id\030\001 \001(\005\022\022\n\nreq_status"
  "\030\002 \001(\005\"^\n\034ReqPayloadPowerControlParams\022\026"
  "\n\016correlation_id\030\001 \001(\005\022\027\n\017power_operatio"
  "n\030\002 \001(\005\022\r\n\005hw_id\030\003 \001(\005\"K\n\035RespPayloadPow"
  "erControlParams\022\026\n\016correlation_id\030\001 \001(\005\022"
  "\022\n\nreq_status\030\002 \001(\005\"@\n\022RespShutdownParam"
  "s\022\026\n\016correlation_id\030\001 \001(\005\022\022\n\nreq_status\030"
  "\002 \001(\005\"\211\001\n\025RespHealthCheckParams\022\026\n\016corre"
  "lation_id\030\001 \001(\005\022\031\n\021application_state\030\002 \001"
  "(\005\022\035\n\025reqs_to_pc_in_err_cnt\030\003 \001(\005\022\036\n\026res"
  "ps_to_pc_in_err_cnt\030\004 \001(\005\"w\n\023StartSequen"
  "ceParams\022\026\n\016correlation_id\030\001 \001(\005\022\023\n\013sequ"
  "ence_id\030\002 \001(\t\022\027\n\017sequence_params\030\003 \001(\t\022\032"
  "\n\022scheduled_deadline\030\004 \001(\003\"<\n\016ShutdownPa"
  "rams\022\026\n\016correlation_id\030\001 \001(\005\022\022\n\ngrace_ti"
  "me\030\002 \001(\005\"\205\001\n\021HealthCheckParams\022\026\n\016correl"
  "ation_id\030\001 \001(\005\022\031\n\021application_state\030\002 \001("
  "\005\022\035\n\025reqs_to_pc_in_err_cnt\030\003 \001(\005\022\036\n\026resp"
  "s_to_pc_in_err_cnt\030\004 \001(\005\"4\n\022PayloadMetri"
  "csInfo\022\017\n\007counter\030\001 \001(\005\022\r\n\005names\030\002 \001(\t\"1"
  "\n\027ReqPayloadMetricsParams\022\026\n\016correlation"
  "_id\030\001 \001(\005\"\230\001\n\026PayloadMetricsResponse\022\026\n\016"
  "correlation_id\030\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\003\022"
  "\024\n\014used_counter\030\003 \001(\005\022=\n\007metrics\030\004 \003(\0132,"
  ".antaris_api_peer_to_peer.PayloadMetrics"
  "Info\",\n\025CmdSequenceDoneParams\022\023\n\013sequenc"
  "e_id\030\001 \001(\t\"N\n\nPaSatOsMsg\022\026\n\016correlation_"
  "id\030\001 \001(\005\022\022\n\ncommand_id\030\002 \001(\005\022\024\n\014payload_"
  "data\030\003 \001(\t\"P\n\016RespPaSatOsMsg\022\026\n\016correlat"
  "ion_id\030\001 \001(\005\022\022\n\ncommand_id\030\002 \001(\005\022\022\n\nreq_"
  "status\030\003 \001(\005\"/\n\025ReqGnssEphStopDataReq\022\026\n"
  "\016correlation_id\030\001 \001(\005\"D\n\026RespGnssEphStop"
  "DataReq\022\026\n\016correlation_id\030\001 \001(\005\022\022\n\nreq_s"
  "tatus\030\002 \001(\005\"`\n\026ReqGnssEphStartDataReq\022\026\n"
  "\016correlation_id\030\001 \001(\005\022\031\n\021periodicity_in_"
  "ms\030\002 \001(\005\022\023\n\013eph2_enable\030\003 \001(\005\"E\n\027RespGns"
  "sEphStartDataReq\022\026\n\016correlation_id\030\001 \001(\005"
  "\022\022\n\nreq_status\030\002 \001(\005\"h\n\010OBC_time\022\014\n\004hour"
  "\030\001 \001(\005\022\016\n\006minute\030\002 \001(\005\022\023\n\013millisecond\030\003 "
  "\001(\005\022\014\n\004date\030\004 \001(\005\022\r\n\005month\030\005 \001(\005\022\014\n\004year"
  "\030\006 \001(\005\"\315\001\n\020GpsEphemerisData\022\024\n\014gps_fix_t"
  "ime\030\001 \001(\005\022\024\n\014gps_sys_time\030\002 \001(\003\0224\n\010obc_t"
  "ime\030\003 \001(\0132\".antaris_api_peer_to_peer.OBC"
  "_time\022\031\n\021gps_position_ecef\030\004 \003(\005\022\031\n\021gps_"
  "velocity_ecef\030\005 \003(\005\022!\n\031gps_validity_flag"
  "_pos_vel\030\006 \001(\005\"\325\005\n\021AdcsEphemerisData\022\022\n\n"
  "orbit_time\030\001 \001(\001\022\026\n\016eci_position_x\030\002 \001(\001"
  "\022\026\n\016eci_position_y\030\003 \001(\001\022\026\n\016eci_position"
  "_z\030\004 \001(\001\022\026\n\016eci_velocity_x\030\005 \001(\001\022\026\n\016eci_"
  "velocity_y\030\006 \001(\001\022\026\n\016eci_velocity_z\030\007 \001(\001"
  "\022\027\n\017ecef_position_x\030\010 \001(\001\022\027\n\017ecef_positi"
  "on_y\030\t \001(\001\022\027\n\017ecef_position_z\030\n \001(\001\022\027\n\017e"
  "cef_velocity_x\030\013 \001(\001\022\027\n\017ecef_velocity_y\030"
  "\014 \001(\001\022\027\n\017ecef_velocity_z\030\r \001(\001\022\022\n\nang_ra"
  "te_x\030\016 \001(\001\022\022\n\nang_rate_y\030\017 \001(\001\022\022\n\nang_ra"
  "te_z\030\020 \001(\001\022\022\n\natt_quat_1\030\021 \001(\001\022\022\n\natt_qu"
  "at_2\030\024 \001(\001\022\022\n\natt_quat_3\030\025 \001(\001\022\022\n\natt_qu"
  "at_4\030\026 \001(\001\022\020\n\010latitude\030\027 \001(\002\022\021\n\tlongitud"
  "e\030\030 \001(\002\022\020\n\010altitude\030\031 \001(\002\022\026\n\016nadir_vecto"
  "r_x\030\032 \001(\002\022\026\n\016nadir_vector_y\030\033 \001(\002\022\026\n\016nad"
  "ir_vector_z\030\034 \001(\002\022\031\n\021gd_nadir_vector_x\030\035"
  " \001(\002\022\031\n\021gd_nadir_vector_y\030\036 \001(\002\022\031\n\021gd_na"
  "dir_vector_z\030\037 \001(\002\022\022\n\nbeta_angle\030  \001(\002\022\026"
  "\n\016validity_flags\030! \001(\005\"\340\001\n\013GnssEphData\022\026"
  "\n\016correlation_id\030\001 \001(\005\022B\n\radcs_eph_data\030"
  "\002 \001(\0132+.antaris_api_peer_to_peer.AdcsEph"
  "emerisData\022@\n\014gps_eph_data\030\003 \001(\0132*.antar"
  "is_api_peer_to_peer.GpsEphemerisData\022\031\n\021"
  "adcs_timeout_flag\030\004 \001(\005\022\030\n\020gps_timeout_f"
  "lag\030\005 \001(\005\"1\n\027ReqGetEpsVoltageStopReq\022\026\n\016"
  "correlation_id\030\001 \001(\005\"F\n\030RespGetEpsVoltag"
  "eStopReq\022\026\n\016correlation_id\030\001 \001(\005\022\022\n\nreq_"
  "status\030\002 \001(\005\"M\n\030ReqGetEpsVoltageStartReq"
  "\022\026\n\016correlation_id\030\001 \001(\005\022\031\n\021periodicity_"
  "in_ms\030\002 \001(\005\"G\n\031RespGetEpsVoltageStartReq"
  "\022\026\n\016correlation_id\030\001 \001(\005\022\022\n\nreq_status\030\002"
  " \001(\005\"<\n\rGetEpsVoltage\022\026\n\016correlation_id\030"
  "\001 \001(\005\022\023\n\013eps_voltage\030\002 \001(\002\"\210\001\n\025StartSesT"
  "hermMgmntReq\022\026\n\016correlation_id\030\001 \001(\005\022\023\n\013"
  "hardware_id\030\002 \001(\005\022\020\n\010duration\030\003 \001(\005\022\027\n\017l"
  "ower_threshold\030\004 \001(\005\022\027\n\017upper_threshold\030"
  "\005 \001(\005\"G\n\031RespStartSesThermMgmntReq\022\026\n\016co"
  "rrelation_id\030\001 \001(\005\022\022\n\nreq_status\030\002 \001(\005\"C"
  "\n\024StopSesThermMgmntReq\022\026\n\016correlation_id"
  "\030\001 \001(\005\022\023\n\013hardware_id\030\002 \001(\005\"F\n\030RespStopS"
  "esThermMgmntReq\022\026\n\016correlation_id\030\001 \001(\005\022"
  "\022\n\nreq_status\030\002 \001(\005\"9\n\nSesTempReq\022\026\n\016cor"
  "relation_id\030\001 \001(\005\022\023\n\013hardware_id\030\002 \001(\005\"W"
  "\n\024RespSesTempReqParams\022\026\n\016correlation_id"
  "\030\001 \001(\005\022\014\n\004temp\030\002 \001(\005\022\031\n\021heater_pwr_statu"
  "s\030\003 \001(\005\"V\n\023SesThermalStatusNtf\022\026\n\016correl"
  "ation_id\030\001 \001(\005\022\031\n\021heater_pwr_status\030\002 \001("
  "\005\022\014\n\004temp\030\003 \001(\005\".\n\024AntarisCorrelationId\022"
  "\026\n\016correlation_id\030\001 \001(\005\"U\n\021AntarisReturn"
  "Type\022@\n\013return_code\030\001 \001(\0162+.antaris_api_"
  "peer_to_peer.AntarisReturnCode*\354\001\n\021Antar"
  "isReturnCode\022\016\n\nAn_SUCCESS\020\000\022\037\n\022An_GENER"
  "IC_FAILURE\020\377\377\377\377\377\377\377\377\377\001\022\037\n\022An_NOT_IMPLEMEN"
  "TED\020\376\377\377\377\377\377\377\377\377\001\022 \n\023An_OUT_OF_RESOURCES\020\375\377"
  "\377\377\377\377\377\377\377\001\022\035\n\020An_NOT_PERMITTED\020\374\377\377\377\377\377\377\377\377\001\022"
  "\036\n\021An_INVALID_PARAMS\020\373\377\377\377\377\377\377\377\377\001\022$\n\027An_IN"
  "COMPATIBLE_VERSION\020\372\377\377\377\377\377\377\377\377\001*\202\001\n\016FilePr"
  "iorities\022\030\n\024FILE_DL_PRIORITY_LOW\020\000\022\033\n\027FI"
  "LE_DL_PRIORITY_NORMAL\020\001\022\031\n\025FILE_DL_PRIOR"
  "ITY_HIGH\020\002\022\036\n\032FILE_DL_PRIORITY_IMMEDIATE"
  "\020\0032\240\023\n\035AntarisapiApplicationCallback\022p\n\020"
  "PA_StartSequence\022-.antaris_api_peer_to_p"
  "eer.StartSequenceParams\032+.antaris_api_pe"
  "er_to_peer.AntarisReturnType\"\000\022i\n\016PA_Shu"
  "tdownApp\022(.antaris_api_peer_to_peer.Shut"
  "downParams\032+.antaris_api_peer_to_peer.An"
  "tarisReturnType\"\000\022s\n\025PA_ProcessHealthChe"
  "ck\022+.antaris_api_peer_to_peer.HealthChec"
  "kParams\032+.antaris_api_peer_to_peer.Antar"
  "isReturnType\"\000\022y\n\032PA_ProcessResponseRegi"
  "ster\022,.antaris_api_peer_to_peer.RespRegi"
  "sterParams\032+.antaris_api_peer_to_peer.An"
  "tarisReturnType\"\000\022\215\001\n$PA_ProcessResponse"
  "GetCurrentLocation\0226.antaris_api_peer_to"
  "_peer.RespGetCurrentLocationParams\032+.ant"
  "aris_api_peer_to_peer.AntarisReturnType\""
  "\000\022\213\001\n#PA_ProcessResponseStageFileDownloa"
  "d\0225.antaris_api_peer_to_peer.RespStageFi"
  "leDownloadParams\032+.antaris_api_peer_to_p"
  "eer.AntarisReturnType\"\000\022\217\001\n%PA_ProcessRe"
  "sponsePayloadPowerControl\0227.antaris_api_"
  "peer_to_peer.RespPayloadPowerControlPara"
  "ms\032+.antaris_api_peer_to_peer.AntarisRet"
  "urnType\"\000\022\177\n\033PA_ProcessReqPayloadMetrics"
  "\0221.antaris_api_peer_to_peer.ReqPayloadMe"
  "tricsParams\032+.antaris_api_peer_to_peer.A"
  "ntarisReturnType\"\000\022\203\001\n PA_ProcessRespGns"
  "sEphStopDataReq\0220.antaris_api_peer_to_pe"
  "er.RespGnssEphStopDataReq\032+.antaris_api_"
  "peer_to_peer.AntarisReturnType\"\000\022\205\001\n!PA_"
  "ProcessRespGnssEphStartDataReq\0221.antaris"
  "_api_peer_to_peer.RespGnssEphStartDataRe"
  "q\032+.antaris_api_peer_to_peer.AntarisRetu"
  "rnType\"\000\022m\n\025PA_ProcessGnssEphData\022%.anta"
  "ris_api_peer_to_peer.GnssEphData\032+.antar"
  "is_api_peer_to_peer.AntarisReturnType\"\000\022"
  "\207\001\n\"PA_ProcessRespGetEpsVoltageStopReq\0222"
  ".antaris_api_peer_to_peer.RespGetEpsVolt"
  "ageStopReq\032+.antaris_api_peer_to_peer.An"
  "tarisReturnType\"\000\022\211\001\n#PA_ProcessRespGetE"
  "psVoltageStartReq\0223.antaris_api_peer_to_"
  "peer.RespGetEpsVoltageStartReq\032+.antaris"
  "_api_peer_to_peer.AntarisReturnType\"\000\022q\n"
  "\027PA_ProcessGetEpsVoltage\022\'.antaris_api_p"
  "eer_to_peer.GetEpsVoltage\032+.antaris_api_"
  "peer_to_peer.AntarisReturnType\"\000\022\211\001\n#PA_"
  "ProcessRespStartSesThermMgmntReq\0223.antar"
  "is_api_peer_to_peer.RespStartSesThermMgm"
  "ntReq\032+.antaris_api_peer_to_peer.Antaris"
  "ReturnType\"\000\022\207\001\n\"PA_ProcessRespStopSesTh"
  "ermMgmntReq\0222.antaris_api_peer_to_peer.R"
  "espStopSesThermMgmntReq\032+.antaris_api_pe"
  "er_to_peer.AntarisReturnType\"\000\022y\n\030PA_Pro"
  "cessRespSesTempReq\022..antaris_api_peer_to"
  "_peer.RespSesTempReqParams\032+.antaris_api"
  "_peer_to_peer.AntarisReturnType\"\000\022u\n\025PA_"
  "ProcessSesThrmlNtf\022-.antaris_api_peer_to"
  "_peer.SesThermalStatusNtf\032+.antaris_api_"
  "peer_to_peer.AntarisReturnType\"\000\022s\n\030PA_P"
  "rocessRespPaSatOsMsg\022(.antaris_api_peer_"
  "to_peer.RespPaSatOsMsg\032+.antaris_api_pee"
  "r_to_peer.AntarisReturnType\"\0002\272\017\n\033Antari"
  "sapiPayloadController\022i\n\013PC_register\022+.a"
  "ntaris_api_peer_to_peer.ReqRegisterParam"
  "s\032+.antaris_api_peer_to_peer.AntarisRetu"
  "rnType\"\000\022\177\n\027PC_get_current_location\0225.an"
  "taris_api_peer_to_peer.ReqGetCurrentLoca"
  "tionParams\032+.antaris_api_peer_to_peer.An"
  "tarisReturnType\"\000\022}\n\026PC_stage_file_downl"
  "oad\0224.antaris_api_peer_to_peer.ReqStageF"
  "ileDownloadParams\032+.antaris_api_peer_to_"
  "peer.AntarisReturnType\"\000\022r\n\020PC_sequence_"
  "done\022/.antaris_api_peer_to_peer.CmdSeque"
  "nceDoneParams\032+.antaris_api_peer_to_peer"
  ".AntarisReturnType\"\000\022\201\001\n\030PC_payload_powe"
  "r_control\0226.antaris_api_peer_to_peer.Req"
  "PayloadPowerControlParams\032+.antaris_api_"
  "peer_to_peer.AntarisReturnType\"\000\022z\n\030PC_r"
  "esponse_health_check\022/.antaris_api_peer_"
  "to_peer.RespHealthCheckParams\032+.antaris_"
  "api_peer_to_peer.AntarisReturnType\"\000\022s\n\024"
  "PC_response_shutdown\022,.antaris_api_peer_"
  "to_peer.RespShutdownParams\032+.antaris_api"
  "_peer_to_peer.AntarisReturnType\"\000\022~\n\033PC_"
  "response_payload_metrics\0220.antaris_api_p"
  "eer_to_peer.PayloadMetricsResponse\032+.ant"
  "aris_api_peer_to_peer.AntarisReturnType\""
  "\000\022v\n\024PC_gnss_eph_stop_req\022/.antaris_api_"
  "peer_to_peer.ReqGnssEphStopDataReq\032+.ant"
  "aris_api_peer_to_peer.AntarisReturnType\""
  "\000\022x\n\025PC_gnss_eph_start_req\0220.antaris_api"
  "_peer_to_peer.ReqGnssEphStartDataReq\032+.a"
  "ntaris_api_peer_to_peer.AntarisReturnTyp"
  "e\"\000\022\177\n\033PC_get_eps_voltage_stop_req\0221.ant"
  "aris_api_peer_to_peer.ReqGetEpsVoltageSt"
  "opReq\032+.antaris_api_peer_to_peer.Antaris"
  "ReturnType\"\000\022\201\001\n\034PC_get_eps_voltage_star"
  "t_req\0222.antaris_api_peer_to_peer.ReqGetE"
  "psVoltageStartReq\032+.antaris_api_peer_to_"
  "peer.AntarisReturnType\"\000\022~\n\034PC_start_ses"
  "_therm_mgmnt_req\022/.antaris_api_peer_to_p"
  "eer.StartSesThermMgmntReq\032+.antaris_api_"
  "peer_to_peer.AntarisReturnType\"\000\022|\n\033PC_s"
  "top_ses_therm_mgmnt_req\022..antaris_api_pe"
  "er_to_peer.StopSesThermMgmntReq\032+.antari"
  "s_api_peer_to_peer.AntarisReturnType\"\000\022f"
  "\n\017PC_ses_temp_req\022$.antaris_api_peer_to_"
  "peer.SesTempReq\032+.antaris_api_peer_to_pe"
  "er.AntarisReturnType\"\000\022j\n\023PC_pa_satos_me"
  "ssage\022$.antaris_api_peer_to_peer.PaSatOs"
  "Msg\032+.antaris_api_peer_to_peer.AntarisRe"
  "turnType\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto = {
  false, false, 9458, descriptor_table_protodef_defs_2fgen_2fproto_2fantaris_5fapi_2eproto, "defs/gen/proto/antaris_api.proto", 
  &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once, nullptr, 0, 42,
  schemas, file_default_instances, TableStruct_defs_2fgen_2fproto_2fantaris_5fapi_2eproto::offsets,
  file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto, file_level_enum_descriptors_defs_2fgen_2fproto_2fantaris_5fapi_2eproto, file_level_service_descriptors_defs_2fgen_2fproto_2fantaris_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter() {
  return &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_defs_2fgen_2fproto_2fantaris_5fapi_2eproto(&descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto);
namespace antaris_api_peer_to_peer {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AntarisReturnCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto);
  return file_level_enum_descriptors_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[0];
}
bool AntarisReturnCode_IsValid(int value) {
  switch (value) {
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilePriorities_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto);
  return file_level_enum_descriptors_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[1];
}
bool FilePriorities_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AntarisSdkVersion::_Internal {
 public:
};

AntarisSdkVersion::AntarisSdkVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.AntarisSdkVersion)
}
AntarisSdkVersion::AntarisSdkVersion(const AntarisSdkVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.AntarisSdkVersion)
}

inline void AntarisSdkVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&major_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

AntarisSdkVersion::~AntarisSdkVersion() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.AntarisSdkVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AntarisSdkVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntarisSdkVersion::ArenaDtor(void* object) {
  AntarisSdkVersion* _this = reinterpret_cast< AntarisSdkVersion* >(object);
  (void)_this;
}
void AntarisSdkVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AntarisSdkVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AntarisSdkVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.AntarisSdkVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntarisSdkVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AntarisSdkVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.AntarisSdkVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_major(), target);
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minor(), target);
  }

  // int32 patch = 3;
  if (this->_internal_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_patch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.AntarisSdkVersion)
  return target;
}

size_t AntarisSdkVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.AntarisSdkVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_major());
  }

  // int32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_minor());
  }

  // int32 patch = 3;
  if (this->_internal_patch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_patch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntarisSdkVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AntarisSdkVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntarisSdkVersion::GetClassData() const { return &_class_data_; }

void AntarisSdkVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AntarisSdkVersion *>(to)->MergeFrom(
      static_cast<const AntarisSdkVersion &>(from));
}


void AntarisSdkVersion::MergeFrom(const AntarisSdkVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.AntarisSdkVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  if (from._internal_patch() != 0) {
    _internal_set_patch(from._internal_patch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntarisSdkVersion::CopyFrom(const AntarisSdkVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.AntarisSdkVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntarisSdkVersion::IsInitialized() const {
  return true;
}

void AntarisSdkVersion::InternalSwap(AntarisSdkVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AntarisSdkVersion, patch_)
      + sizeof(AntarisSdkVersion::patch_)
      - PROTOBUF_FIELD_OFFSET(AntarisSdkVersion, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AntarisSdkVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[0]);
}

// ===================================================================

class ReqRegisterParams::_Internal {
 public:
  static const ::antaris_api_peer_to_peer::AntarisSdkVersion& sdk_version(const ReqRegisterParams* msg);
};

const ::antaris_api_peer_to_peer::AntarisSdkVersion&
ReqRegisterParams::_Internal::sdk_version(const ReqRegisterParams* msg) {
  return *msg->sdk_version_;
}
ReqRegisterParams::ReqRegisterParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqRegisterParams)
}
ReqRegisterParams::ReqRegisterParams(const ReqRegisterParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sdk_version()) {
    sdk_version_ = new ::antaris_api_peer_to_peer::AntarisSdkVersion(*from.sdk_version_);
  } else {
    sdk_version_ = nullptr;
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&health_check_fail_action_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(health_check_fail_action_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqRegisterParams)
}

inline void ReqRegisterParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sdk_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&health_check_fail_action_) -
    reinterpret_cast<char*>(&sdk_version_)) + sizeof(health_check_fail_action_));
}

ReqRegisterParams::~ReqRegisterParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqRegisterParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqRegisterParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sdk_version_;
}

void ReqRegisterParams::ArenaDtor(void* object) {
  ReqRegisterParams* _this = reinterpret_cast< ReqRegisterParams* >(object);
  (void)_this;
}
void ReqRegisterParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqRegisterParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqRegisterParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqRegisterParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sdk_version_ != nullptr) {
    delete sdk_version_;
  }
  sdk_version_ = nullptr;
  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&health_check_fail_action_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(health_check_fail_action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqRegisterParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 health_check_fail_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          health_check_fail_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .antaris_api_peer_to_peer.AntarisSdkVersion sdk_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sdk_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqRegisterParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqRegisterParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 health_check_fail_action = 2;
  if (this->_internal_health_check_fail_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_health_check_fail_action(), target);
  }

  // .antaris_api_peer_to_peer.AntarisSdkVersion sdk_version = 3;
  if (this->_internal_has_sdk_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sdk_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqRegisterParams)
  return target;
}

size_t ReqRegisterParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqRegisterParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .antaris_api_peer_to_peer.AntarisSdkVersion sdk_version = 3;
  if (this->_internal_has_sdk_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sdk_version_);
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 health_check_fail_action = 2;
  if (this->_internal_health_check_fail_action() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_health_check_fail_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqRegisterParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqRegisterParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqRegisterParams::GetClassData() const { return &_class_data_; }

void ReqRegisterParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqRegisterParams *>(to)->MergeFrom(
      static_cast<const ReqRegisterParams &>(from));
}


void ReqRegisterParams::MergeFrom(const ReqRegisterParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqRegisterParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sdk_version()) {
    _internal_mutable_sdk_version()->::antaris_api_peer_to_peer::AntarisSdkVersion::MergeFrom(from._internal_sdk_version());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_health_check_fail_action() != 0) {
    _internal_set_health_check_fail_action(from._internal_health_check_fail_action());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqRegisterParams::CopyFrom(const ReqRegisterParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqRegisterParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegisterParams::IsInitialized() const {
  return true;
}

void ReqRegisterParams::InternalSwap(ReqRegisterParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqRegisterParams, health_check_fail_action_)
      + sizeof(ReqRegisterParams::health_check_fail_action_)
      - PROTOBUF_FIELD_OFFSET(ReqRegisterParams, sdk_version_)>(
          reinterpret_cast<char*>(&sdk_version_),
          reinterpret_cast<char*>(&other->sdk_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqRegisterParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[1]);
}

// ===================================================================

class RespRegisterParams::_Internal {
 public:
};

RespRegisterParams::RespRegisterParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespRegisterParams)
}
RespRegisterParams::RespRegisterParams(const RespRegisterParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_token().empty()) {
    auth_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_token(), 
      GetArenaForAllocation());
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespRegisterParams)
}

inline void RespRegisterParams::SharedCtor() {
auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespRegisterParams::~RespRegisterParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespRegisterParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespRegisterParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RespRegisterParams::ArenaDtor(void* object) {
  RespRegisterParams* _this = reinterpret_cast< RespRegisterParams* >(object);
  (void)_this;
}
void RespRegisterParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespRegisterParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespRegisterParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespRegisterParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_token_.ClearToEmpty();
  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespRegisterParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string auth_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.RespRegisterParams.auth_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespRegisterParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespRegisterParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  // string auth_token = 3;
  if (!this->_internal_auth_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.RespRegisterParams.auth_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_auth_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespRegisterParams)
  return target;
}

size_t RespRegisterParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespRegisterParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_token = 3;
  if (!this->_internal_auth_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespRegisterParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespRegisterParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespRegisterParams::GetClassData() const { return &_class_data_; }

void RespRegisterParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespRegisterParams *>(to)->MergeFrom(
      static_cast<const RespRegisterParams &>(from));
}


void RespRegisterParams::MergeFrom(const RespRegisterParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespRegisterParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_auth_token().empty()) {
    _internal_set_auth_token(from._internal_auth_token());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespRegisterParams::CopyFrom(const RespRegisterParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespRegisterParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespRegisterParams::IsInitialized() const {
  return true;
}

void RespRegisterParams::InternalSwap(RespRegisterParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_token_, lhs_arena,
      &other->auth_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespRegisterParams, req_status_)
      + sizeof(RespRegisterParams::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespRegisterParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespRegisterParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[2]);
}

// ===================================================================

class ReqGetCurrentLocationParams::_Internal {
 public:
};

ReqGetCurrentLocationParams::ReqGetCurrentLocationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
}
ReqGetCurrentLocationParams::ReqGetCurrentLocationParams(const ReqGetCurrentLocationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  correlation_id_ = from.correlation_id_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
}

inline void ReqGetCurrentLocationParams::SharedCtor() {
correlation_id_ = 0;
}

ReqGetCurrentLocationParams::~ReqGetCurrentLocationParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqGetCurrentLocationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqGetCurrentLocationParams::ArenaDtor(void* object) {
  ReqGetCurrentLocationParams* _this = reinterpret_cast< ReqGetCurrentLocationParams* >(object);
  (void)_this;
}
void ReqGetCurrentLocationParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetCurrentLocationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetCurrentLocationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlation_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetCurrentLocationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqGetCurrentLocationParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  return target;
}

size_t ReqGetCurrentLocationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqGetCurrentLocationParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqGetCurrentLocationParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqGetCurrentLocationParams::GetClassData() const { return &_class_data_; }

void ReqGetCurrentLocationParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqGetCurrentLocationParams *>(to)->MergeFrom(
      static_cast<const ReqGetCurrentLocationParams &>(from));
}


void ReqGetCurrentLocationParams::MergeFrom(const ReqGetCurrentLocationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqGetCurrentLocationParams::CopyFrom(const ReqGetCurrentLocationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqGetCurrentLocationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetCurrentLocationParams::IsInitialized() const {
  return true;
}

void ReqGetCurrentLocationParams::InternalSwap(ReqGetCurrentLocationParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(correlation_id_, other->correlation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetCurrentLocationParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[3]);
}

// ===================================================================

class RespGetCurrentLocationParams::_Internal {
 public:
};

RespGetCurrentLocationParams::RespGetCurrentLocationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
}
RespGetCurrentLocationParams::RespGetCurrentLocationParams(const RespGetCurrentLocationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sd_altitude_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(sd_altitude_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
}

inline void RespGetCurrentLocationParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sd_altitude_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(sd_altitude_));
}

RespGetCurrentLocationParams::~RespGetCurrentLocationParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespGetCurrentLocationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespGetCurrentLocationParams::ArenaDtor(void* object) {
  RespGetCurrentLocationParams* _this = reinterpret_cast< RespGetCurrentLocationParams* >(object);
  (void)_this;
}
void RespGetCurrentLocationParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespGetCurrentLocationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespGetCurrentLocationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sd_altitude_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(sd_altitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespGetCurrentLocationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float sd_latitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          sd_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float sd_longitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          sd_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float sd_altitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          sd_altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 determined_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          determined_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespGetCurrentLocationParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  // double latitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_latitude(), target);
  }

  // double longitude = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_longitude(), target);
  }

  // double altitude = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_altitude(), target);
  }

  // float sd_latitude = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sd_latitude = this->_internal_sd_latitude();
  uint32_t raw_sd_latitude;
  memcpy(&raw_sd_latitude, &tmp_sd_latitude, sizeof(tmp_sd_latitude));
  if (raw_sd_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_sd_latitude(), target);
  }

  // float sd_longitude = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sd_longitude = this->_internal_sd_longitude();
  uint32_t raw_sd_longitude;
  memcpy(&raw_sd_longitude, &tmp_sd_longitude, sizeof(tmp_sd_longitude));
  if (raw_sd_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_sd_longitude(), target);
  }

  // float sd_altitude = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sd_altitude = this->_internal_sd_altitude();
  uint32_t raw_sd_altitude;
  memcpy(&raw_sd_altitude, &tmp_sd_altitude, sizeof(tmp_sd_altitude));
  if (raw_sd_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_sd_altitude(), target);
  }

  // int64 determined_at = 9;
  if (this->_internal_determined_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_determined_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  return target;
}

size_t RespGetCurrentLocationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  // double latitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double altitude = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 1 + 8;
  }

  // float sd_latitude = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sd_latitude = this->_internal_sd_latitude();
  uint32_t raw_sd_latitude;
  memcpy(&raw_sd_latitude, &tmp_sd_latitude, sizeof(tmp_sd_latitude));
  if (raw_sd_latitude != 0) {
    total_size += 1 + 4;
  }

  // float sd_longitude = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sd_longitude = this->_internal_sd_longitude();
  uint32_t raw_sd_longitude;
  memcpy(&raw_sd_longitude, &tmp_sd_longitude, sizeof(tmp_sd_longitude));
  if (raw_sd_longitude != 0) {
    total_size += 1 + 4;
  }

  // int64 determined_at = 9;
  if (this->_internal_determined_at() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_determined_at());
  }

  // float sd_altitude = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sd_altitude = this->_internal_sd_altitude();
  uint32_t raw_sd_altitude;
  memcpy(&raw_sd_altitude, &tmp_sd_altitude, sizeof(tmp_sd_altitude));
  if (raw_sd_altitude != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespGetCurrentLocationParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespGetCurrentLocationParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespGetCurrentLocationParams::GetClassData() const { return &_class_data_; }

void RespGetCurrentLocationParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespGetCurrentLocationParams *>(to)->MergeFrom(
      static_cast<const RespGetCurrentLocationParams &>(from));
}


void RespGetCurrentLocationParams::MergeFrom(const RespGetCurrentLocationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = from._internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _internal_set_altitude(from._internal_altitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sd_latitude = from._internal_sd_latitude();
  uint32_t raw_sd_latitude;
  memcpy(&raw_sd_latitude, &tmp_sd_latitude, sizeof(tmp_sd_latitude));
  if (raw_sd_latitude != 0) {
    _internal_set_sd_latitude(from._internal_sd_latitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sd_longitude = from._internal_sd_longitude();
  uint32_t raw_sd_longitude;
  memcpy(&raw_sd_longitude, &tmp_sd_longitude, sizeof(tmp_sd_longitude));
  if (raw_sd_longitude != 0) {
    _internal_set_sd_longitude(from._internal_sd_longitude());
  }
  if (from._internal_determined_at() != 0) {
    _internal_set_determined_at(from._internal_determined_at());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sd_altitude = from._internal_sd_altitude();
  uint32_t raw_sd_altitude;
  memcpy(&raw_sd_altitude, &tmp_sd_altitude, sizeof(tmp_sd_altitude));
  if (raw_sd_altitude != 0) {
    _internal_set_sd_altitude(from._internal_sd_altitude());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespGetCurrentLocationParams::CopyFrom(const RespGetCurrentLocationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespGetCurrentLocationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespGetCurrentLocationParams::IsInitialized() const {
  return true;
}

void RespGetCurrentLocationParams::InternalSwap(RespGetCurrentLocationParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespGetCurrentLocationParams, sd_altitude_)
      + sizeof(RespGetCurrentLocationParams::sd_altitude_)
      - PROTOBUF_FIELD_OFFSET(RespGetCurrentLocationParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespGetCurrentLocationParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[4]);
}

// ===================================================================

class ReqStageFileDownloadParams::_Internal {
 public:
};

ReqStageFileDownloadParams::ReqStageFileDownloadParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
}
ReqStageFileDownloadParams::ReqStageFileDownloadParams(const ReqStageFileDownloadParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_priority_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(file_priority_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
}

inline void ReqStageFileDownloadParams::SharedCtor() {
file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_priority_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(file_priority_));
}

ReqStageFileDownloadParams::~ReqStageFileDownloadParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqStageFileDownloadParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqStageFileDownloadParams::ArenaDtor(void* object) {
  ReqStageFileDownloadParams* _this = reinterpret_cast< ReqStageFileDownloadParams* >(object);
  (void)_this;
}
void ReqStageFileDownloadParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqStageFileDownloadParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqStageFileDownloadParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmpty();
  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_priority_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(file_priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqStageFileDownloadParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.ReqStageFileDownloadParams.file_path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .antaris_api_peer_to_peer.FilePriorities file_priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_file_priority(static_cast<::antaris_api_peer_to_peer::FilePriorities>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqStageFileDownloadParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // string file_path = 2;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.ReqStageFileDownloadParams.file_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_path(), target);
  }

  // .antaris_api_peer_to_peer.FilePriorities file_priority = 3;
  if (this->_internal_file_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_file_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  return target;
}

size_t ReqStageFileDownloadParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 2;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // .antaris_api_peer_to_peer.FilePriorities file_priority = 3;
  if (this->_internal_file_priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_file_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqStageFileDownloadParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqStageFileDownloadParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqStageFileDownloadParams::GetClassData() const { return &_class_data_; }

void ReqStageFileDownloadParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqStageFileDownloadParams *>(to)->MergeFrom(
      static_cast<const ReqStageFileDownloadParams &>(from));
}


void ReqStageFileDownloadParams::MergeFrom(const ReqStageFileDownloadParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_path().empty()) {
    _internal_set_file_path(from._internal_file_path());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_file_priority() != 0) {
    _internal_set_file_priority(from._internal_file_priority());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqStageFileDownloadParams::CopyFrom(const ReqStageFileDownloadParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqStageFileDownloadParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStageFileDownloadParams::IsInitialized() const {
  return true;
}

void ReqStageFileDownloadParams::InternalSwap(ReqStageFileDownloadParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_path_, lhs_arena,
      &other->file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqStageFileDownloadParams, file_priority_)
      + sizeof(ReqStageFileDownloadParams::file_priority_)
      - PROTOBUF_FIELD_OFFSET(ReqStageFileDownloadParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqStageFileDownloadParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[5]);
}

// ===================================================================

class RespStageFileDownloadParams::_Internal {
 public:
};

RespStageFileDownloadParams::RespStageFileDownloadParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespStageFileDownloadParams)
}
RespStageFileDownloadParams::RespStageFileDownloadParams(const RespStageFileDownloadParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespStageFileDownloadParams)
}

inline void RespStageFileDownloadParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespStageFileDownloadParams::~RespStageFileDownloadParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespStageFileDownloadParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespStageFileDownloadParams::ArenaDtor(void* object) {
  RespStageFileDownloadParams* _this = reinterpret_cast< RespStageFileDownloadParams* >(object);
  (void)_this;
}
void RespStageFileDownloadParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespStageFileDownloadParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespStageFileDownloadParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespStageFileDownloadParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespStageFileDownloadParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  return target;
}

size_t RespStageFileDownloadParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespStageFileDownloadParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespStageFileDownloadParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespStageFileDownloadParams::GetClassData() const { return &_class_data_; }

void RespStageFileDownloadParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespStageFileDownloadParams *>(to)->MergeFrom(
      static_cast<const RespStageFileDownloadParams &>(from));
}


void RespStageFileDownloadParams::MergeFrom(const RespStageFileDownloadParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespStageFileDownloadParams::CopyFrom(const RespStageFileDownloadParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespStageFileDownloadParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespStageFileDownloadParams::IsInitialized() const {
  return true;
}

void RespStageFileDownloadParams::InternalSwap(RespStageFileDownloadParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespStageFileDownloadParams, req_status_)
      + sizeof(RespStageFileDownloadParams::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespStageFileDownloadParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespStageFileDownloadParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[6]);
}

// ===================================================================

class ReqPayloadPowerControlParams::_Internal {
 public:
};

ReqPayloadPowerControlParams::ReqPayloadPowerControlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
}
ReqPayloadPowerControlParams::ReqPayloadPowerControlParams(const ReqPayloadPowerControlParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hw_id_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(hw_id_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
}

inline void ReqPayloadPowerControlParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hw_id_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(hw_id_));
}

ReqPayloadPowerControlParams::~ReqPayloadPowerControlParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqPayloadPowerControlParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqPayloadPowerControlParams::ArenaDtor(void* object) {
  ReqPayloadPowerControlParams* _this = reinterpret_cast< ReqPayloadPowerControlParams* >(object);
  (void)_this;
}
void ReqPayloadPowerControlParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqPayloadPowerControlParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqPayloadPowerControlParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hw_id_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(hw_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqPayloadPowerControlParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 power_operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          power_operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hw_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          hw_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqPayloadPowerControlParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 power_operation = 2;
  if (this->_internal_power_operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_power_operation(), target);
  }

  // int32 hw_id = 3;
  if (this->_internal_hw_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hw_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  return target;
}

size_t ReqPayloadPowerControlParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 power_operation = 2;
  if (this->_internal_power_operation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_power_operation());
  }

  // int32 hw_id = 3;
  if (this->_internal_hw_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hw_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqPayloadPowerControlParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqPayloadPowerControlParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqPayloadPowerControlParams::GetClassData() const { return &_class_data_; }

void ReqPayloadPowerControlParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqPayloadPowerControlParams *>(to)->MergeFrom(
      static_cast<const ReqPayloadPowerControlParams &>(from));
}


void ReqPayloadPowerControlParams::MergeFrom(const ReqPayloadPowerControlParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_power_operation() != 0) {
    _internal_set_power_operation(from._internal_power_operation());
  }
  if (from._internal_hw_id() != 0) {
    _internal_set_hw_id(from._internal_hw_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqPayloadPowerControlParams::CopyFrom(const ReqPayloadPowerControlParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqPayloadPowerControlParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPayloadPowerControlParams::IsInitialized() const {
  return true;
}

void ReqPayloadPowerControlParams::InternalSwap(ReqPayloadPowerControlParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqPayloadPowerControlParams, hw_id_)
      + sizeof(ReqPayloadPowerControlParams::hw_id_)
      - PROTOBUF_FIELD_OFFSET(ReqPayloadPowerControlParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqPayloadPowerControlParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[7]);
}

// ===================================================================

class RespPayloadPowerControlParams::_Internal {
 public:
};

RespPayloadPowerControlParams::RespPayloadPowerControlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
}
RespPayloadPowerControlParams::RespPayloadPowerControlParams(const RespPayloadPowerControlParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
}

inline void RespPayloadPowerControlParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespPayloadPowerControlParams::~RespPayloadPowerControlParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespPayloadPowerControlParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespPayloadPowerControlParams::ArenaDtor(void* object) {
  RespPayloadPowerControlParams* _this = reinterpret_cast< RespPayloadPowerControlParams* >(object);
  (void)_this;
}
void RespPayloadPowerControlParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespPayloadPowerControlParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespPayloadPowerControlParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespPayloadPowerControlParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespPayloadPowerControlParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  return target;
}

size_t RespPayloadPowerControlParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespPayloadPowerControlParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespPayloadPowerControlParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespPayloadPowerControlParams::GetClassData() const { return &_class_data_; }

void RespPayloadPowerControlParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespPayloadPowerControlParams *>(to)->MergeFrom(
      static_cast<const RespPayloadPowerControlParams &>(from));
}


void RespPayloadPowerControlParams::MergeFrom(const RespPayloadPowerControlParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespPayloadPowerControlParams::CopyFrom(const RespPayloadPowerControlParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespPayloadPowerControlParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespPayloadPowerControlParams::IsInitialized() const {
  return true;
}

void RespPayloadPowerControlParams::InternalSwap(RespPayloadPowerControlParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespPayloadPowerControlParams, req_status_)
      + sizeof(RespPayloadPowerControlParams::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespPayloadPowerControlParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespPayloadPowerControlParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[8]);
}

// ===================================================================

class RespShutdownParams::_Internal {
 public:
};

RespShutdownParams::RespShutdownParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespShutdownParams)
}
RespShutdownParams::RespShutdownParams(const RespShutdownParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespShutdownParams)
}

inline void RespShutdownParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespShutdownParams::~RespShutdownParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespShutdownParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespShutdownParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespShutdownParams::ArenaDtor(void* object) {
  RespShutdownParams* _this = reinterpret_cast< RespShutdownParams* >(object);
  (void)_this;
}
void RespShutdownParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespShutdownParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespShutdownParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespShutdownParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespShutdownParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespShutdownParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespShutdownParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespShutdownParams)
  return target;
}

size_t RespShutdownParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespShutdownParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespShutdownParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespShutdownParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespShutdownParams::GetClassData() const { return &_class_data_; }

void RespShutdownParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespShutdownParams *>(to)->MergeFrom(
      static_cast<const RespShutdownParams &>(from));
}


void RespShutdownParams::MergeFrom(const RespShutdownParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespShutdownParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespShutdownParams::CopyFrom(const RespShutdownParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespShutdownParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespShutdownParams::IsInitialized() const {
  return true;
}

void RespShutdownParams::InternalSwap(RespShutdownParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespShutdownParams, req_status_)
      + sizeof(RespShutdownParams::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespShutdownParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespShutdownParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[9]);
}

// ===================================================================

class RespHealthCheckParams::_Internal {
 public:
};

RespHealthCheckParams::RespHealthCheckParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespHealthCheckParams)
}
RespHealthCheckParams::RespHealthCheckParams(const RespHealthCheckParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespHealthCheckParams)
}

inline void RespHealthCheckParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
}

RespHealthCheckParams::~RespHealthCheckParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespHealthCheckParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespHealthCheckParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespHealthCheckParams::ArenaDtor(void* object) {
  RespHealthCheckParams* _this = reinterpret_cast< RespHealthCheckParams* >(object);
  (void)_this;
}
void RespHealthCheckParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespHealthCheckParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespHealthCheckParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespHealthCheckParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespHealthCheckParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 application_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          application_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqs_to_pc_in_err_cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          reqs_to_pc_in_err_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 resps_to_pc_in_err_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          resps_to_pc_in_err_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespHealthCheckParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespHealthCheckParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 application_state = 2;
  if (this->_internal_application_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_application_state(), target);
  }

  // int32 reqs_to_pc_in_err_cnt = 3;
  if (this->_internal_reqs_to_pc_in_err_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reqs_to_pc_in_err_cnt(), target);
  }

  // int32 resps_to_pc_in_err_cnt = 4;
  if (this->_internal_resps_to_pc_in_err_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_resps_to_pc_in_err_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespHealthCheckParams)
  return target;
}

size_t RespHealthCheckParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespHealthCheckParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 application_state = 2;
  if (this->_internal_application_state() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_application_state());
  }

  // int32 reqs_to_pc_in_err_cnt = 3;
  if (this->_internal_reqs_to_pc_in_err_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqs_to_pc_in_err_cnt());
  }

  // int32 resps_to_pc_in_err_cnt = 4;
  if (this->_internal_resps_to_pc_in_err_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_resps_to_pc_in_err_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespHealthCheckParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespHealthCheckParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespHealthCheckParams::GetClassData() const { return &_class_data_; }

void RespHealthCheckParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespHealthCheckParams *>(to)->MergeFrom(
      static_cast<const RespHealthCheckParams &>(from));
}


void RespHealthCheckParams::MergeFrom(const RespHealthCheckParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespHealthCheckParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_application_state() != 0) {
    _internal_set_application_state(from._internal_application_state());
  }
  if (from._internal_reqs_to_pc_in_err_cnt() != 0) {
    _internal_set_reqs_to_pc_in_err_cnt(from._internal_reqs_to_pc_in_err_cnt());
  }
  if (from._internal_resps_to_pc_in_err_cnt() != 0) {
    _internal_set_resps_to_pc_in_err_cnt(from._internal_resps_to_pc_in_err_cnt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespHealthCheckParams::CopyFrom(const RespHealthCheckParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespHealthCheckParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespHealthCheckParams::IsInitialized() const {
  return true;
}

void RespHealthCheckParams::InternalSwap(RespHealthCheckParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespHealthCheckParams, resps_to_pc_in_err_cnt_)
      + sizeof(RespHealthCheckParams::resps_to_pc_in_err_cnt_)
      - PROTOBUF_FIELD_OFFSET(RespHealthCheckParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespHealthCheckParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[10]);
}

// ===================================================================

class StartSequenceParams::_Internal {
 public:
};

StartSequenceParams::StartSequenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.StartSequenceParams)
}
StartSequenceParams::StartSequenceParams(const StartSequenceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sequence_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequence_id().empty()) {
    sequence_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence_id(), 
      GetArenaForAllocation());
  }
  sequence_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sequence_params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequence_params().empty()) {
    sequence_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence_params(), 
      GetArenaForAllocation());
  }
  ::memcpy(&scheduled_deadline_, &from.scheduled_deadline_,
    static_cast<size_t>(reinterpret_cast<char*>(&correlation_id_) -
    reinterpret_cast<char*>(&scheduled_deadline_)) + sizeof(correlation_id_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.StartSequenceParams)
}

inline void StartSequenceParams::SharedCtor() {
sequence_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sequence_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sequence_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sequence_params_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scheduled_deadline_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&correlation_id_) -
    reinterpret_cast<char*>(&scheduled_deadline_)) + sizeof(correlation_id_));
}

StartSequenceParams::~StartSequenceParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.StartSequenceParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartSequenceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sequence_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartSequenceParams::ArenaDtor(void* object) {
  StartSequenceParams* _this = reinterpret_cast< StartSequenceParams* >(object);
  (void)_this;
}
void StartSequenceParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartSequenceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartSequenceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.StartSequenceParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_id_.ClearToEmpty();
  sequence_params_.ClearToEmpty();
  ::memset(&scheduled_deadline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correlation_id_) -
      reinterpret_cast<char*>(&scheduled_deadline_)) + sizeof(correlation_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartSequenceParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sequence_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sequence_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.StartSequenceParams.sequence_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sequence_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sequence_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.StartSequenceParams.sequence_params"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 scheduled_deadline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          scheduled_deadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartSequenceParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.StartSequenceParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // string sequence_id = 2;
  if (!this->_internal_sequence_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_id().data(), static_cast<int>(this->_internal_sequence_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.StartSequenceParams.sequence_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sequence_id(), target);
  }

  // string sequence_params = 3;
  if (!this->_internal_sequence_params().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_params().data(), static_cast<int>(this->_internal_sequence_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.StartSequenceParams.sequence_params");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sequence_params(), target);
  }

  // int64 scheduled_deadline = 4;
  if (this->_internal_scheduled_deadline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_scheduled_deadline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.StartSequenceParams)
  return target;
}

size_t StartSequenceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.StartSequenceParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sequence_id = 2;
  if (!this->_internal_sequence_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_id());
  }

  // string sequence_params = 3;
  if (!this->_internal_sequence_params().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_params());
  }

  // int64 scheduled_deadline = 4;
  if (this->_internal_scheduled_deadline() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_scheduled_deadline());
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartSequenceParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartSequenceParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartSequenceParams::GetClassData() const { return &_class_data_; }

void StartSequenceParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartSequenceParams *>(to)->MergeFrom(
      static_cast<const StartSequenceParams &>(from));
}


void StartSequenceParams::MergeFrom(const StartSequenceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.StartSequenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sequence_id().empty()) {
    _internal_set_sequence_id(from._internal_sequence_id());
  }
  if (!from._internal_sequence_params().empty()) {
    _internal_set_sequence_params(from._internal_sequence_params());
  }
  if (from._internal_scheduled_deadline() != 0) {
    _internal_set_scheduled_deadline(from._internal_scheduled_deadline());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartSequenceParams::CopyFrom(const StartSequenceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.StartSequenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSequenceParams::IsInitialized() const {
  return true;
}

void StartSequenceParams::InternalSwap(StartSequenceParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sequence_id_, lhs_arena,
      &other->sequence_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sequence_params_, lhs_arena,
      &other->sequence_params_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartSequenceParams, correlation_id_)
      + sizeof(StartSequenceParams::correlation_id_)
      - PROTOBUF_FIELD_OFFSET(StartSequenceParams, scheduled_deadline_)>(
          reinterpret_cast<char*>(&scheduled_deadline_),
          reinterpret_cast<char*>(&other->scheduled_deadline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartSequenceParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[11]);
}

// ===================================================================

class ShutdownParams::_Internal {
 public:
};

ShutdownParams::ShutdownParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ShutdownParams)
}
ShutdownParams::ShutdownParams(const ShutdownParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&grace_time_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(grace_time_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ShutdownParams)
}

inline void ShutdownParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grace_time_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(grace_time_));
}

ShutdownParams::~ShutdownParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ShutdownParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ShutdownParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShutdownParams::ArenaDtor(void* object) {
  ShutdownParams* _this = reinterpret_cast< ShutdownParams* >(object);
  (void)_this;
}
void ShutdownParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShutdownParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShutdownParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ShutdownParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grace_time_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(grace_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 grace_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          grace_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShutdownParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ShutdownParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 grace_time = 2;
  if (this->_internal_grace_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_grace_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ShutdownParams)
  return target;
}

size_t ShutdownParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ShutdownParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 grace_time = 2;
  if (this->_internal_grace_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_grace_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShutdownParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownParams::GetClassData() const { return &_class_data_; }

void ShutdownParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShutdownParams *>(to)->MergeFrom(
      static_cast<const ShutdownParams &>(from));
}


void ShutdownParams::MergeFrom(const ShutdownParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ShutdownParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_grace_time() != 0) {
    _internal_set_grace_time(from._internal_grace_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShutdownParams::CopyFrom(const ShutdownParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ShutdownParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownParams::IsInitialized() const {
  return true;
}

void ShutdownParams::InternalSwap(ShutdownParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShutdownParams, grace_time_)
      + sizeof(ShutdownParams::grace_time_)
      - PROTOBUF_FIELD_OFFSET(ShutdownParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[12]);
}

// ===================================================================

class HealthCheckParams::_Internal {
 public:
};

HealthCheckParams::HealthCheckParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.HealthCheckParams)
}
HealthCheckParams::HealthCheckParams(const HealthCheckParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.HealthCheckParams)
}

inline void HealthCheckParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
}

HealthCheckParams::~HealthCheckParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.HealthCheckParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HealthCheckParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HealthCheckParams::ArenaDtor(void* object) {
  HealthCheckParams* _this = reinterpret_cast< HealthCheckParams* >(object);
  (void)_this;
}
void HealthCheckParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthCheckParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HealthCheckParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.HealthCheckParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resps_to_pc_in_err_cnt_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(resps_to_pc_in_err_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthCheckParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 application_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          application_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reqs_to_pc_in_err_cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          reqs_to_pc_in_err_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 resps_to_pc_in_err_cnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          resps_to_pc_in_err_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HealthCheckParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.HealthCheckParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 application_state = 2;
  if (this->_internal_application_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_application_state(), target);
  }

  // int32 reqs_to_pc_in_err_cnt = 3;
  if (this->_internal_reqs_to_pc_in_err_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_reqs_to_pc_in_err_cnt(), target);
  }

  // int32 resps_to_pc_in_err_cnt = 4;
  if (this->_internal_resps_to_pc_in_err_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_resps_to_pc_in_err_cnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.HealthCheckParams)
  return target;
}

size_t HealthCheckParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.HealthCheckParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 application_state = 2;
  if (this->_internal_application_state() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_application_state());
  }

  // int32 reqs_to_pc_in_err_cnt = 3;
  if (this->_internal_reqs_to_pc_in_err_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_reqs_to_pc_in_err_cnt());
  }

  // int32 resps_to_pc_in_err_cnt = 4;
  if (this->_internal_resps_to_pc_in_err_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_resps_to_pc_in_err_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HealthCheckParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HealthCheckParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HealthCheckParams::GetClassData() const { return &_class_data_; }

void HealthCheckParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HealthCheckParams *>(to)->MergeFrom(
      static_cast<const HealthCheckParams &>(from));
}


void HealthCheckParams::MergeFrom(const HealthCheckParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.HealthCheckParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_application_state() != 0) {
    _internal_set_application_state(from._internal_application_state());
  }
  if (from._internal_reqs_to_pc_in_err_cnt() != 0) {
    _internal_set_reqs_to_pc_in_err_cnt(from._internal_reqs_to_pc_in_err_cnt());
  }
  if (from._internal_resps_to_pc_in_err_cnt() != 0) {
    _internal_set_resps_to_pc_in_err_cnt(from._internal_resps_to_pc_in_err_cnt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HealthCheckParams::CopyFrom(const HealthCheckParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.HealthCheckParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheckParams::IsInitialized() const {
  return true;
}

void HealthCheckParams::InternalSwap(HealthCheckParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthCheckParams, resps_to_pc_in_err_cnt_)
      + sizeof(HealthCheckParams::resps_to_pc_in_err_cnt_)
      - PROTOBUF_FIELD_OFFSET(HealthCheckParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthCheckParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[13]);
}

// ===================================================================

class PayloadMetricsInfo::_Internal {
 public:
};

PayloadMetricsInfo::PayloadMetricsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.PayloadMetricsInfo)
}
PayloadMetricsInfo::PayloadMetricsInfo(const PayloadMetricsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  names_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    names_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_names().empty()) {
    names_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_names(), 
      GetArenaForAllocation());
  }
  counter_ = from.counter_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.PayloadMetricsInfo)
}

inline void PayloadMetricsInfo::SharedCtor() {
names_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  names_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
counter_ = 0;
}

PayloadMetricsInfo::~PayloadMetricsInfo() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.PayloadMetricsInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PayloadMetricsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  names_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PayloadMetricsInfo::ArenaDtor(void* object) {
  PayloadMetricsInfo* _this = reinterpret_cast< PayloadMetricsInfo* >(object);
  (void)_this;
}
void PayloadMetricsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PayloadMetricsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PayloadMetricsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.PayloadMetricsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.ClearToEmpty();
  counter_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PayloadMetricsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_names();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.PayloadMetricsInfo.names"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PayloadMetricsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.PayloadMetricsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 counter = 1;
  if (this->_internal_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_counter(), target);
  }

  // string names = 2;
  if (!this->_internal_names().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_names().data(), static_cast<int>(this->_internal_names().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.PayloadMetricsInfo.names");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_names(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.PayloadMetricsInfo)
  return target;
}

size_t PayloadMetricsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.PayloadMetricsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string names = 2;
  if (!this->_internal_names().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_names());
  }

  // int32 counter = 1;
  if (this->_internal_counter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_counter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PayloadMetricsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PayloadMetricsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PayloadMetricsInfo::GetClassData() const { return &_class_data_; }

void PayloadMetricsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PayloadMetricsInfo *>(to)->MergeFrom(
      static_cast<const PayloadMetricsInfo &>(from));
}


void PayloadMetricsInfo::MergeFrom(const PayloadMetricsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.PayloadMetricsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_names().empty()) {
    _internal_set_names(from._internal_names());
  }
  if (from._internal_counter() != 0) {
    _internal_set_counter(from._internal_counter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PayloadMetricsInfo::CopyFrom(const PayloadMetricsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.PayloadMetricsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadMetricsInfo::IsInitialized() const {
  return true;
}

void PayloadMetricsInfo::InternalSwap(PayloadMetricsInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &names_, lhs_arena,
      &other->names_, rhs_arena
  );
  swap(counter_, other->counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PayloadMetricsInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[14]);
}

// ===================================================================

class ReqPayloadMetricsParams::_Internal {
 public:
};

ReqPayloadMetricsParams::ReqPayloadMetricsParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
}
ReqPayloadMetricsParams::ReqPayloadMetricsParams(const ReqPayloadMetricsParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  correlation_id_ = from.correlation_id_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
}

inline void ReqPayloadMetricsParams::SharedCtor() {
correlation_id_ = 0;
}

ReqPayloadMetricsParams::~ReqPayloadMetricsParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqPayloadMetricsParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqPayloadMetricsParams::ArenaDtor(void* object) {
  ReqPayloadMetricsParams* _this = reinterpret_cast< ReqPayloadMetricsParams* >(object);
  (void)_this;
}
void ReqPayloadMetricsParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqPayloadMetricsParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqPayloadMetricsParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlation_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqPayloadMetricsParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqPayloadMetricsParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  return target;
}

size_t ReqPayloadMetricsParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqPayloadMetricsParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqPayloadMetricsParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqPayloadMetricsParams::GetClassData() const { return &_class_data_; }

void ReqPayloadMetricsParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqPayloadMetricsParams *>(to)->MergeFrom(
      static_cast<const ReqPayloadMetricsParams &>(from));
}


void ReqPayloadMetricsParams::MergeFrom(const ReqPayloadMetricsParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqPayloadMetricsParams::CopyFrom(const ReqPayloadMetricsParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqPayloadMetricsParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPayloadMetricsParams::IsInitialized() const {
  return true;
}

void ReqPayloadMetricsParams::InternalSwap(ReqPayloadMetricsParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(correlation_id_, other->correlation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqPayloadMetricsParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[15]);
}

// ===================================================================

class PayloadMetricsResponse::_Internal {
 public:
};

PayloadMetricsResponse::PayloadMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metrics_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.PayloadMetricsResponse)
}
PayloadMetricsResponse::PayloadMetricsResponse(const PayloadMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_counter_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(used_counter_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.PayloadMetricsResponse)
}

inline void PayloadMetricsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&used_counter_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(used_counter_));
}

PayloadMetricsResponse::~PayloadMetricsResponse() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.PayloadMetricsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PayloadMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PayloadMetricsResponse::ArenaDtor(void* object) {
  PayloadMetricsResponse* _this = reinterpret_cast< PayloadMetricsResponse* >(object);
  (void)_this;
}
void PayloadMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PayloadMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PayloadMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.PayloadMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_counter_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(used_counter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PayloadMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 used_counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          used_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .antaris_api_peer_to_peer.PayloadMetricsInfo metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PayloadMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.PayloadMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // int32 used_counter = 3;
  if (this->_internal_used_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_used_counter(), target);
  }

  // repeated .antaris_api_peer_to_peer.PayloadMetricsInfo metrics = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.PayloadMetricsResponse)
  return target;
}

size_t PayloadMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.PayloadMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .antaris_api_peer_to_peer.PayloadMetricsInfo metrics = 4;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 used_counter = 3;
  if (this->_internal_used_counter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_used_counter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PayloadMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PayloadMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PayloadMetricsResponse::GetClassData() const { return &_class_data_; }

void PayloadMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PayloadMetricsResponse *>(to)->MergeFrom(
      static_cast<const PayloadMetricsResponse &>(from));
}


void PayloadMetricsResponse::MergeFrom(const PayloadMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.PayloadMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_used_counter() != 0) {
    _internal_set_used_counter(from._internal_used_counter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PayloadMetricsResponse::CopyFrom(const PayloadMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.PayloadMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadMetricsResponse::IsInitialized() const {
  return true;
}

void PayloadMetricsResponse::InternalSwap(PayloadMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metrics_.InternalSwap(&other->metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PayloadMetricsResponse, used_counter_)
      + sizeof(PayloadMetricsResponse::used_counter_)
      - PROTOBUF_FIELD_OFFSET(PayloadMetricsResponse, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PayloadMetricsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[16]);
}

// ===================================================================

class CmdSequenceDoneParams::_Internal {
 public:
};

CmdSequenceDoneParams::CmdSequenceDoneParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.CmdSequenceDoneParams)
}
CmdSequenceDoneParams::CmdSequenceDoneParams(const CmdSequenceDoneParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sequence_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequence_id().empty()) {
    sequence_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.CmdSequenceDoneParams)
}

inline void CmdSequenceDoneParams::SharedCtor() {
sequence_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sequence_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CmdSequenceDoneParams::~CmdSequenceDoneParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CmdSequenceDoneParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sequence_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CmdSequenceDoneParams::ArenaDtor(void* object) {
  CmdSequenceDoneParams* _this = reinterpret_cast< CmdSequenceDoneParams* >(object);
  (void)_this;
}
void CmdSequenceDoneParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmdSequenceDoneParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CmdSequenceDoneParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdSequenceDoneParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sequence_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sequence_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.CmdSequenceDoneParams.sequence_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CmdSequenceDoneParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence_id = 1;
  if (!this->_internal_sequence_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_id().data(), static_cast<int>(this->_internal_sequence_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.CmdSequenceDoneParams.sequence_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sequence_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  return target;
}

size_t CmdSequenceDoneParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sequence_id = 1;
  if (!this->_internal_sequence_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CmdSequenceDoneParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CmdSequenceDoneParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CmdSequenceDoneParams::GetClassData() const { return &_class_data_; }

void CmdSequenceDoneParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CmdSequenceDoneParams *>(to)->MergeFrom(
      static_cast<const CmdSequenceDoneParams &>(from));
}


void CmdSequenceDoneParams::MergeFrom(const CmdSequenceDoneParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sequence_id().empty()) {
    _internal_set_sequence_id(from._internal_sequence_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CmdSequenceDoneParams::CopyFrom(const CmdSequenceDoneParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.CmdSequenceDoneParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdSequenceDoneParams::IsInitialized() const {
  return true;
}

void CmdSequenceDoneParams::InternalSwap(CmdSequenceDoneParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sequence_id_, lhs_arena,
      &other->sequence_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdSequenceDoneParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[17]);
}

// ===================================================================

class PaSatOsMsg::_Internal {
 public:
};

PaSatOsMsg::PaSatOsMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.PaSatOsMsg)
}
PaSatOsMsg::PaSatOsMsg(const PaSatOsMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload_data().empty()) {
    payload_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(command_id_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.PaSatOsMsg)
}

inline void PaSatOsMsg::SharedCtor() {
payload_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(command_id_));
}

PaSatOsMsg::~PaSatOsMsg() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.PaSatOsMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PaSatOsMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaSatOsMsg::ArenaDtor(void* object) {
  PaSatOsMsg* _this = reinterpret_cast< PaSatOsMsg* >(object);
  (void)_this;
}
void PaSatOsMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaSatOsMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaSatOsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.PaSatOsMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_data_.ClearToEmpty();
  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(command_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaSatOsMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payload_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "antaris_api_peer_to_peer.PaSatOsMsg.payload_data"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaSatOsMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.PaSatOsMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 command_id = 2;
  if (this->_internal_command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_command_id(), target);
  }

  // string payload_data = 3;
  if (!this->_internal_payload_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload_data().data(), static_cast<int>(this->_internal_payload_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "antaris_api_peer_to_peer.PaSatOsMsg.payload_data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_payload_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.PaSatOsMsg)
  return target;
}

size_t PaSatOsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.PaSatOsMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload_data = 3;
  if (!this->_internal_payload_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload_data());
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 command_id = 2;
  if (this->_internal_command_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_command_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaSatOsMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaSatOsMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaSatOsMsg::GetClassData() const { return &_class_data_; }

void PaSatOsMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PaSatOsMsg *>(to)->MergeFrom(
      static_cast<const PaSatOsMsg &>(from));
}


void PaSatOsMsg::MergeFrom(const PaSatOsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.PaSatOsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload_data().empty()) {
    _internal_set_payload_data(from._internal_payload_data());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_command_id() != 0) {
    _internal_set_command_id(from._internal_command_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaSatOsMsg::CopyFrom(const PaSatOsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.PaSatOsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaSatOsMsg::IsInitialized() const {
  return true;
}

void PaSatOsMsg::InternalSwap(PaSatOsMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_data_, lhs_arena,
      &other->payload_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaSatOsMsg, command_id_)
      + sizeof(PaSatOsMsg::command_id_)
      - PROTOBUF_FIELD_OFFSET(PaSatOsMsg, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaSatOsMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[18]);
}

// ===================================================================

class RespPaSatOsMsg::_Internal {
 public:
};

RespPaSatOsMsg::RespPaSatOsMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespPaSatOsMsg)
}
RespPaSatOsMsg::RespPaSatOsMsg(const RespPaSatOsMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespPaSatOsMsg)
}

inline void RespPaSatOsMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespPaSatOsMsg::~RespPaSatOsMsg() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespPaSatOsMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespPaSatOsMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespPaSatOsMsg::ArenaDtor(void* object) {
  RespPaSatOsMsg* _this = reinterpret_cast< RespPaSatOsMsg* >(object);
  (void)_this;
}
void RespPaSatOsMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespPaSatOsMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespPaSatOsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespPaSatOsMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespPaSatOsMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespPaSatOsMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespPaSatOsMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 command_id = 2;
  if (this->_internal_command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_command_id(), target);
  }

  // int32 req_status = 3;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespPaSatOsMsg)
  return target;
}

size_t RespPaSatOsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespPaSatOsMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 command_id = 2;
  if (this->_internal_command_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_command_id());
  }

  // int32 req_status = 3;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespPaSatOsMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespPaSatOsMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespPaSatOsMsg::GetClassData() const { return &_class_data_; }

void RespPaSatOsMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespPaSatOsMsg *>(to)->MergeFrom(
      static_cast<const RespPaSatOsMsg &>(from));
}


void RespPaSatOsMsg::MergeFrom(const RespPaSatOsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespPaSatOsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_command_id() != 0) {
    _internal_set_command_id(from._internal_command_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespPaSatOsMsg::CopyFrom(const RespPaSatOsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespPaSatOsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespPaSatOsMsg::IsInitialized() const {
  return true;
}

void RespPaSatOsMsg::InternalSwap(RespPaSatOsMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespPaSatOsMsg, req_status_)
      + sizeof(RespPaSatOsMsg::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespPaSatOsMsg, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespPaSatOsMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[19]);
}

// ===================================================================

class ReqGnssEphStopDataReq::_Internal {
 public:
};

ReqGnssEphStopDataReq::ReqGnssEphStopDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqGnssEphStopDataReq)
}
ReqGnssEphStopDataReq::ReqGnssEphStopDataReq(const ReqGnssEphStopDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  correlation_id_ = from.correlation_id_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqGnssEphStopDataReq)
}

inline void ReqGnssEphStopDataReq::SharedCtor() {
correlation_id_ = 0;
}

ReqGnssEphStopDataReq::~ReqGnssEphStopDataReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqGnssEphStopDataReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqGnssEphStopDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqGnssEphStopDataReq::ArenaDtor(void* object) {
  ReqGnssEphStopDataReq* _this = reinterpret_cast< ReqGnssEphStopDataReq* >(object);
  (void)_this;
}
void ReqGnssEphStopDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGnssEphStopDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGnssEphStopDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqGnssEphStopDataReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlation_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGnssEphStopDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqGnssEphStopDataReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqGnssEphStopDataReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqGnssEphStopDataReq)
  return target;
}

size_t ReqGnssEphStopDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqGnssEphStopDataReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqGnssEphStopDataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqGnssEphStopDataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqGnssEphStopDataReq::GetClassData() const { return &_class_data_; }

void ReqGnssEphStopDataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqGnssEphStopDataReq *>(to)->MergeFrom(
      static_cast<const ReqGnssEphStopDataReq &>(from));
}


void ReqGnssEphStopDataReq::MergeFrom(const ReqGnssEphStopDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqGnssEphStopDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqGnssEphStopDataReq::CopyFrom(const ReqGnssEphStopDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqGnssEphStopDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGnssEphStopDataReq::IsInitialized() const {
  return true;
}

void ReqGnssEphStopDataReq::InternalSwap(ReqGnssEphStopDataReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(correlation_id_, other->correlation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGnssEphStopDataReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[20]);
}

// ===================================================================

class RespGnssEphStopDataReq::_Internal {
 public:
};

RespGnssEphStopDataReq::RespGnssEphStopDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespGnssEphStopDataReq)
}
RespGnssEphStopDataReq::RespGnssEphStopDataReq(const RespGnssEphStopDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespGnssEphStopDataReq)
}

inline void RespGnssEphStopDataReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespGnssEphStopDataReq::~RespGnssEphStopDataReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespGnssEphStopDataReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespGnssEphStopDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespGnssEphStopDataReq::ArenaDtor(void* object) {
  RespGnssEphStopDataReq* _this = reinterpret_cast< RespGnssEphStopDataReq* >(object);
  (void)_this;
}
void RespGnssEphStopDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespGnssEphStopDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespGnssEphStopDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespGnssEphStopDataReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespGnssEphStopDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespGnssEphStopDataReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespGnssEphStopDataReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespGnssEphStopDataReq)
  return target;
}

size_t RespGnssEphStopDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespGnssEphStopDataReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespGnssEphStopDataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespGnssEphStopDataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespGnssEphStopDataReq::GetClassData() const { return &_class_data_; }

void RespGnssEphStopDataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespGnssEphStopDataReq *>(to)->MergeFrom(
      static_cast<const RespGnssEphStopDataReq &>(from));
}


void RespGnssEphStopDataReq::MergeFrom(const RespGnssEphStopDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespGnssEphStopDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespGnssEphStopDataReq::CopyFrom(const RespGnssEphStopDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespGnssEphStopDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespGnssEphStopDataReq::IsInitialized() const {
  return true;
}

void RespGnssEphStopDataReq::InternalSwap(RespGnssEphStopDataReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespGnssEphStopDataReq, req_status_)
      + sizeof(RespGnssEphStopDataReq::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespGnssEphStopDataReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespGnssEphStopDataReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[21]);
}

// ===================================================================

class ReqGnssEphStartDataReq::_Internal {
 public:
};

ReqGnssEphStartDataReq::ReqGnssEphStartDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqGnssEphStartDataReq)
}
ReqGnssEphStartDataReq::ReqGnssEphStartDataReq(const ReqGnssEphStartDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eph2_enable_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(eph2_enable_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqGnssEphStartDataReq)
}

inline void ReqGnssEphStartDataReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eph2_enable_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(eph2_enable_));
}

ReqGnssEphStartDataReq::~ReqGnssEphStartDataReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqGnssEphStartDataReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqGnssEphStartDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqGnssEphStartDataReq::ArenaDtor(void* object) {
  ReqGnssEphStartDataReq* _this = reinterpret_cast< ReqGnssEphStartDataReq* >(object);
  (void)_this;
}
void ReqGnssEphStartDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGnssEphStartDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGnssEphStartDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqGnssEphStartDataReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eph2_enable_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(eph2_enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGnssEphStartDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 periodicity_in_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          periodicity_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 eph2_enable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          eph2_enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqGnssEphStartDataReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqGnssEphStartDataReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 periodicity_in_ms = 2;
  if (this->_internal_periodicity_in_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_periodicity_in_ms(), target);
  }

  // int32 eph2_enable = 3;
  if (this->_internal_eph2_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eph2_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqGnssEphStartDataReq)
  return target;
}

size_t ReqGnssEphStartDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqGnssEphStartDataReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 periodicity_in_ms = 2;
  if (this->_internal_periodicity_in_ms() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_periodicity_in_ms());
  }

  // int32 eph2_enable = 3;
  if (this->_internal_eph2_enable() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eph2_enable());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqGnssEphStartDataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqGnssEphStartDataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqGnssEphStartDataReq::GetClassData() const { return &_class_data_; }

void ReqGnssEphStartDataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqGnssEphStartDataReq *>(to)->MergeFrom(
      static_cast<const ReqGnssEphStartDataReq &>(from));
}


void ReqGnssEphStartDataReq::MergeFrom(const ReqGnssEphStartDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqGnssEphStartDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_periodicity_in_ms() != 0) {
    _internal_set_periodicity_in_ms(from._internal_periodicity_in_ms());
  }
  if (from._internal_eph2_enable() != 0) {
    _internal_set_eph2_enable(from._internal_eph2_enable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqGnssEphStartDataReq::CopyFrom(const ReqGnssEphStartDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqGnssEphStartDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGnssEphStartDataReq::IsInitialized() const {
  return true;
}

void ReqGnssEphStartDataReq::InternalSwap(ReqGnssEphStartDataReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqGnssEphStartDataReq, eph2_enable_)
      + sizeof(ReqGnssEphStartDataReq::eph2_enable_)
      - PROTOBUF_FIELD_OFFSET(ReqGnssEphStartDataReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGnssEphStartDataReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[22]);
}

// ===================================================================

class RespGnssEphStartDataReq::_Internal {
 public:
};

RespGnssEphStartDataReq::RespGnssEphStartDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespGnssEphStartDataReq)
}
RespGnssEphStartDataReq::RespGnssEphStartDataReq(const RespGnssEphStartDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespGnssEphStartDataReq)
}

inline void RespGnssEphStartDataReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespGnssEphStartDataReq::~RespGnssEphStartDataReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespGnssEphStartDataReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespGnssEphStartDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespGnssEphStartDataReq::ArenaDtor(void* object) {
  RespGnssEphStartDataReq* _this = reinterpret_cast< RespGnssEphStartDataReq* >(object);
  (void)_this;
}
void RespGnssEphStartDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespGnssEphStartDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespGnssEphStartDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespGnssEphStartDataReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespGnssEphStartDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespGnssEphStartDataReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespGnssEphStartDataReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespGnssEphStartDataReq)
  return target;
}

size_t RespGnssEphStartDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespGnssEphStartDataReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespGnssEphStartDataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespGnssEphStartDataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespGnssEphStartDataReq::GetClassData() const { return &_class_data_; }

void RespGnssEphStartDataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespGnssEphStartDataReq *>(to)->MergeFrom(
      static_cast<const RespGnssEphStartDataReq &>(from));
}


void RespGnssEphStartDataReq::MergeFrom(const RespGnssEphStartDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespGnssEphStartDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespGnssEphStartDataReq::CopyFrom(const RespGnssEphStartDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespGnssEphStartDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespGnssEphStartDataReq::IsInitialized() const {
  return true;
}

void RespGnssEphStartDataReq::InternalSwap(RespGnssEphStartDataReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespGnssEphStartDataReq, req_status_)
      + sizeof(RespGnssEphStartDataReq::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespGnssEphStartDataReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespGnssEphStartDataReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[23]);
}

// ===================================================================

class OBC_time::_Internal {
 public:
};

OBC_time::OBC_time(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.OBC_time)
}
OBC_time::OBC_time(const OBC_time& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hour_, &from.hour_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_) -
    reinterpret_cast<char*>(&hour_)) + sizeof(year_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.OBC_time)
}

inline void OBC_time::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hour_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&year_) -
    reinterpret_cast<char*>(&hour_)) + sizeof(year_));
}

OBC_time::~OBC_time() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.OBC_time)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OBC_time::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OBC_time::ArenaDtor(void* object) {
  OBC_time* _this = reinterpret_cast< OBC_time* >(object);
  (void)_this;
}
void OBC_time::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OBC_time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OBC_time::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.OBC_time)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hour_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&hour_)) + sizeof(year_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OBC_time::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 hour = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 millisecond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          millisecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 year = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OBC_time::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.OBC_time)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hour = 1;
  if (this->_internal_hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hour(), target);
  }

  // int32 minute = 2;
  if (this->_internal_minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minute(), target);
  }

  // int32 millisecond = 3;
  if (this->_internal_millisecond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_millisecond(), target);
  }

  // int32 date = 4;
  if (this->_internal_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_date(), target);
  }

  // int32 month = 5;
  if (this->_internal_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_month(), target);
  }

  // int32 year = 6;
  if (this->_internal_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.OBC_time)
  return target;
}

size_t OBC_time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.OBC_time)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hour = 1;
  if (this->_internal_hour() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hour());
  }

  // int32 minute = 2;
  if (this->_internal_minute() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_minute());
  }

  // int32 millisecond = 3;
  if (this->_internal_millisecond() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_millisecond());
  }

  // int32 date = 4;
  if (this->_internal_date() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_date());
  }

  // int32 month = 5;
  if (this->_internal_month() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_month());
  }

  // int32 year = 6;
  if (this->_internal_year() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_year());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OBC_time::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OBC_time::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OBC_time::GetClassData() const { return &_class_data_; }

void OBC_time::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OBC_time *>(to)->MergeFrom(
      static_cast<const OBC_time &>(from));
}


void OBC_time::MergeFrom(const OBC_time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.OBC_time)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hour() != 0) {
    _internal_set_hour(from._internal_hour());
  }
  if (from._internal_minute() != 0) {
    _internal_set_minute(from._internal_minute());
  }
  if (from._internal_millisecond() != 0) {
    _internal_set_millisecond(from._internal_millisecond());
  }
  if (from._internal_date() != 0) {
    _internal_set_date(from._internal_date());
  }
  if (from._internal_month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from._internal_year() != 0) {
    _internal_set_year(from._internal_year());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OBC_time::CopyFrom(const OBC_time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.OBC_time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBC_time::IsInitialized() const {
  return true;
}

void OBC_time::InternalSwap(OBC_time* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OBC_time, year_)
      + sizeof(OBC_time::year_)
      - PROTOBUF_FIELD_OFFSET(OBC_time, hour_)>(
          reinterpret_cast<char*>(&hour_),
          reinterpret_cast<char*>(&other->hour_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OBC_time::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[24]);
}

// ===================================================================

class GpsEphemerisData::_Internal {
 public:
  static const ::antaris_api_peer_to_peer::OBC_time& obc_time(const GpsEphemerisData* msg);
};

const ::antaris_api_peer_to_peer::OBC_time&
GpsEphemerisData::_Internal::obc_time(const GpsEphemerisData* msg) {
  return *msg->obc_time_;
}
GpsEphemerisData::GpsEphemerisData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gps_position_ecef_(arena),
  gps_velocity_ecef_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.GpsEphemerisData)
}
GpsEphemerisData::GpsEphemerisData(const GpsEphemerisData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gps_position_ecef_(from.gps_position_ecef_),
      gps_velocity_ecef_(from.gps_velocity_ecef_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obc_time()) {
    obc_time_ = new ::antaris_api_peer_to_peer::OBC_time(*from.obc_time_);
  } else {
    obc_time_ = nullptr;
  }
  ::memcpy(&gps_sys_time_, &from.gps_sys_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_validity_flag_pos_vel_) -
    reinterpret_cast<char*>(&gps_sys_time_)) + sizeof(gps_validity_flag_pos_vel_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.GpsEphemerisData)
}

inline void GpsEphemerisData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obc_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gps_validity_flag_pos_vel_) -
    reinterpret_cast<char*>(&obc_time_)) + sizeof(gps_validity_flag_pos_vel_));
}

GpsEphemerisData::~GpsEphemerisData() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.GpsEphemerisData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GpsEphemerisData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete obc_time_;
}

void GpsEphemerisData::ArenaDtor(void* object) {
  GpsEphemerisData* _this = reinterpret_cast< GpsEphemerisData* >(object);
  (void)_this;
}
void GpsEphemerisData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpsEphemerisData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpsEphemerisData::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.GpsEphemerisData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gps_position_ecef_.Clear();
  gps_velocity_ecef_.Clear();
  if (GetArenaForAllocation() == nullptr && obc_time_ != nullptr) {
    delete obc_time_;
  }
  obc_time_ = nullptr;
  ::memset(&gps_sys_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_validity_flag_pos_vel_) -
      reinterpret_cast<char*>(&gps_sys_time_)) + sizeof(gps_validity_flag_pos_vel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpsEphemerisData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gps_fix_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          gps_fix_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gps_sys_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          gps_sys_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .antaris_api_peer_to_peer.OBC_time obc_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_obc_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 gps_position_ecef = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gps_position_ecef(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_gps_position_ecef(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 gps_velocity_ecef = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gps_velocity_ecef(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_gps_velocity_ecef(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gps_validity_flag_pos_vel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          gps_validity_flag_pos_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GpsEphemerisData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.GpsEphemerisData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gps_fix_time = 1;
  if (this->_internal_gps_fix_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_gps_fix_time(), target);
  }

  // int64 gps_sys_time = 2;
  if (this->_internal_gps_sys_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_gps_sys_time(), target);
  }

  // .antaris_api_peer_to_peer.OBC_time obc_time = 3;
  if (this->_internal_has_obc_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::obc_time(this), target, stream);
  }

  // repeated int32 gps_position_ecef = 4;
  {
    int byte_size = _gps_position_ecef_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_gps_position_ecef(), byte_size, target);
    }
  }

  // repeated int32 gps_velocity_ecef = 5;
  {
    int byte_size = _gps_velocity_ecef_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_gps_velocity_ecef(), byte_size, target);
    }
  }

  // int32 gps_validity_flag_pos_vel = 6;
  if (this->_internal_gps_validity_flag_pos_vel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_gps_validity_flag_pos_vel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.GpsEphemerisData)
  return target;
}

size_t GpsEphemerisData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.GpsEphemerisData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gps_position_ecef = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gps_position_ecef_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gps_position_ecef_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 gps_velocity_ecef = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gps_velocity_ecef_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gps_velocity_ecef_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .antaris_api_peer_to_peer.OBC_time obc_time = 3;
  if (this->_internal_has_obc_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obc_time_);
  }

  // int64 gps_sys_time = 2;
  if (this->_internal_gps_sys_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gps_sys_time());
  }

  // int32 gps_fix_time = 1;
  if (this->_internal_gps_fix_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gps_fix_time());
  }

  // int32 gps_validity_flag_pos_vel = 6;
  if (this->_internal_gps_validity_flag_pos_vel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gps_validity_flag_pos_vel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpsEphemerisData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GpsEphemerisData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpsEphemerisData::GetClassData() const { return &_class_data_; }

void GpsEphemerisData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GpsEphemerisData *>(to)->MergeFrom(
      static_cast<const GpsEphemerisData &>(from));
}


void GpsEphemerisData::MergeFrom(const GpsEphemerisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.GpsEphemerisData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gps_position_ecef_.MergeFrom(from.gps_position_ecef_);
  gps_velocity_ecef_.MergeFrom(from.gps_velocity_ecef_);
  if (from._internal_has_obc_time()) {
    _internal_mutable_obc_time()->::antaris_api_peer_to_peer::OBC_time::MergeFrom(from._internal_obc_time());
  }
  if (from._internal_gps_sys_time() != 0) {
    _internal_set_gps_sys_time(from._internal_gps_sys_time());
  }
  if (from._internal_gps_fix_time() != 0) {
    _internal_set_gps_fix_time(from._internal_gps_fix_time());
  }
  if (from._internal_gps_validity_flag_pos_vel() != 0) {
    _internal_set_gps_validity_flag_pos_vel(from._internal_gps_validity_flag_pos_vel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpsEphemerisData::CopyFrom(const GpsEphemerisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.GpsEphemerisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsEphemerisData::IsInitialized() const {
  return true;
}

void GpsEphemerisData::InternalSwap(GpsEphemerisData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gps_position_ecef_.InternalSwap(&other->gps_position_ecef_);
  gps_velocity_ecef_.InternalSwap(&other->gps_velocity_ecef_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpsEphemerisData, gps_validity_flag_pos_vel_)
      + sizeof(GpsEphemerisData::gps_validity_flag_pos_vel_)
      - PROTOBUF_FIELD_OFFSET(GpsEphemerisData, obc_time_)>(
          reinterpret_cast<char*>(&obc_time_),
          reinterpret_cast<char*>(&other->obc_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpsEphemerisData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[25]);
}

// ===================================================================

class AdcsEphemerisData::_Internal {
 public:
};

AdcsEphemerisData::AdcsEphemerisData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.AdcsEphemerisData)
}
AdcsEphemerisData::AdcsEphemerisData(const AdcsEphemerisData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&orbit_time_, &from.orbit_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&validity_flags_) -
    reinterpret_cast<char*>(&orbit_time_)) + sizeof(validity_flags_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.AdcsEphemerisData)
}

inline void AdcsEphemerisData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&orbit_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&validity_flags_) -
    reinterpret_cast<char*>(&orbit_time_)) + sizeof(validity_flags_));
}

AdcsEphemerisData::~AdcsEphemerisData() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.AdcsEphemerisData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AdcsEphemerisData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdcsEphemerisData::ArenaDtor(void* object) {
  AdcsEphemerisData* _this = reinterpret_cast< AdcsEphemerisData* >(object);
  (void)_this;
}
void AdcsEphemerisData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdcsEphemerisData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdcsEphemerisData::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.AdcsEphemerisData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&orbit_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validity_flags_) -
      reinterpret_cast<char*>(&orbit_time_)) + sizeof(validity_flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdcsEphemerisData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double orbit_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          orbit_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double eci_position_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          eci_position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double eci_position_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          eci_position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double eci_position_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          eci_position_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double eci_velocity_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          eci_velocity_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double eci_velocity_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          eci_velocity_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double eci_velocity_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          eci_velocity_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ecef_position_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          ecef_position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ecef_position_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          ecef_position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ecef_position_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          ecef_position_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ecef_velocity_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          ecef_velocity_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ecef_velocity_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          ecef_velocity_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ecef_velocity_z = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          ecef_velocity_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ang_rate_x = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          ang_rate_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ang_rate_y = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          ang_rate_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ang_rate_z = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          ang_rate_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double att_quat_1 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          att_quat_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double att_quat_2 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          att_quat_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double att_quat_3 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          att_quat_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double att_quat_4 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          att_quat_4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float latitude = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float longitude = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float altitude = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float nadir_vector_x = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          nadir_vector_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float nadir_vector_y = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          nadir_vector_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float nadir_vector_z = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          nadir_vector_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float gd_nadir_vector_x = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          gd_nadir_vector_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float gd_nadir_vector_y = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          gd_nadir_vector_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float gd_nadir_vector_z = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          gd_nadir_vector_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float beta_angle = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          beta_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 validity_flags = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          validity_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdcsEphemerisData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.AdcsEphemerisData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double orbit_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_orbit_time = this->_internal_orbit_time();
  uint64_t raw_orbit_time;
  memcpy(&raw_orbit_time, &tmp_orbit_time, sizeof(tmp_orbit_time));
  if (raw_orbit_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_orbit_time(), target);
  }

  // double eci_position_x = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_position_x = this->_internal_eci_position_x();
  uint64_t raw_eci_position_x;
  memcpy(&raw_eci_position_x, &tmp_eci_position_x, sizeof(tmp_eci_position_x));
  if (raw_eci_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_eci_position_x(), target);
  }

  // double eci_position_y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_position_y = this->_internal_eci_position_y();
  uint64_t raw_eci_position_y;
  memcpy(&raw_eci_position_y, &tmp_eci_position_y, sizeof(tmp_eci_position_y));
  if (raw_eci_position_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_eci_position_y(), target);
  }

  // double eci_position_z = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_position_z = this->_internal_eci_position_z();
  uint64_t raw_eci_position_z;
  memcpy(&raw_eci_position_z, &tmp_eci_position_z, sizeof(tmp_eci_position_z));
  if (raw_eci_position_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_eci_position_z(), target);
  }

  // double eci_velocity_x = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_velocity_x = this->_internal_eci_velocity_x();
  uint64_t raw_eci_velocity_x;
  memcpy(&raw_eci_velocity_x, &tmp_eci_velocity_x, sizeof(tmp_eci_velocity_x));
  if (raw_eci_velocity_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_eci_velocity_x(), target);
  }

  // double eci_velocity_y = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_velocity_y = this->_internal_eci_velocity_y();
  uint64_t raw_eci_velocity_y;
  memcpy(&raw_eci_velocity_y, &tmp_eci_velocity_y, sizeof(tmp_eci_velocity_y));
  if (raw_eci_velocity_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_eci_velocity_y(), target);
  }

  // double eci_velocity_z = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_velocity_z = this->_internal_eci_velocity_z();
  uint64_t raw_eci_velocity_z;
  memcpy(&raw_eci_velocity_z, &tmp_eci_velocity_z, sizeof(tmp_eci_velocity_z));
  if (raw_eci_velocity_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_eci_velocity_z(), target);
  }

  // double ecef_position_x = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_position_x = this->_internal_ecef_position_x();
  uint64_t raw_ecef_position_x;
  memcpy(&raw_ecef_position_x, &tmp_ecef_position_x, sizeof(tmp_ecef_position_x));
  if (raw_ecef_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_ecef_position_x(), target);
  }

  // double ecef_position_y = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_position_y = this->_internal_ecef_position_y();
  uint64_t raw_ecef_position_y;
  memcpy(&raw_ecef_position_y, &tmp_ecef_position_y, sizeof(tmp_ecef_position_y));
  if (raw_ecef_position_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_ecef_position_y(), target);
  }

  // double ecef_position_z = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_position_z = this->_internal_ecef_position_z();
  uint64_t raw_ecef_position_z;
  memcpy(&raw_ecef_position_z, &tmp_ecef_position_z, sizeof(tmp_ecef_position_z));
  if (raw_ecef_position_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_ecef_position_z(), target);
  }

  // double ecef_velocity_x = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_velocity_x = this->_internal_ecef_velocity_x();
  uint64_t raw_ecef_velocity_x;
  memcpy(&raw_ecef_velocity_x, &tmp_ecef_velocity_x, sizeof(tmp_ecef_velocity_x));
  if (raw_ecef_velocity_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_ecef_velocity_x(), target);
  }

  // double ecef_velocity_y = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_velocity_y = this->_internal_ecef_velocity_y();
  uint64_t raw_ecef_velocity_y;
  memcpy(&raw_ecef_velocity_y, &tmp_ecef_velocity_y, sizeof(tmp_ecef_velocity_y));
  if (raw_ecef_velocity_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_ecef_velocity_y(), target);
  }

  // double ecef_velocity_z = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_velocity_z = this->_internal_ecef_velocity_z();
  uint64_t raw_ecef_velocity_z;
  memcpy(&raw_ecef_velocity_z, &tmp_ecef_velocity_z, sizeof(tmp_ecef_velocity_z));
  if (raw_ecef_velocity_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_ecef_velocity_z(), target);
  }

  // double ang_rate_x = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ang_rate_x = this->_internal_ang_rate_x();
  uint64_t raw_ang_rate_x;
  memcpy(&raw_ang_rate_x, &tmp_ang_rate_x, sizeof(tmp_ang_rate_x));
  if (raw_ang_rate_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_ang_rate_x(), target);
  }

  // double ang_rate_y = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ang_rate_y = this->_internal_ang_rate_y();
  uint64_t raw_ang_rate_y;
  memcpy(&raw_ang_rate_y, &tmp_ang_rate_y, sizeof(tmp_ang_rate_y));
  if (raw_ang_rate_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_ang_rate_y(), target);
  }

  // double ang_rate_z = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ang_rate_z = this->_internal_ang_rate_z();
  uint64_t raw_ang_rate_z;
  memcpy(&raw_ang_rate_z, &tmp_ang_rate_z, sizeof(tmp_ang_rate_z));
  if (raw_ang_rate_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_ang_rate_z(), target);
  }

  // double att_quat_1 = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_1 = this->_internal_att_quat_1();
  uint64_t raw_att_quat_1;
  memcpy(&raw_att_quat_1, &tmp_att_quat_1, sizeof(tmp_att_quat_1));
  if (raw_att_quat_1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_att_quat_1(), target);
  }

  // double att_quat_2 = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_2 = this->_internal_att_quat_2();
  uint64_t raw_att_quat_2;
  memcpy(&raw_att_quat_2, &tmp_att_quat_2, sizeof(tmp_att_quat_2));
  if (raw_att_quat_2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_att_quat_2(), target);
  }

  // double att_quat_3 = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_3 = this->_internal_att_quat_3();
  uint64_t raw_att_quat_3;
  memcpy(&raw_att_quat_3, &tmp_att_quat_3, sizeof(tmp_att_quat_3));
  if (raw_att_quat_3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_att_quat_3(), target);
  }

  // double att_quat_4 = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_4 = this->_internal_att_quat_4();
  uint64_t raw_att_quat_4;
  memcpy(&raw_att_quat_4, &tmp_att_quat_4, sizeof(tmp_att_quat_4));
  if (raw_att_quat_4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_att_quat_4(), target);
  }

  // float latitude = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_latitude(), target);
  }

  // float longitude = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_longitude(), target);
  }

  // float altitude = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_altitude(), target);
  }

  // float nadir_vector_x = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nadir_vector_x = this->_internal_nadir_vector_x();
  uint32_t raw_nadir_vector_x;
  memcpy(&raw_nadir_vector_x, &tmp_nadir_vector_x, sizeof(tmp_nadir_vector_x));
  if (raw_nadir_vector_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_nadir_vector_x(), target);
  }

  // float nadir_vector_y = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nadir_vector_y = this->_internal_nadir_vector_y();
  uint32_t raw_nadir_vector_y;
  memcpy(&raw_nadir_vector_y, &tmp_nadir_vector_y, sizeof(tmp_nadir_vector_y));
  if (raw_nadir_vector_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_nadir_vector_y(), target);
  }

  // float nadir_vector_z = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nadir_vector_z = this->_internal_nadir_vector_z();
  uint32_t raw_nadir_vector_z;
  memcpy(&raw_nadir_vector_z, &tmp_nadir_vector_z, sizeof(tmp_nadir_vector_z));
  if (raw_nadir_vector_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(28, this->_internal_nadir_vector_z(), target);
  }

  // float gd_nadir_vector_x = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gd_nadir_vector_x = this->_internal_gd_nadir_vector_x();
  uint32_t raw_gd_nadir_vector_x;
  memcpy(&raw_gd_nadir_vector_x, &tmp_gd_nadir_vector_x, sizeof(tmp_gd_nadir_vector_x));
  if (raw_gd_nadir_vector_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_gd_nadir_vector_x(), target);
  }

  // float gd_nadir_vector_y = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gd_nadir_vector_y = this->_internal_gd_nadir_vector_y();
  uint32_t raw_gd_nadir_vector_y;
  memcpy(&raw_gd_nadir_vector_y, &tmp_gd_nadir_vector_y, sizeof(tmp_gd_nadir_vector_y));
  if (raw_gd_nadir_vector_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_gd_nadir_vector_y(), target);
  }

  // float gd_nadir_vector_z = 31;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gd_nadir_vector_z = this->_internal_gd_nadir_vector_z();
  uint32_t raw_gd_nadir_vector_z;
  memcpy(&raw_gd_nadir_vector_z, &tmp_gd_nadir_vector_z, sizeof(tmp_gd_nadir_vector_z));
  if (raw_gd_nadir_vector_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_gd_nadir_vector_z(), target);
  }

  // float beta_angle = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_beta_angle = this->_internal_beta_angle();
  uint32_t raw_beta_angle;
  memcpy(&raw_beta_angle, &tmp_beta_angle, sizeof(tmp_beta_angle));
  if (raw_beta_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_beta_angle(), target);
  }

  // int32 validity_flags = 33;
  if (this->_internal_validity_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_validity_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.AdcsEphemerisData)
  return target;
}

size_t AdcsEphemerisData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.AdcsEphemerisData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double orbit_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_orbit_time = this->_internal_orbit_time();
  uint64_t raw_orbit_time;
  memcpy(&raw_orbit_time, &tmp_orbit_time, sizeof(tmp_orbit_time));
  if (raw_orbit_time != 0) {
    total_size += 1 + 8;
  }

  // double eci_position_x = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_position_x = this->_internal_eci_position_x();
  uint64_t raw_eci_position_x;
  memcpy(&raw_eci_position_x, &tmp_eci_position_x, sizeof(tmp_eci_position_x));
  if (raw_eci_position_x != 0) {
    total_size += 1 + 8;
  }

  // double eci_position_y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_position_y = this->_internal_eci_position_y();
  uint64_t raw_eci_position_y;
  memcpy(&raw_eci_position_y, &tmp_eci_position_y, sizeof(tmp_eci_position_y));
  if (raw_eci_position_y != 0) {
    total_size += 1 + 8;
  }

  // double eci_position_z = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_position_z = this->_internal_eci_position_z();
  uint64_t raw_eci_position_z;
  memcpy(&raw_eci_position_z, &tmp_eci_position_z, sizeof(tmp_eci_position_z));
  if (raw_eci_position_z != 0) {
    total_size += 1 + 8;
  }

  // double eci_velocity_x = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_velocity_x = this->_internal_eci_velocity_x();
  uint64_t raw_eci_velocity_x;
  memcpy(&raw_eci_velocity_x, &tmp_eci_velocity_x, sizeof(tmp_eci_velocity_x));
  if (raw_eci_velocity_x != 0) {
    total_size += 1 + 8;
  }

  // double eci_velocity_y = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_velocity_y = this->_internal_eci_velocity_y();
  uint64_t raw_eci_velocity_y;
  memcpy(&raw_eci_velocity_y, &tmp_eci_velocity_y, sizeof(tmp_eci_velocity_y));
  if (raw_eci_velocity_y != 0) {
    total_size += 1 + 8;
  }

  // double eci_velocity_z = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_velocity_z = this->_internal_eci_velocity_z();
  uint64_t raw_eci_velocity_z;
  memcpy(&raw_eci_velocity_z, &tmp_eci_velocity_z, sizeof(tmp_eci_velocity_z));
  if (raw_eci_velocity_z != 0) {
    total_size += 1 + 8;
  }

  // double ecef_position_x = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_position_x = this->_internal_ecef_position_x();
  uint64_t raw_ecef_position_x;
  memcpy(&raw_ecef_position_x, &tmp_ecef_position_x, sizeof(tmp_ecef_position_x));
  if (raw_ecef_position_x != 0) {
    total_size += 1 + 8;
  }

  // double ecef_position_y = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_position_y = this->_internal_ecef_position_y();
  uint64_t raw_ecef_position_y;
  memcpy(&raw_ecef_position_y, &tmp_ecef_position_y, sizeof(tmp_ecef_position_y));
  if (raw_ecef_position_y != 0) {
    total_size += 1 + 8;
  }

  // double ecef_position_z = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_position_z = this->_internal_ecef_position_z();
  uint64_t raw_ecef_position_z;
  memcpy(&raw_ecef_position_z, &tmp_ecef_position_z, sizeof(tmp_ecef_position_z));
  if (raw_ecef_position_z != 0) {
    total_size += 1 + 8;
  }

  // double ecef_velocity_x = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_velocity_x = this->_internal_ecef_velocity_x();
  uint64_t raw_ecef_velocity_x;
  memcpy(&raw_ecef_velocity_x, &tmp_ecef_velocity_x, sizeof(tmp_ecef_velocity_x));
  if (raw_ecef_velocity_x != 0) {
    total_size += 1 + 8;
  }

  // double ecef_velocity_y = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_velocity_y = this->_internal_ecef_velocity_y();
  uint64_t raw_ecef_velocity_y;
  memcpy(&raw_ecef_velocity_y, &tmp_ecef_velocity_y, sizeof(tmp_ecef_velocity_y));
  if (raw_ecef_velocity_y != 0) {
    total_size += 1 + 8;
  }

  // double ecef_velocity_z = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_velocity_z = this->_internal_ecef_velocity_z();
  uint64_t raw_ecef_velocity_z;
  memcpy(&raw_ecef_velocity_z, &tmp_ecef_velocity_z, sizeof(tmp_ecef_velocity_z));
  if (raw_ecef_velocity_z != 0) {
    total_size += 1 + 8;
  }

  // double ang_rate_x = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ang_rate_x = this->_internal_ang_rate_x();
  uint64_t raw_ang_rate_x;
  memcpy(&raw_ang_rate_x, &tmp_ang_rate_x, sizeof(tmp_ang_rate_x));
  if (raw_ang_rate_x != 0) {
    total_size += 1 + 8;
  }

  // double ang_rate_y = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ang_rate_y = this->_internal_ang_rate_y();
  uint64_t raw_ang_rate_y;
  memcpy(&raw_ang_rate_y, &tmp_ang_rate_y, sizeof(tmp_ang_rate_y));
  if (raw_ang_rate_y != 0) {
    total_size += 1 + 8;
  }

  // double ang_rate_z = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ang_rate_z = this->_internal_ang_rate_z();
  uint64_t raw_ang_rate_z;
  memcpy(&raw_ang_rate_z, &tmp_ang_rate_z, sizeof(tmp_ang_rate_z));
  if (raw_ang_rate_z != 0) {
    total_size += 2 + 8;
  }

  // double att_quat_1 = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_1 = this->_internal_att_quat_1();
  uint64_t raw_att_quat_1;
  memcpy(&raw_att_quat_1, &tmp_att_quat_1, sizeof(tmp_att_quat_1));
  if (raw_att_quat_1 != 0) {
    total_size += 2 + 8;
  }

  // double att_quat_2 = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_2 = this->_internal_att_quat_2();
  uint64_t raw_att_quat_2;
  memcpy(&raw_att_quat_2, &tmp_att_quat_2, sizeof(tmp_att_quat_2));
  if (raw_att_quat_2 != 0) {
    total_size += 2 + 8;
  }

  // double att_quat_3 = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_3 = this->_internal_att_quat_3();
  uint64_t raw_att_quat_3;
  memcpy(&raw_att_quat_3, &tmp_att_quat_3, sizeof(tmp_att_quat_3));
  if (raw_att_quat_3 != 0) {
    total_size += 2 + 8;
  }

  // double att_quat_4 = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_4 = this->_internal_att_quat_4();
  uint64_t raw_att_quat_4;
  memcpy(&raw_att_quat_4, &tmp_att_quat_4, sizeof(tmp_att_quat_4));
  if (raw_att_quat_4 != 0) {
    total_size += 2 + 8;
  }

  // float latitude = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 2 + 4;
  }

  // float longitude = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 2 + 4;
  }

  // float altitude = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 2 + 4;
  }

  // float nadir_vector_x = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nadir_vector_x = this->_internal_nadir_vector_x();
  uint32_t raw_nadir_vector_x;
  memcpy(&raw_nadir_vector_x, &tmp_nadir_vector_x, sizeof(tmp_nadir_vector_x));
  if (raw_nadir_vector_x != 0) {
    total_size += 2 + 4;
  }

  // float nadir_vector_y = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nadir_vector_y = this->_internal_nadir_vector_y();
  uint32_t raw_nadir_vector_y;
  memcpy(&raw_nadir_vector_y, &tmp_nadir_vector_y, sizeof(tmp_nadir_vector_y));
  if (raw_nadir_vector_y != 0) {
    total_size += 2 + 4;
  }

  // float nadir_vector_z = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nadir_vector_z = this->_internal_nadir_vector_z();
  uint32_t raw_nadir_vector_z;
  memcpy(&raw_nadir_vector_z, &tmp_nadir_vector_z, sizeof(tmp_nadir_vector_z));
  if (raw_nadir_vector_z != 0) {
    total_size += 2 + 4;
  }

  // float gd_nadir_vector_x = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gd_nadir_vector_x = this->_internal_gd_nadir_vector_x();
  uint32_t raw_gd_nadir_vector_x;
  memcpy(&raw_gd_nadir_vector_x, &tmp_gd_nadir_vector_x, sizeof(tmp_gd_nadir_vector_x));
  if (raw_gd_nadir_vector_x != 0) {
    total_size += 2 + 4;
  }

  // float gd_nadir_vector_y = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gd_nadir_vector_y = this->_internal_gd_nadir_vector_y();
  uint32_t raw_gd_nadir_vector_y;
  memcpy(&raw_gd_nadir_vector_y, &tmp_gd_nadir_vector_y, sizeof(tmp_gd_nadir_vector_y));
  if (raw_gd_nadir_vector_y != 0) {
    total_size += 2 + 4;
  }

  // float gd_nadir_vector_z = 31;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gd_nadir_vector_z = this->_internal_gd_nadir_vector_z();
  uint32_t raw_gd_nadir_vector_z;
  memcpy(&raw_gd_nadir_vector_z, &tmp_gd_nadir_vector_z, sizeof(tmp_gd_nadir_vector_z));
  if (raw_gd_nadir_vector_z != 0) {
    total_size += 2 + 4;
  }

  // float beta_angle = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_beta_angle = this->_internal_beta_angle();
  uint32_t raw_beta_angle;
  memcpy(&raw_beta_angle, &tmp_beta_angle, sizeof(tmp_beta_angle));
  if (raw_beta_angle != 0) {
    total_size += 2 + 4;
  }

  // int32 validity_flags = 33;
  if (this->_internal_validity_flags() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_validity_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdcsEphemerisData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AdcsEphemerisData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdcsEphemerisData::GetClassData() const { return &_class_data_; }

void AdcsEphemerisData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AdcsEphemerisData *>(to)->MergeFrom(
      static_cast<const AdcsEphemerisData &>(from));
}


void AdcsEphemerisData::MergeFrom(const AdcsEphemerisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.AdcsEphemerisData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_orbit_time = from._internal_orbit_time();
  uint64_t raw_orbit_time;
  memcpy(&raw_orbit_time, &tmp_orbit_time, sizeof(tmp_orbit_time));
  if (raw_orbit_time != 0) {
    _internal_set_orbit_time(from._internal_orbit_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_position_x = from._internal_eci_position_x();
  uint64_t raw_eci_position_x;
  memcpy(&raw_eci_position_x, &tmp_eci_position_x, sizeof(tmp_eci_position_x));
  if (raw_eci_position_x != 0) {
    _internal_set_eci_position_x(from._internal_eci_position_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_position_y = from._internal_eci_position_y();
  uint64_t raw_eci_position_y;
  memcpy(&raw_eci_position_y, &tmp_eci_position_y, sizeof(tmp_eci_position_y));
  if (raw_eci_position_y != 0) {
    _internal_set_eci_position_y(from._internal_eci_position_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_position_z = from._internal_eci_position_z();
  uint64_t raw_eci_position_z;
  memcpy(&raw_eci_position_z, &tmp_eci_position_z, sizeof(tmp_eci_position_z));
  if (raw_eci_position_z != 0) {
    _internal_set_eci_position_z(from._internal_eci_position_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_velocity_x = from._internal_eci_velocity_x();
  uint64_t raw_eci_velocity_x;
  memcpy(&raw_eci_velocity_x, &tmp_eci_velocity_x, sizeof(tmp_eci_velocity_x));
  if (raw_eci_velocity_x != 0) {
    _internal_set_eci_velocity_x(from._internal_eci_velocity_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_velocity_y = from._internal_eci_velocity_y();
  uint64_t raw_eci_velocity_y;
  memcpy(&raw_eci_velocity_y, &tmp_eci_velocity_y, sizeof(tmp_eci_velocity_y));
  if (raw_eci_velocity_y != 0) {
    _internal_set_eci_velocity_y(from._internal_eci_velocity_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eci_velocity_z = from._internal_eci_velocity_z();
  uint64_t raw_eci_velocity_z;
  memcpy(&raw_eci_velocity_z, &tmp_eci_velocity_z, sizeof(tmp_eci_velocity_z));
  if (raw_eci_velocity_z != 0) {
    _internal_set_eci_velocity_z(from._internal_eci_velocity_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_position_x = from._internal_ecef_position_x();
  uint64_t raw_ecef_position_x;
  memcpy(&raw_ecef_position_x, &tmp_ecef_position_x, sizeof(tmp_ecef_position_x));
  if (raw_ecef_position_x != 0) {
    _internal_set_ecef_position_x(from._internal_ecef_position_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_position_y = from._internal_ecef_position_y();
  uint64_t raw_ecef_position_y;
  memcpy(&raw_ecef_position_y, &tmp_ecef_position_y, sizeof(tmp_ecef_position_y));
  if (raw_ecef_position_y != 0) {
    _internal_set_ecef_position_y(from._internal_ecef_position_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_position_z = from._internal_ecef_position_z();
  uint64_t raw_ecef_position_z;
  memcpy(&raw_ecef_position_z, &tmp_ecef_position_z, sizeof(tmp_ecef_position_z));
  if (raw_ecef_position_z != 0) {
    _internal_set_ecef_position_z(from._internal_ecef_position_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_velocity_x = from._internal_ecef_velocity_x();
  uint64_t raw_ecef_velocity_x;
  memcpy(&raw_ecef_velocity_x, &tmp_ecef_velocity_x, sizeof(tmp_ecef_velocity_x));
  if (raw_ecef_velocity_x != 0) {
    _internal_set_ecef_velocity_x(from._internal_ecef_velocity_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_velocity_y = from._internal_ecef_velocity_y();
  uint64_t raw_ecef_velocity_y;
  memcpy(&raw_ecef_velocity_y, &tmp_ecef_velocity_y, sizeof(tmp_ecef_velocity_y));
  if (raw_ecef_velocity_y != 0) {
    _internal_set_ecef_velocity_y(from._internal_ecef_velocity_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ecef_velocity_z = from._internal_ecef_velocity_z();
  uint64_t raw_ecef_velocity_z;
  memcpy(&raw_ecef_velocity_z, &tmp_ecef_velocity_z, sizeof(tmp_ecef_velocity_z));
  if (raw_ecef_velocity_z != 0) {
    _internal_set_ecef_velocity_z(from._internal_ecef_velocity_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ang_rate_x = from._internal_ang_rate_x();
  uint64_t raw_ang_rate_x;
  memcpy(&raw_ang_rate_x, &tmp_ang_rate_x, sizeof(tmp_ang_rate_x));
  if (raw_ang_rate_x != 0) {
    _internal_set_ang_rate_x(from._internal_ang_rate_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ang_rate_y = from._internal_ang_rate_y();
  uint64_t raw_ang_rate_y;
  memcpy(&raw_ang_rate_y, &tmp_ang_rate_y, sizeof(tmp_ang_rate_y));
  if (raw_ang_rate_y != 0) {
    _internal_set_ang_rate_y(from._internal_ang_rate_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ang_rate_z = from._internal_ang_rate_z();
  uint64_t raw_ang_rate_z;
  memcpy(&raw_ang_rate_z, &tmp_ang_rate_z, sizeof(tmp_ang_rate_z));
  if (raw_ang_rate_z != 0) {
    _internal_set_ang_rate_z(from._internal_ang_rate_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_1 = from._internal_att_quat_1();
  uint64_t raw_att_quat_1;
  memcpy(&raw_att_quat_1, &tmp_att_quat_1, sizeof(tmp_att_quat_1));
  if (raw_att_quat_1 != 0) {
    _internal_set_att_quat_1(from._internal_att_quat_1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_2 = from._internal_att_quat_2();
  uint64_t raw_att_quat_2;
  memcpy(&raw_att_quat_2, &tmp_att_quat_2, sizeof(tmp_att_quat_2));
  if (raw_att_quat_2 != 0) {
    _internal_set_att_quat_2(from._internal_att_quat_2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_3 = from._internal_att_quat_3();
  uint64_t raw_att_quat_3;
  memcpy(&raw_att_quat_3, &tmp_att_quat_3, sizeof(tmp_att_quat_3));
  if (raw_att_quat_3 != 0) {
    _internal_set_att_quat_3(from._internal_att_quat_3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_att_quat_4 = from._internal_att_quat_4();
  uint64_t raw_att_quat_4;
  memcpy(&raw_att_quat_4, &tmp_att_quat_4, sizeof(tmp_att_quat_4));
  if (raw_att_quat_4 != 0) {
    _internal_set_att_quat_4(from._internal_att_quat_4());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = from._internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = from._internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = from._internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _internal_set_altitude(from._internal_altitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nadir_vector_x = from._internal_nadir_vector_x();
  uint32_t raw_nadir_vector_x;
  memcpy(&raw_nadir_vector_x, &tmp_nadir_vector_x, sizeof(tmp_nadir_vector_x));
  if (raw_nadir_vector_x != 0) {
    _internal_set_nadir_vector_x(from._internal_nadir_vector_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nadir_vector_y = from._internal_nadir_vector_y();
  uint32_t raw_nadir_vector_y;
  memcpy(&raw_nadir_vector_y, &tmp_nadir_vector_y, sizeof(tmp_nadir_vector_y));
  if (raw_nadir_vector_y != 0) {
    _internal_set_nadir_vector_y(from._internal_nadir_vector_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_nadir_vector_z = from._internal_nadir_vector_z();
  uint32_t raw_nadir_vector_z;
  memcpy(&raw_nadir_vector_z, &tmp_nadir_vector_z, sizeof(tmp_nadir_vector_z));
  if (raw_nadir_vector_z != 0) {
    _internal_set_nadir_vector_z(from._internal_nadir_vector_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gd_nadir_vector_x = from._internal_gd_nadir_vector_x();
  uint32_t raw_gd_nadir_vector_x;
  memcpy(&raw_gd_nadir_vector_x, &tmp_gd_nadir_vector_x, sizeof(tmp_gd_nadir_vector_x));
  if (raw_gd_nadir_vector_x != 0) {
    _internal_set_gd_nadir_vector_x(from._internal_gd_nadir_vector_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gd_nadir_vector_y = from._internal_gd_nadir_vector_y();
  uint32_t raw_gd_nadir_vector_y;
  memcpy(&raw_gd_nadir_vector_y, &tmp_gd_nadir_vector_y, sizeof(tmp_gd_nadir_vector_y));
  if (raw_gd_nadir_vector_y != 0) {
    _internal_set_gd_nadir_vector_y(from._internal_gd_nadir_vector_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_gd_nadir_vector_z = from._internal_gd_nadir_vector_z();
  uint32_t raw_gd_nadir_vector_z;
  memcpy(&raw_gd_nadir_vector_z, &tmp_gd_nadir_vector_z, sizeof(tmp_gd_nadir_vector_z));
  if (raw_gd_nadir_vector_z != 0) {
    _internal_set_gd_nadir_vector_z(from._internal_gd_nadir_vector_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_beta_angle = from._internal_beta_angle();
  uint32_t raw_beta_angle;
  memcpy(&raw_beta_angle, &tmp_beta_angle, sizeof(tmp_beta_angle));
  if (raw_beta_angle != 0) {
    _internal_set_beta_angle(from._internal_beta_angle());
  }
  if (from._internal_validity_flags() != 0) {
    _internal_set_validity_flags(from._internal_validity_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdcsEphemerisData::CopyFrom(const AdcsEphemerisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.AdcsEphemerisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdcsEphemerisData::IsInitialized() const {
  return true;
}

void AdcsEphemerisData::InternalSwap(AdcsEphemerisData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdcsEphemerisData, validity_flags_)
      + sizeof(AdcsEphemerisData::validity_flags_)
      - PROTOBUF_FIELD_OFFSET(AdcsEphemerisData, orbit_time_)>(
          reinterpret_cast<char*>(&orbit_time_),
          reinterpret_cast<char*>(&other->orbit_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdcsEphemerisData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[26]);
}

// ===================================================================

class GnssEphData::_Internal {
 public:
  static const ::antaris_api_peer_to_peer::AdcsEphemerisData& adcs_eph_data(const GnssEphData* msg);
  static const ::antaris_api_peer_to_peer::GpsEphemerisData& gps_eph_data(const GnssEphData* msg);
};

const ::antaris_api_peer_to_peer::AdcsEphemerisData&
GnssEphData::_Internal::adcs_eph_data(const GnssEphData* msg) {
  return *msg->adcs_eph_data_;
}
const ::antaris_api_peer_to_peer::GpsEphemerisData&
GnssEphData::_Internal::gps_eph_data(const GnssEphData* msg) {
  return *msg->gps_eph_data_;
}
GnssEphData::GnssEphData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.GnssEphData)
}
GnssEphData::GnssEphData(const GnssEphData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_adcs_eph_data()) {
    adcs_eph_data_ = new ::antaris_api_peer_to_peer::AdcsEphemerisData(*from.adcs_eph_data_);
  } else {
    adcs_eph_data_ = nullptr;
  }
  if (from._internal_has_gps_eph_data()) {
    gps_eph_data_ = new ::antaris_api_peer_to_peer::GpsEphemerisData(*from.gps_eph_data_);
  } else {
    gps_eph_data_ = nullptr;
  }
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_timeout_flag_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(gps_timeout_flag_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.GnssEphData)
}

inline void GnssEphData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&adcs_eph_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gps_timeout_flag_) -
    reinterpret_cast<char*>(&adcs_eph_data_)) + sizeof(gps_timeout_flag_));
}

GnssEphData::~GnssEphData() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.GnssEphData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GnssEphData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete adcs_eph_data_;
  if (this != internal_default_instance()) delete gps_eph_data_;
}

void GnssEphData::ArenaDtor(void* object) {
  GnssEphData* _this = reinterpret_cast< GnssEphData* >(object);
  (void)_this;
}
void GnssEphData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GnssEphData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GnssEphData::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.GnssEphData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && adcs_eph_data_ != nullptr) {
    delete adcs_eph_data_;
  }
  adcs_eph_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && gps_eph_data_ != nullptr) {
    delete gps_eph_data_;
  }
  gps_eph_data_ = nullptr;
  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_timeout_flag_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(gps_timeout_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GnssEphData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .antaris_api_peer_to_peer.AdcsEphemerisData adcs_eph_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_adcs_eph_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .antaris_api_peer_to_peer.GpsEphemerisData gps_eph_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_eph_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 adcs_timeout_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          adcs_timeout_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gps_timeout_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          gps_timeout_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GnssEphData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.GnssEphData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // .antaris_api_peer_to_peer.AdcsEphemerisData adcs_eph_data = 2;
  if (this->_internal_has_adcs_eph_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::adcs_eph_data(this), target, stream);
  }

  // .antaris_api_peer_to_peer.GpsEphemerisData gps_eph_data = 3;
  if (this->_internal_has_gps_eph_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gps_eph_data(this), target, stream);
  }

  // int32 adcs_timeout_flag = 4;
  if (this->_internal_adcs_timeout_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_adcs_timeout_flag(), target);
  }

  // int32 gps_timeout_flag = 5;
  if (this->_internal_gps_timeout_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_gps_timeout_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.GnssEphData)
  return target;
}

size_t GnssEphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.GnssEphData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .antaris_api_peer_to_peer.AdcsEphemerisData adcs_eph_data = 2;
  if (this->_internal_has_adcs_eph_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adcs_eph_data_);
  }

  // .antaris_api_peer_to_peer.GpsEphemerisData gps_eph_data = 3;
  if (this->_internal_has_gps_eph_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_eph_data_);
  }

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 adcs_timeout_flag = 4;
  if (this->_internal_adcs_timeout_flag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_adcs_timeout_flag());
  }

  // int32 gps_timeout_flag = 5;
  if (this->_internal_gps_timeout_flag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gps_timeout_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GnssEphData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GnssEphData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GnssEphData::GetClassData() const { return &_class_data_; }

void GnssEphData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GnssEphData *>(to)->MergeFrom(
      static_cast<const GnssEphData &>(from));
}


void GnssEphData::MergeFrom(const GnssEphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.GnssEphData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_adcs_eph_data()) {
    _internal_mutable_adcs_eph_data()->::antaris_api_peer_to_peer::AdcsEphemerisData::MergeFrom(from._internal_adcs_eph_data());
  }
  if (from._internal_has_gps_eph_data()) {
    _internal_mutable_gps_eph_data()->::antaris_api_peer_to_peer::GpsEphemerisData::MergeFrom(from._internal_gps_eph_data());
  }
  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_adcs_timeout_flag() != 0) {
    _internal_set_adcs_timeout_flag(from._internal_adcs_timeout_flag());
  }
  if (from._internal_gps_timeout_flag() != 0) {
    _internal_set_gps_timeout_flag(from._internal_gps_timeout_flag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GnssEphData::CopyFrom(const GnssEphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.GnssEphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssEphData::IsInitialized() const {
  return true;
}

void GnssEphData::InternalSwap(GnssEphData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GnssEphData, gps_timeout_flag_)
      + sizeof(GnssEphData::gps_timeout_flag_)
      - PROTOBUF_FIELD_OFFSET(GnssEphData, adcs_eph_data_)>(
          reinterpret_cast<char*>(&adcs_eph_data_),
          reinterpret_cast<char*>(&other->adcs_eph_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GnssEphData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[27]);
}

// ===================================================================

class ReqGetEpsVoltageStopReq::_Internal {
 public:
};

ReqGetEpsVoltageStopReq::ReqGetEpsVoltageStopReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqGetEpsVoltageStopReq)
}
ReqGetEpsVoltageStopReq::ReqGetEpsVoltageStopReq(const ReqGetEpsVoltageStopReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  correlation_id_ = from.correlation_id_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqGetEpsVoltageStopReq)
}

inline void ReqGetEpsVoltageStopReq::SharedCtor() {
correlation_id_ = 0;
}

ReqGetEpsVoltageStopReq::~ReqGetEpsVoltageStopReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqGetEpsVoltageStopReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqGetEpsVoltageStopReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqGetEpsVoltageStopReq::ArenaDtor(void* object) {
  ReqGetEpsVoltageStopReq* _this = reinterpret_cast< ReqGetEpsVoltageStopReq* >(object);
  (void)_this;
}
void ReqGetEpsVoltageStopReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetEpsVoltageStopReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetEpsVoltageStopReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqGetEpsVoltageStopReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlation_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetEpsVoltageStopReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqGetEpsVoltageStopReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqGetEpsVoltageStopReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqGetEpsVoltageStopReq)
  return target;
}

size_t ReqGetEpsVoltageStopReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqGetEpsVoltageStopReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqGetEpsVoltageStopReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqGetEpsVoltageStopReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqGetEpsVoltageStopReq::GetClassData() const { return &_class_data_; }

void ReqGetEpsVoltageStopReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqGetEpsVoltageStopReq *>(to)->MergeFrom(
      static_cast<const ReqGetEpsVoltageStopReq &>(from));
}


void ReqGetEpsVoltageStopReq::MergeFrom(const ReqGetEpsVoltageStopReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqGetEpsVoltageStopReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqGetEpsVoltageStopReq::CopyFrom(const ReqGetEpsVoltageStopReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqGetEpsVoltageStopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetEpsVoltageStopReq::IsInitialized() const {
  return true;
}

void ReqGetEpsVoltageStopReq::InternalSwap(ReqGetEpsVoltageStopReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(correlation_id_, other->correlation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetEpsVoltageStopReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[28]);
}

// ===================================================================

class RespGetEpsVoltageStopReq::_Internal {
 public:
};

RespGetEpsVoltageStopReq::RespGetEpsVoltageStopReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespGetEpsVoltageStopReq)
}
RespGetEpsVoltageStopReq::RespGetEpsVoltageStopReq(const RespGetEpsVoltageStopReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespGetEpsVoltageStopReq)
}

inline void RespGetEpsVoltageStopReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespGetEpsVoltageStopReq::~RespGetEpsVoltageStopReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespGetEpsVoltageStopReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespGetEpsVoltageStopReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespGetEpsVoltageStopReq::ArenaDtor(void* object) {
  RespGetEpsVoltageStopReq* _this = reinterpret_cast< RespGetEpsVoltageStopReq* >(object);
  (void)_this;
}
void RespGetEpsVoltageStopReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespGetEpsVoltageStopReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespGetEpsVoltageStopReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespGetEpsVoltageStopReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespGetEpsVoltageStopReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespGetEpsVoltageStopReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespGetEpsVoltageStopReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespGetEpsVoltageStopReq)
  return target;
}

size_t RespGetEpsVoltageStopReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespGetEpsVoltageStopReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespGetEpsVoltageStopReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespGetEpsVoltageStopReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespGetEpsVoltageStopReq::GetClassData() const { return &_class_data_; }

void RespGetEpsVoltageStopReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespGetEpsVoltageStopReq *>(to)->MergeFrom(
      static_cast<const RespGetEpsVoltageStopReq &>(from));
}


void RespGetEpsVoltageStopReq::MergeFrom(const RespGetEpsVoltageStopReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespGetEpsVoltageStopReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespGetEpsVoltageStopReq::CopyFrom(const RespGetEpsVoltageStopReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespGetEpsVoltageStopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespGetEpsVoltageStopReq::IsInitialized() const {
  return true;
}

void RespGetEpsVoltageStopReq::InternalSwap(RespGetEpsVoltageStopReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespGetEpsVoltageStopReq, req_status_)
      + sizeof(RespGetEpsVoltageStopReq::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespGetEpsVoltageStopReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespGetEpsVoltageStopReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[29]);
}

// ===================================================================

class ReqGetEpsVoltageStartReq::_Internal {
 public:
};

ReqGetEpsVoltageStartReq::ReqGetEpsVoltageStartReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.ReqGetEpsVoltageStartReq)
}
ReqGetEpsVoltageStartReq::ReqGetEpsVoltageStartReq(const ReqGetEpsVoltageStartReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&periodicity_in_ms_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(periodicity_in_ms_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.ReqGetEpsVoltageStartReq)
}

inline void ReqGetEpsVoltageStartReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&periodicity_in_ms_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(periodicity_in_ms_));
}

ReqGetEpsVoltageStartReq::~ReqGetEpsVoltageStartReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.ReqGetEpsVoltageStartReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReqGetEpsVoltageStartReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqGetEpsVoltageStartReq::ArenaDtor(void* object) {
  ReqGetEpsVoltageStartReq* _this = reinterpret_cast< ReqGetEpsVoltageStartReq* >(object);
  (void)_this;
}
void ReqGetEpsVoltageStartReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqGetEpsVoltageStartReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqGetEpsVoltageStartReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.ReqGetEpsVoltageStartReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&periodicity_in_ms_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(periodicity_in_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqGetEpsVoltageStartReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 periodicity_in_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          periodicity_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReqGetEpsVoltageStartReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.ReqGetEpsVoltageStartReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 periodicity_in_ms = 2;
  if (this->_internal_periodicity_in_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_periodicity_in_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.ReqGetEpsVoltageStartReq)
  return target;
}

size_t ReqGetEpsVoltageStartReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.ReqGetEpsVoltageStartReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 periodicity_in_ms = 2;
  if (this->_internal_periodicity_in_ms() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_periodicity_in_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReqGetEpsVoltageStartReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReqGetEpsVoltageStartReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReqGetEpsVoltageStartReq::GetClassData() const { return &_class_data_; }

void ReqGetEpsVoltageStartReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReqGetEpsVoltageStartReq *>(to)->MergeFrom(
      static_cast<const ReqGetEpsVoltageStartReq &>(from));
}


void ReqGetEpsVoltageStartReq::MergeFrom(const ReqGetEpsVoltageStartReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.ReqGetEpsVoltageStartReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_periodicity_in_ms() != 0) {
    _internal_set_periodicity_in_ms(from._internal_periodicity_in_ms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReqGetEpsVoltageStartReq::CopyFrom(const ReqGetEpsVoltageStartReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.ReqGetEpsVoltageStartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetEpsVoltageStartReq::IsInitialized() const {
  return true;
}

void ReqGetEpsVoltageStartReq::InternalSwap(ReqGetEpsVoltageStartReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqGetEpsVoltageStartReq, periodicity_in_ms_)
      + sizeof(ReqGetEpsVoltageStartReq::periodicity_in_ms_)
      - PROTOBUF_FIELD_OFFSET(ReqGetEpsVoltageStartReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqGetEpsVoltageStartReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[30]);
}

// ===================================================================

class RespGetEpsVoltageStartReq::_Internal {
 public:
};

RespGetEpsVoltageStartReq::RespGetEpsVoltageStartReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespGetEpsVoltageStartReq)
}
RespGetEpsVoltageStartReq::RespGetEpsVoltageStartReq(const RespGetEpsVoltageStartReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespGetEpsVoltageStartReq)
}

inline void RespGetEpsVoltageStartReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespGetEpsVoltageStartReq::~RespGetEpsVoltageStartReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespGetEpsVoltageStartReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespGetEpsVoltageStartReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespGetEpsVoltageStartReq::ArenaDtor(void* object) {
  RespGetEpsVoltageStartReq* _this = reinterpret_cast< RespGetEpsVoltageStartReq* >(object);
  (void)_this;
}
void RespGetEpsVoltageStartReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespGetEpsVoltageStartReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespGetEpsVoltageStartReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespGetEpsVoltageStartReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespGetEpsVoltageStartReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespGetEpsVoltageStartReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespGetEpsVoltageStartReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespGetEpsVoltageStartReq)
  return target;
}

size_t RespGetEpsVoltageStartReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespGetEpsVoltageStartReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespGetEpsVoltageStartReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespGetEpsVoltageStartReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespGetEpsVoltageStartReq::GetClassData() const { return &_class_data_; }

void RespGetEpsVoltageStartReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespGetEpsVoltageStartReq *>(to)->MergeFrom(
      static_cast<const RespGetEpsVoltageStartReq &>(from));
}


void RespGetEpsVoltageStartReq::MergeFrom(const RespGetEpsVoltageStartReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespGetEpsVoltageStartReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespGetEpsVoltageStartReq::CopyFrom(const RespGetEpsVoltageStartReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespGetEpsVoltageStartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespGetEpsVoltageStartReq::IsInitialized() const {
  return true;
}

void RespGetEpsVoltageStartReq::InternalSwap(RespGetEpsVoltageStartReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespGetEpsVoltageStartReq, req_status_)
      + sizeof(RespGetEpsVoltageStartReq::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespGetEpsVoltageStartReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespGetEpsVoltageStartReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[31]);
}

// ===================================================================

class GetEpsVoltage::_Internal {
 public:
};

GetEpsVoltage::GetEpsVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.GetEpsVoltage)
}
GetEpsVoltage::GetEpsVoltage(const GetEpsVoltage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eps_voltage_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(eps_voltage_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.GetEpsVoltage)
}

inline void GetEpsVoltage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eps_voltage_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(eps_voltage_));
}

GetEpsVoltage::~GetEpsVoltage() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.GetEpsVoltage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetEpsVoltage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetEpsVoltage::ArenaDtor(void* object) {
  GetEpsVoltage* _this = reinterpret_cast< GetEpsVoltage* >(object);
  (void)_this;
}
void GetEpsVoltage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetEpsVoltage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetEpsVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.GetEpsVoltage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eps_voltage_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(eps_voltage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEpsVoltage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float eps_voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          eps_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetEpsVoltage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.GetEpsVoltage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // float eps_voltage = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eps_voltage = this->_internal_eps_voltage();
  uint32_t raw_eps_voltage;
  memcpy(&raw_eps_voltage, &tmp_eps_voltage, sizeof(tmp_eps_voltage));
  if (raw_eps_voltage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_eps_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.GetEpsVoltage)
  return target;
}

size_t GetEpsVoltage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.GetEpsVoltage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // float eps_voltage = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eps_voltage = this->_internal_eps_voltage();
  uint32_t raw_eps_voltage;
  memcpy(&raw_eps_voltage, &tmp_eps_voltage, sizeof(tmp_eps_voltage));
  if (raw_eps_voltage != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEpsVoltage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetEpsVoltage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEpsVoltage::GetClassData() const { return &_class_data_; }

void GetEpsVoltage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetEpsVoltage *>(to)->MergeFrom(
      static_cast<const GetEpsVoltage &>(from));
}


void GetEpsVoltage::MergeFrom(const GetEpsVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.GetEpsVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_eps_voltage = from._internal_eps_voltage();
  uint32_t raw_eps_voltage;
  memcpy(&raw_eps_voltage, &tmp_eps_voltage, sizeof(tmp_eps_voltage));
  if (raw_eps_voltage != 0) {
    _internal_set_eps_voltage(from._internal_eps_voltage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEpsVoltage::CopyFrom(const GetEpsVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.GetEpsVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEpsVoltage::IsInitialized() const {
  return true;
}

void GetEpsVoltage::InternalSwap(GetEpsVoltage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetEpsVoltage, eps_voltage_)
      + sizeof(GetEpsVoltage::eps_voltage_)
      - PROTOBUF_FIELD_OFFSET(GetEpsVoltage, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEpsVoltage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[32]);
}

// ===================================================================

class StartSesThermMgmntReq::_Internal {
 public:
};

StartSesThermMgmntReq::StartSesThermMgmntReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.StartSesThermMgmntReq)
}
StartSesThermMgmntReq::StartSesThermMgmntReq(const StartSesThermMgmntReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&upper_threshold_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(upper_threshold_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.StartSesThermMgmntReq)
}

inline void StartSesThermMgmntReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&upper_threshold_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(upper_threshold_));
}

StartSesThermMgmntReq::~StartSesThermMgmntReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.StartSesThermMgmntReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartSesThermMgmntReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartSesThermMgmntReq::ArenaDtor(void* object) {
  StartSesThermMgmntReq* _this = reinterpret_cast< StartSesThermMgmntReq* >(object);
  (void)_this;
}
void StartSesThermMgmntReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartSesThermMgmntReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartSesThermMgmntReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.StartSesThermMgmntReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upper_threshold_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(upper_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartSesThermMgmntReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hardware_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          hardware_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lower_threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          lower_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 upper_threshold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          upper_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartSesThermMgmntReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.StartSesThermMgmntReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 hardware_id = 2;
  if (this->_internal_hardware_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hardware_id(), target);
  }

  // int32 duration = 3;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_duration(), target);
  }

  // int32 lower_threshold = 4;
  if (this->_internal_lower_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lower_threshold(), target);
  }

  // int32 upper_threshold = 5;
  if (this->_internal_upper_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_upper_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.StartSesThermMgmntReq)
  return target;
}

size_t StartSesThermMgmntReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.StartSesThermMgmntReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 hardware_id = 2;
  if (this->_internal_hardware_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hardware_id());
  }

  // int32 duration = 3;
  if (this->_internal_duration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_duration());
  }

  // int32 lower_threshold = 4;
  if (this->_internal_lower_threshold() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lower_threshold());
  }

  // int32 upper_threshold = 5;
  if (this->_internal_upper_threshold() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_upper_threshold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartSesThermMgmntReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartSesThermMgmntReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartSesThermMgmntReq::GetClassData() const { return &_class_data_; }

void StartSesThermMgmntReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartSesThermMgmntReq *>(to)->MergeFrom(
      static_cast<const StartSesThermMgmntReq &>(from));
}


void StartSesThermMgmntReq::MergeFrom(const StartSesThermMgmntReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.StartSesThermMgmntReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_hardware_id() != 0) {
    _internal_set_hardware_id(from._internal_hardware_id());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from._internal_lower_threshold() != 0) {
    _internal_set_lower_threshold(from._internal_lower_threshold());
  }
  if (from._internal_upper_threshold() != 0) {
    _internal_set_upper_threshold(from._internal_upper_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartSesThermMgmntReq::CopyFrom(const StartSesThermMgmntReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.StartSesThermMgmntReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSesThermMgmntReq::IsInitialized() const {
  return true;
}

void StartSesThermMgmntReq::InternalSwap(StartSesThermMgmntReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartSesThermMgmntReq, upper_threshold_)
      + sizeof(StartSesThermMgmntReq::upper_threshold_)
      - PROTOBUF_FIELD_OFFSET(StartSesThermMgmntReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartSesThermMgmntReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[33]);
}

// ===================================================================

class RespStartSesThermMgmntReq::_Internal {
 public:
};

RespStartSesThermMgmntReq::RespStartSesThermMgmntReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespStartSesThermMgmntReq)
}
RespStartSesThermMgmntReq::RespStartSesThermMgmntReq(const RespStartSesThermMgmntReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespStartSesThermMgmntReq)
}

inline void RespStartSesThermMgmntReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespStartSesThermMgmntReq::~RespStartSesThermMgmntReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespStartSesThermMgmntReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespStartSesThermMgmntReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespStartSesThermMgmntReq::ArenaDtor(void* object) {
  RespStartSesThermMgmntReq* _this = reinterpret_cast< RespStartSesThermMgmntReq* >(object);
  (void)_this;
}
void RespStartSesThermMgmntReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespStartSesThermMgmntReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespStartSesThermMgmntReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespStartSesThermMgmntReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespStartSesThermMgmntReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespStartSesThermMgmntReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespStartSesThermMgmntReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespStartSesThermMgmntReq)
  return target;
}

size_t RespStartSesThermMgmntReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespStartSesThermMgmntReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespStartSesThermMgmntReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespStartSesThermMgmntReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespStartSesThermMgmntReq::GetClassData() const { return &_class_data_; }

void RespStartSesThermMgmntReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespStartSesThermMgmntReq *>(to)->MergeFrom(
      static_cast<const RespStartSesThermMgmntReq &>(from));
}


void RespStartSesThermMgmntReq::MergeFrom(const RespStartSesThermMgmntReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespStartSesThermMgmntReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespStartSesThermMgmntReq::CopyFrom(const RespStartSesThermMgmntReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespStartSesThermMgmntReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespStartSesThermMgmntReq::IsInitialized() const {
  return true;
}

void RespStartSesThermMgmntReq::InternalSwap(RespStartSesThermMgmntReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespStartSesThermMgmntReq, req_status_)
      + sizeof(RespStartSesThermMgmntReq::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespStartSesThermMgmntReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespStartSesThermMgmntReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[34]);
}

// ===================================================================

class StopSesThermMgmntReq::_Internal {
 public:
};

StopSesThermMgmntReq::StopSesThermMgmntReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.StopSesThermMgmntReq)
}
StopSesThermMgmntReq::StopSesThermMgmntReq(const StopSesThermMgmntReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hardware_id_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(hardware_id_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.StopSesThermMgmntReq)
}

inline void StopSesThermMgmntReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hardware_id_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(hardware_id_));
}

StopSesThermMgmntReq::~StopSesThermMgmntReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.StopSesThermMgmntReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopSesThermMgmntReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopSesThermMgmntReq::ArenaDtor(void* object) {
  StopSesThermMgmntReq* _this = reinterpret_cast< StopSesThermMgmntReq* >(object);
  (void)_this;
}
void StopSesThermMgmntReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopSesThermMgmntReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopSesThermMgmntReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.StopSesThermMgmntReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hardware_id_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(hardware_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopSesThermMgmntReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hardware_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          hardware_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopSesThermMgmntReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.StopSesThermMgmntReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 hardware_id = 2;
  if (this->_internal_hardware_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hardware_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.StopSesThermMgmntReq)
  return target;
}

size_t StopSesThermMgmntReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.StopSesThermMgmntReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 hardware_id = 2;
  if (this->_internal_hardware_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hardware_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopSesThermMgmntReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopSesThermMgmntReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopSesThermMgmntReq::GetClassData() const { return &_class_data_; }

void StopSesThermMgmntReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopSesThermMgmntReq *>(to)->MergeFrom(
      static_cast<const StopSesThermMgmntReq &>(from));
}


void StopSesThermMgmntReq::MergeFrom(const StopSesThermMgmntReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.StopSesThermMgmntReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_hardware_id() != 0) {
    _internal_set_hardware_id(from._internal_hardware_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopSesThermMgmntReq::CopyFrom(const StopSesThermMgmntReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.StopSesThermMgmntReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSesThermMgmntReq::IsInitialized() const {
  return true;
}

void StopSesThermMgmntReq::InternalSwap(StopSesThermMgmntReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopSesThermMgmntReq, hardware_id_)
      + sizeof(StopSesThermMgmntReq::hardware_id_)
      - PROTOBUF_FIELD_OFFSET(StopSesThermMgmntReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSesThermMgmntReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[35]);
}

// ===================================================================

class RespStopSesThermMgmntReq::_Internal {
 public:
};

RespStopSesThermMgmntReq::RespStopSesThermMgmntReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespStopSesThermMgmntReq)
}
RespStopSesThermMgmntReq::RespStopSesThermMgmntReq(const RespStopSesThermMgmntReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespStopSesThermMgmntReq)
}

inline void RespStopSesThermMgmntReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
}

RespStopSesThermMgmntReq::~RespStopSesThermMgmntReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespStopSesThermMgmntReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespStopSesThermMgmntReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespStopSesThermMgmntReq::ArenaDtor(void* object) {
  RespStopSesThermMgmntReq* _this = reinterpret_cast< RespStopSesThermMgmntReq* >(object);
  (void)_this;
}
void RespStopSesThermMgmntReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespStopSesThermMgmntReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespStopSesThermMgmntReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespStopSesThermMgmntReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(req_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespStopSesThermMgmntReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          req_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespStopSesThermMgmntReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespStopSesThermMgmntReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_req_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespStopSesThermMgmntReq)
  return target;
}

size_t RespStopSesThermMgmntReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespStopSesThermMgmntReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 req_status = 2;
  if (this->_internal_req_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespStopSesThermMgmntReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespStopSesThermMgmntReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespStopSesThermMgmntReq::GetClassData() const { return &_class_data_; }

void RespStopSesThermMgmntReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespStopSesThermMgmntReq *>(to)->MergeFrom(
      static_cast<const RespStopSesThermMgmntReq &>(from));
}


void RespStopSesThermMgmntReq::MergeFrom(const RespStopSesThermMgmntReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespStopSesThermMgmntReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_req_status() != 0) {
    _internal_set_req_status(from._internal_req_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespStopSesThermMgmntReq::CopyFrom(const RespStopSesThermMgmntReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespStopSesThermMgmntReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespStopSesThermMgmntReq::IsInitialized() const {
  return true;
}

void RespStopSesThermMgmntReq::InternalSwap(RespStopSesThermMgmntReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespStopSesThermMgmntReq, req_status_)
      + sizeof(RespStopSesThermMgmntReq::req_status_)
      - PROTOBUF_FIELD_OFFSET(RespStopSesThermMgmntReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespStopSesThermMgmntReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[36]);
}

// ===================================================================

class SesTempReq::_Internal {
 public:
};

SesTempReq::SesTempReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.SesTempReq)
}
SesTempReq::SesTempReq(const SesTempReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hardware_id_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(hardware_id_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.SesTempReq)
}

inline void SesTempReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hardware_id_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(hardware_id_));
}

SesTempReq::~SesTempReq() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.SesTempReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SesTempReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SesTempReq::ArenaDtor(void* object) {
  SesTempReq* _this = reinterpret_cast< SesTempReq* >(object);
  (void)_this;
}
void SesTempReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SesTempReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SesTempReq::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.SesTempReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hardware_id_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(hardware_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SesTempReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hardware_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          hardware_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SesTempReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.SesTempReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 hardware_id = 2;
  if (this->_internal_hardware_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hardware_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.SesTempReq)
  return target;
}

size_t SesTempReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.SesTempReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 hardware_id = 2;
  if (this->_internal_hardware_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hardware_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SesTempReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SesTempReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SesTempReq::GetClassData() const { return &_class_data_; }

void SesTempReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SesTempReq *>(to)->MergeFrom(
      static_cast<const SesTempReq &>(from));
}


void SesTempReq::MergeFrom(const SesTempReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.SesTempReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_hardware_id() != 0) {
    _internal_set_hardware_id(from._internal_hardware_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SesTempReq::CopyFrom(const SesTempReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.SesTempReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SesTempReq::IsInitialized() const {
  return true;
}

void SesTempReq::InternalSwap(SesTempReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SesTempReq, hardware_id_)
      + sizeof(SesTempReq::hardware_id_)
      - PROTOBUF_FIELD_OFFSET(SesTempReq, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SesTempReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[37]);
}

// ===================================================================

class RespSesTempReqParams::_Internal {
 public:
};

RespSesTempReqParams::RespSesTempReqParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.RespSesTempReqParams)
}
RespSesTempReqParams::RespSesTempReqParams(const RespSesTempReqParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&heater_pwr_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(heater_pwr_status_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.RespSesTempReqParams)
}

inline void RespSesTempReqParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heater_pwr_status_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(heater_pwr_status_));
}

RespSesTempReqParams::~RespSesTempReqParams() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.RespSesTempReqParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RespSesTempReqParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RespSesTempReqParams::ArenaDtor(void* object) {
  RespSesTempReqParams* _this = reinterpret_cast< RespSesTempReqParams* >(object);
  (void)_this;
}
void RespSesTempReqParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RespSesTempReqParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RespSesTempReqParams::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.RespSesTempReqParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heater_pwr_status_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(heater_pwr_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RespSesTempReqParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 temp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 heater_pwr_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          heater_pwr_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RespSesTempReqParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.RespSesTempReqParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 temp = 2;
  if (this->_internal_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_temp(), target);
  }

  // int32 heater_pwr_status = 3;
  if (this->_internal_heater_pwr_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_heater_pwr_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.RespSesTempReqParams)
  return target;
}

size_t RespSesTempReqParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.RespSesTempReqParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 temp = 2;
  if (this->_internal_temp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_temp());
  }

  // int32 heater_pwr_status = 3;
  if (this->_internal_heater_pwr_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_heater_pwr_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RespSesTempReqParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RespSesTempReqParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RespSesTempReqParams::GetClassData() const { return &_class_data_; }

void RespSesTempReqParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RespSesTempReqParams *>(to)->MergeFrom(
      static_cast<const RespSesTempReqParams &>(from));
}


void RespSesTempReqParams::MergeFrom(const RespSesTempReqParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.RespSesTempReqParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_temp() != 0) {
    _internal_set_temp(from._internal_temp());
  }
  if (from._internal_heater_pwr_status() != 0) {
    _internal_set_heater_pwr_status(from._internal_heater_pwr_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RespSesTempReqParams::CopyFrom(const RespSesTempReqParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.RespSesTempReqParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespSesTempReqParams::IsInitialized() const {
  return true;
}

void RespSesTempReqParams::InternalSwap(RespSesTempReqParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RespSesTempReqParams, heater_pwr_status_)
      + sizeof(RespSesTempReqParams::heater_pwr_status_)
      - PROTOBUF_FIELD_OFFSET(RespSesTempReqParams, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RespSesTempReqParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[38]);
}

// ===================================================================

class SesThermalStatusNtf::_Internal {
 public:
};

SesThermalStatusNtf::SesThermalStatusNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.SesThermalStatusNtf)
}
SesThermalStatusNtf::SesThermalStatusNtf(const SesThermalStatusNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&correlation_id_, &from.correlation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&temp_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(temp_));
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.SesThermalStatusNtf)
}

inline void SesThermalStatusNtf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&correlation_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&temp_) -
    reinterpret_cast<char*>(&correlation_id_)) + sizeof(temp_));
}

SesThermalStatusNtf::~SesThermalStatusNtf() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.SesThermalStatusNtf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SesThermalStatusNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SesThermalStatusNtf::ArenaDtor(void* object) {
  SesThermalStatusNtf* _this = reinterpret_cast< SesThermalStatusNtf* >(object);
  (void)_this;
}
void SesThermalStatusNtf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SesThermalStatusNtf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SesThermalStatusNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.SesThermalStatusNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&correlation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temp_) -
      reinterpret_cast<char*>(&correlation_id_)) + sizeof(temp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SesThermalStatusNtf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 heater_pwr_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          heater_pwr_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 temp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SesThermalStatusNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.SesThermalStatusNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  // int32 heater_pwr_status = 2;
  if (this->_internal_heater_pwr_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_heater_pwr_status(), target);
  }

  // int32 temp = 3;
  if (this->_internal_temp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_temp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.SesThermalStatusNtf)
  return target;
}

size_t SesThermalStatusNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.SesThermalStatusNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  // int32 heater_pwr_status = 2;
  if (this->_internal_heater_pwr_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_heater_pwr_status());
  }

  // int32 temp = 3;
  if (this->_internal_temp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_temp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SesThermalStatusNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SesThermalStatusNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SesThermalStatusNtf::GetClassData() const { return &_class_data_; }

void SesThermalStatusNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SesThermalStatusNtf *>(to)->MergeFrom(
      static_cast<const SesThermalStatusNtf &>(from));
}


void SesThermalStatusNtf::MergeFrom(const SesThermalStatusNtf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.SesThermalStatusNtf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from._internal_heater_pwr_status() != 0) {
    _internal_set_heater_pwr_status(from._internal_heater_pwr_status());
  }
  if (from._internal_temp() != 0) {
    _internal_set_temp(from._internal_temp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SesThermalStatusNtf::CopyFrom(const SesThermalStatusNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.SesThermalStatusNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SesThermalStatusNtf::IsInitialized() const {
  return true;
}

void SesThermalStatusNtf::InternalSwap(SesThermalStatusNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SesThermalStatusNtf, temp_)
      + sizeof(SesThermalStatusNtf::temp_)
      - PROTOBUF_FIELD_OFFSET(SesThermalStatusNtf, correlation_id_)>(
          reinterpret_cast<char*>(&correlation_id_),
          reinterpret_cast<char*>(&other->correlation_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SesThermalStatusNtf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[39]);
}

// ===================================================================

class AntarisCorrelationId::_Internal {
 public:
};

AntarisCorrelationId::AntarisCorrelationId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.AntarisCorrelationId)
}
AntarisCorrelationId::AntarisCorrelationId(const AntarisCorrelationId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  correlation_id_ = from.correlation_id_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.AntarisCorrelationId)
}

inline void AntarisCorrelationId::SharedCtor() {
correlation_id_ = 0;
}

AntarisCorrelationId::~AntarisCorrelationId() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.AntarisCorrelationId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AntarisCorrelationId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntarisCorrelationId::ArenaDtor(void* object) {
  AntarisCorrelationId* _this = reinterpret_cast< AntarisCorrelationId* >(object);
  (void)_this;
}
void AntarisCorrelationId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AntarisCorrelationId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AntarisCorrelationId::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.AntarisCorrelationId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  correlation_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntarisCorrelationId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 correlation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          correlation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AntarisCorrelationId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.AntarisCorrelationId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_correlation_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.AntarisCorrelationId)
  return target;
}

size_t AntarisCorrelationId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.AntarisCorrelationId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 correlation_id = 1;
  if (this->_internal_correlation_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_correlation_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntarisCorrelationId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AntarisCorrelationId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntarisCorrelationId::GetClassData() const { return &_class_data_; }

void AntarisCorrelationId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AntarisCorrelationId *>(to)->MergeFrom(
      static_cast<const AntarisCorrelationId &>(from));
}


void AntarisCorrelationId::MergeFrom(const AntarisCorrelationId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.AntarisCorrelationId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_correlation_id() != 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntarisCorrelationId::CopyFrom(const AntarisCorrelationId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.AntarisCorrelationId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntarisCorrelationId::IsInitialized() const {
  return true;
}

void AntarisCorrelationId::InternalSwap(AntarisCorrelationId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(correlation_id_, other->correlation_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AntarisCorrelationId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[40]);
}

// ===================================================================

class AntarisReturnType::_Internal {
 public:
};

AntarisReturnType::AntarisReturnType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:antaris_api_peer_to_peer.AntarisReturnType)
}
AntarisReturnType::AntarisReturnType(const AntarisReturnType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  return_code_ = from.return_code_;
  // @@protoc_insertion_point(copy_constructor:antaris_api_peer_to_peer.AntarisReturnType)
}

inline void AntarisReturnType::SharedCtor() {
return_code_ = 0;
}

AntarisReturnType::~AntarisReturnType() {
  // @@protoc_insertion_point(destructor:antaris_api_peer_to_peer.AntarisReturnType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AntarisReturnType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AntarisReturnType::ArenaDtor(void* object) {
  AntarisReturnType* _this = reinterpret_cast< AntarisReturnType* >(object);
  (void)_this;
}
void AntarisReturnType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AntarisReturnType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AntarisReturnType::Clear() {
// @@protoc_insertion_point(message_clear_start:antaris_api_peer_to_peer.AntarisReturnType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AntarisReturnType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .antaris_api_peer_to_peer.AntarisReturnCode return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_return_code(static_cast<::antaris_api_peer_to_peer::AntarisReturnCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AntarisReturnType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:antaris_api_peer_to_peer.AntarisReturnType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .antaris_api_peer_to_peer.AntarisReturnCode return_code = 1;
  if (this->_internal_return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_return_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:antaris_api_peer_to_peer.AntarisReturnType)
  return target;
}

size_t AntarisReturnType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:antaris_api_peer_to_peer.AntarisReturnType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .antaris_api_peer_to_peer.AntarisReturnCode return_code = 1;
  if (this->_internal_return_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_return_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AntarisReturnType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AntarisReturnType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AntarisReturnType::GetClassData() const { return &_class_data_; }

void AntarisReturnType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AntarisReturnType *>(to)->MergeFrom(
      static_cast<const AntarisReturnType &>(from));
}


void AntarisReturnType::MergeFrom(const AntarisReturnType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:antaris_api_peer_to_peer.AntarisReturnType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_return_code() != 0) {
    _internal_set_return_code(from._internal_return_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AntarisReturnType::CopyFrom(const AntarisReturnType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:antaris_api_peer_to_peer.AntarisReturnType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AntarisReturnType::IsInitialized() const {
  return true;
}

void AntarisReturnType::InternalSwap(AntarisReturnType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(return_code_, other->return_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AntarisReturnType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_getter, &descriptor_table_defs_2fgen_2fproto_2fantaris_5fapi_2eproto_once,
      file_level_metadata_defs_2fgen_2fproto_2fantaris_5fapi_2eproto[41]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace antaris_api_peer_to_peer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::AntarisSdkVersion* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::AntarisSdkVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::AntarisSdkVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqRegisterParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqRegisterParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqRegisterParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespRegisterParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespRegisterParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespRegisterParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespGetCurrentLocationParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespGetCurrentLocationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespGetCurrentLocationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqStageFileDownloadParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqStageFileDownloadParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqStageFileDownloadParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespStageFileDownloadParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespStageFileDownloadParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespStageFileDownloadParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespPayloadPowerControlParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespPayloadPowerControlParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespPayloadPowerControlParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespShutdownParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespShutdownParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespShutdownParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespHealthCheckParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespHealthCheckParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespHealthCheckParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::StartSequenceParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::StartSequenceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::StartSequenceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ShutdownParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ShutdownParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ShutdownParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::HealthCheckParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::HealthCheckParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::HealthCheckParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::PayloadMetricsInfo* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::PayloadMetricsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::PayloadMetricsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqPayloadMetricsParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqPayloadMetricsParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqPayloadMetricsParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::PayloadMetricsResponse* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::PayloadMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::PayloadMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::CmdSequenceDoneParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::CmdSequenceDoneParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::CmdSequenceDoneParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::PaSatOsMsg* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::PaSatOsMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::PaSatOsMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespPaSatOsMsg* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespPaSatOsMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespPaSatOsMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespGnssEphStopDataReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespGnssEphStopDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespGnssEphStopDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespGnssEphStartDataReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespGnssEphStartDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespGnssEphStartDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::OBC_time* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::OBC_time >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::OBC_time >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::GpsEphemerisData* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::GpsEphemerisData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::GpsEphemerisData >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::AdcsEphemerisData* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::AdcsEphemerisData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::AdcsEphemerisData >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::GnssEphData* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::GnssEphData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::GnssEphData >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::GetEpsVoltage* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::GetEpsVoltage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::GetEpsVoltage >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::StartSesThermMgmntReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::StartSesThermMgmntReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::StartSesThermMgmntReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespStartSesThermMgmntReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::StopSesThermMgmntReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::StopSesThermMgmntReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::StopSesThermMgmntReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespStopSesThermMgmntReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::SesTempReq* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::SesTempReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::SesTempReq >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::RespSesTempReqParams* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::RespSesTempReqParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::RespSesTempReqParams >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::SesThermalStatusNtf* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::SesThermalStatusNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::SesThermalStatusNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::AntarisCorrelationId* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::AntarisCorrelationId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::AntarisCorrelationId >(arena);
}
template<> PROTOBUF_NOINLINE ::antaris_api_peer_to_peer::AntarisReturnType* Arena::CreateMaybeMessage< ::antaris_api_peer_to_peer::AntarisReturnType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::antaris_api_peer_to_peer::AntarisReturnType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
