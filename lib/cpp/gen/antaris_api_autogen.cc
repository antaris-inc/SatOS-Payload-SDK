///////////////////////////////////////////////////////////////////////////
///
///  

///  Copyright 2022 Antaris, Inc.

///  

///  Licensed under the Apache License, Version 2.0 (the 'License');

///  you may not use this file except in compliance with the License.

///  You may obtain a copy of the License at

///  

///  http://www.apache.org/licenses/LICENSE-2.0

///  

///  Unless required by applicable law or agreed to in writing, software

///  distributed under the License is distributed on an 'AS IS' BASIS,

///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

///  See the License for the specific language governing permissions and

///  limitations under the License.

///  

///  Copyright: Copyright 2022 Antaris, Inc.

///  This is an autogenerated file. Any changes made to this file would likely be over-written at build time.

///  Generated-From: antaris_api.xml

///
///////////////////////////////////////////////////////////////////////////


#include "stdlib.h"
#include "string.h"
#include "antaris_api.h"
#include "antaris_api.pb.h"
#include "antaris_cpp_standard_includes.h"

extern "C" {

void
displayReqRegisterParams(const void *obj)
{
    ReqRegisterParams *p = (ReqRegisterParams *)obj;

    printf("ReqRegisterParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("health_check_fail_action ==>\n");
    displayUINT16((void *)&p->health_check_fail_action);

}

void
app_to_peer_ReqRegisterParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    ReqRegisterParams *src = (ReqRegisterParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::ReqRegisterParams *dst = (::antaris_api_peer_to_peer::ReqRegisterParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    UINT32 __tmp_health_check_fail_action;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_UINT16(&src->health_check_fail_action, &__tmp_health_check_fail_action); // health_check_fail_action

    dst->set_health_check_fail_action(__tmp_health_check_fail_action);


}

void
peer_to_app_ReqRegisterParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    ReqRegisterParams *dst = (ReqRegisterParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::ReqRegisterParams *src = (::antaris_api_peer_to_peer::ReqRegisterParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->health_check_fail_action = src->health_check_fail_action();

}

void
displayRespRegisterParams(const void *obj)
{
    RespRegisterParams *p = (RespRegisterParams *)obj;

    printf("RespRegisterParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("req_status ==>\n");
    displayINT32((void *)&p->req_status);
    printf("auth_token ==>\n");
    for (int i = 0; i < 256; i++) {
        displayINT8((void *)&p->auth_token[i]);
    }


}

void
app_to_peer_RespRegisterParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    RespRegisterParams *src = (RespRegisterParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::RespRegisterParams *dst = (::antaris_api_peer_to_peer::RespRegisterParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    INT32 __tmp_req_status;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_INT32(&src->req_status, &__tmp_req_status); // req_status

    dst->set_req_status(__tmp_req_status);

    dst->set_auth_token(&src->auth_token[0]);


}

void
peer_to_app_RespRegisterParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    RespRegisterParams *dst = (RespRegisterParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::RespRegisterParams *src = (::antaris_api_peer_to_peer::RespRegisterParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->req_status = src->req_status();
    size_t auth_token_length = strnlen(src->auth_token().c_str(), 256);
    if ( auth_token_length >= 256 ) {
        printf("Error:  auth_token_length should be less than 256 \n");
        return;
    }
    strncpy(&dst->auth_token[0], src->auth_token().c_str(), 256);

}

void
displayReqGetCurrentLocationParams(const void *obj)
{
    ReqGetCurrentLocationParams *p = (ReqGetCurrentLocationParams *)obj;

    printf("ReqGetCurrentLocationParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);

}

void
app_to_peer_ReqGetCurrentLocationParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    ReqGetCurrentLocationParams *src = (ReqGetCurrentLocationParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams *dst = (::antaris_api_peer_to_peer::ReqGetCurrentLocationParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);


}

void
peer_to_app_ReqGetCurrentLocationParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    ReqGetCurrentLocationParams *dst = (ReqGetCurrentLocationParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::ReqGetCurrentLocationParams *src = (::antaris_api_peer_to_peer::ReqGetCurrentLocationParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();

}

void
displayRespGetCurrentLocationParams(const void *obj)
{
    RespGetCurrentLocationParams *p = (RespGetCurrentLocationParams *)obj;

    printf("RespGetCurrentLocationParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("req_status ==>\n");
    displayINT32((void *)&p->req_status);
    printf("latitude ==>\n");
    displayDOUBLE((void *)&p->latitude);
    printf("longitude ==>\n");
    displayDOUBLE((void *)&p->longitude);
    printf("altitude ==>\n");
    displayDOUBLE((void *)&p->altitude);
    printf("sd_latitude ==>\n");
    displayFLOAT((void *)&p->sd_latitude);
    printf("sd_longitude ==>\n");
    displayFLOAT((void *)&p->sd_longitude);
    printf("sd_altitude ==>\n");
    displayFLOAT((void *)&p->sd_altitude);
    printf("determined_at ==>\n");
    displayUINT64((void *)&p->determined_at);

}

void
app_to_peer_RespGetCurrentLocationParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    RespGetCurrentLocationParams *src = (RespGetCurrentLocationParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::RespGetCurrentLocationParams *dst = (::antaris_api_peer_to_peer::RespGetCurrentLocationParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    INT32 __tmp_req_status;
    DOUBLE __tmp_latitude;
    DOUBLE __tmp_longitude;
    DOUBLE __tmp_altitude;
    FLOAT __tmp_sd_latitude;
    FLOAT __tmp_sd_longitude;
    FLOAT __tmp_sd_altitude;
    UINT64 __tmp_determined_at;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_INT32(&src->req_status, &__tmp_req_status); // req_status

    dst->set_req_status(__tmp_req_status);

    app_to_peer_DOUBLE(&src->latitude, &__tmp_latitude); // latitude

    dst->set_latitude(__tmp_latitude);

    app_to_peer_DOUBLE(&src->longitude, &__tmp_longitude); // longitude

    dst->set_longitude(__tmp_longitude);

    app_to_peer_DOUBLE(&src->altitude, &__tmp_altitude); // altitude

    dst->set_altitude(__tmp_altitude);

    app_to_peer_FLOAT(&src->sd_latitude, &__tmp_sd_latitude); // sd_latitude

    dst->set_sd_latitude(__tmp_sd_latitude);

    app_to_peer_FLOAT(&src->sd_longitude, &__tmp_sd_longitude); // sd_longitude

    dst->set_sd_longitude(__tmp_sd_longitude);

    app_to_peer_FLOAT(&src->sd_altitude, &__tmp_sd_altitude); // sd_altitude

    dst->set_sd_altitude(__tmp_sd_altitude);

    app_to_peer_UINT64(&src->determined_at, &__tmp_determined_at); // determined_at

    dst->set_determined_at(__tmp_determined_at);


}

void
peer_to_app_RespGetCurrentLocationParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    RespGetCurrentLocationParams *dst = (RespGetCurrentLocationParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::RespGetCurrentLocationParams *src = (::antaris_api_peer_to_peer::RespGetCurrentLocationParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->req_status = src->req_status();
    dst->latitude = src->latitude();
    dst->longitude = src->longitude();
    dst->altitude = src->altitude();
    dst->sd_latitude = src->sd_latitude();
    dst->sd_longitude = src->sd_longitude();
    dst->sd_altitude = src->sd_altitude();
    dst->determined_at = src->determined_at();

}

void
displayReqStageFileDownloadParams(const void *obj)
{
    ReqStageFileDownloadParams *p = (ReqStageFileDownloadParams *)obj;

    printf("ReqStageFileDownloadParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("file_path ==>\n");
    for (int i = 0; i < 256; i++) {
        displayINT8((void *)&p->file_path[i]);
    }


}

void
app_to_peer_ReqStageFileDownloadParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    ReqStageFileDownloadParams *src = (ReqStageFileDownloadParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::ReqStageFileDownloadParams *dst = (::antaris_api_peer_to_peer::ReqStageFileDownloadParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    dst->set_file_path(&src->file_path[0]);


}

void
peer_to_app_ReqStageFileDownloadParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    ReqStageFileDownloadParams *dst = (ReqStageFileDownloadParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::ReqStageFileDownloadParams *src = (::antaris_api_peer_to_peer::ReqStageFileDownloadParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    size_t file_path_length = strnlen(src->file_path().c_str(), 256);
    if ( file_path_length >= 256 ) {
        printf("Error:  file_path_length should be less than 256 \n");
        return;
    }
    strncpy(&dst->file_path[0], src->file_path().c_str(), 256);

}

void
displayRespStageFileDownloadParams(const void *obj)
{
    RespStageFileDownloadParams *p = (RespStageFileDownloadParams *)obj;

    printf("RespStageFileDownloadParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("req_status ==>\n");
    displayINT32((void *)&p->req_status);

}

void
app_to_peer_RespStageFileDownloadParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    RespStageFileDownloadParams *src = (RespStageFileDownloadParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::RespStageFileDownloadParams *dst = (::antaris_api_peer_to_peer::RespStageFileDownloadParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    INT32 __tmp_req_status;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_INT32(&src->req_status, &__tmp_req_status); // req_status

    dst->set_req_status(__tmp_req_status);


}

void
peer_to_app_RespStageFileDownloadParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    RespStageFileDownloadParams *dst = (RespStageFileDownloadParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::RespStageFileDownloadParams *src = (::antaris_api_peer_to_peer::RespStageFileDownloadParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->req_status = src->req_status();

}

void
displayReqPayloadPowerControlParams(const void *obj)
{
    ReqPayloadPowerControlParams *p = (ReqPayloadPowerControlParams *)obj;

    printf("ReqPayloadPowerControlParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("power_operation ==>\n");
    displayUINT16((void *)&p->power_operation);

}

void
app_to_peer_ReqPayloadPowerControlParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    ReqPayloadPowerControlParams *src = (ReqPayloadPowerControlParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams *dst = (::antaris_api_peer_to_peer::ReqPayloadPowerControlParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    UINT32 __tmp_power_operation;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_UINT16(&src->power_operation, &__tmp_power_operation); // power_operation

    dst->set_power_operation(__tmp_power_operation);


}

void
peer_to_app_ReqPayloadPowerControlParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    ReqPayloadPowerControlParams *dst = (ReqPayloadPowerControlParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::ReqPayloadPowerControlParams *src = (::antaris_api_peer_to_peer::ReqPayloadPowerControlParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->power_operation = src->power_operation();

}

void
displayRespPayloadPowerControlParams(const void *obj)
{
    RespPayloadPowerControlParams *p = (RespPayloadPowerControlParams *)obj;

    printf("RespPayloadPowerControlParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("req_status ==>\n");
    displayINT32((void *)&p->req_status);

}

void
app_to_peer_RespPayloadPowerControlParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    RespPayloadPowerControlParams *src = (RespPayloadPowerControlParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::RespPayloadPowerControlParams *dst = (::antaris_api_peer_to_peer::RespPayloadPowerControlParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    INT32 __tmp_req_status;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_INT32(&src->req_status, &__tmp_req_status); // req_status

    dst->set_req_status(__tmp_req_status);


}

void
peer_to_app_RespPayloadPowerControlParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    RespPayloadPowerControlParams *dst = (RespPayloadPowerControlParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::RespPayloadPowerControlParams *src = (::antaris_api_peer_to_peer::RespPayloadPowerControlParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->req_status = src->req_status();

}

void
displayRespShutdownParams(const void *obj)
{
    RespShutdownParams *p = (RespShutdownParams *)obj;

    printf("RespShutdownParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("req_status ==>\n");
    displayINT32((void *)&p->req_status);

}

void
app_to_peer_RespShutdownParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    RespShutdownParams *src = (RespShutdownParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::RespShutdownParams *dst = (::antaris_api_peer_to_peer::RespShutdownParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    INT32 __tmp_req_status;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_INT32(&src->req_status, &__tmp_req_status); // req_status

    dst->set_req_status(__tmp_req_status);


}

void
peer_to_app_RespShutdownParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    RespShutdownParams *dst = (RespShutdownParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::RespShutdownParams *src = (::antaris_api_peer_to_peer::RespShutdownParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->req_status = src->req_status();

}

void
displayRespHealthCheckParams(const void *obj)
{
    RespHealthCheckParams *p = (RespHealthCheckParams *)obj;

    printf("RespHealthCheckParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("application_state ==>\n");
    displayUINT16((void *)&p->application_state);
    printf("reqs_to_pc_in_err_cnt ==>\n");
    displayUINT16((void *)&p->reqs_to_pc_in_err_cnt);
    printf("resps_to_pc_in_err_cnt ==>\n");
    displayUINT16((void *)&p->resps_to_pc_in_err_cnt);

}

void
app_to_peer_RespHealthCheckParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    RespHealthCheckParams *src = (RespHealthCheckParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::RespHealthCheckParams *dst = (::antaris_api_peer_to_peer::RespHealthCheckParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    UINT32 __tmp_application_state;
    UINT32 __tmp_reqs_to_pc_in_err_cnt;
    UINT32 __tmp_resps_to_pc_in_err_cnt;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_UINT16(&src->application_state, &__tmp_application_state); // application_state

    dst->set_application_state(__tmp_application_state);

    app_to_peer_UINT16(&src->reqs_to_pc_in_err_cnt, &__tmp_reqs_to_pc_in_err_cnt); // reqs_to_pc_in_err_cnt

    dst->set_reqs_to_pc_in_err_cnt(__tmp_reqs_to_pc_in_err_cnt);

    app_to_peer_UINT16(&src->resps_to_pc_in_err_cnt, &__tmp_resps_to_pc_in_err_cnt); // resps_to_pc_in_err_cnt

    dst->set_resps_to_pc_in_err_cnt(__tmp_resps_to_pc_in_err_cnt);


}

void
peer_to_app_RespHealthCheckParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    RespHealthCheckParams *dst = (RespHealthCheckParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::RespHealthCheckParams *src = (::antaris_api_peer_to_peer::RespHealthCheckParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->application_state = src->application_state();
    dst->reqs_to_pc_in_err_cnt = src->reqs_to_pc_in_err_cnt();
    dst->resps_to_pc_in_err_cnt = src->resps_to_pc_in_err_cnt();

}

void
displayStartSequenceParams(const void *obj)
{
    StartSequenceParams *p = (StartSequenceParams *)obj;

    printf("StartSequenceParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("sequence_id ==>\n");
    for (int i = 0; i < 16; i++) {
        displayINT8((void *)&p->sequence_id[i]);
    }

    printf("sequence_params ==>\n");
    for (int i = 0; i < 64; i++) {
        displayINT8((void *)&p->sequence_params[i]);
    }

    printf("scheduled_deadline ==>\n");
    displayUINT64((void *)&p->scheduled_deadline);

}

void
app_to_peer_StartSequenceParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    StartSequenceParams *src = (StartSequenceParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::StartSequenceParams *dst = (::antaris_api_peer_to_peer::StartSequenceParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    UINT64 __tmp_scheduled_deadline;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    dst->set_sequence_id(&src->sequence_id[0]);

    dst->set_sequence_params(&src->sequence_params[0]);

    app_to_peer_UINT64(&src->scheduled_deadline, &__tmp_scheduled_deadline); // scheduled_deadline

    dst->set_scheduled_deadline(__tmp_scheduled_deadline);


}

void
peer_to_app_StartSequenceParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    StartSequenceParams *dst = (StartSequenceParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::StartSequenceParams *src = (::antaris_api_peer_to_peer::StartSequenceParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    size_t sequence_id_length = strnlen(src->sequence_id().c_str(), 16);
    if ( sequence_id_length >= 16 ) {
        printf("Error:  sequence_id_length should be less than 16 \n");
        return;
    }
    strncpy(&dst->sequence_id[0], src->sequence_id().c_str(), 16);
    size_t sequence_params_length = strnlen(src->sequence_params().c_str(), 64);
    if ( sequence_params_length >= 64 ) {
        printf("Error:  sequence_params_length should be less than 64 \n");
        return;
    }
    strncpy(&dst->sequence_params[0], src->sequence_params().c_str(), 64);
    dst->scheduled_deadline = src->scheduled_deadline();

}

void
displayShutdownParams(const void *obj)
{
    ShutdownParams *p = (ShutdownParams *)obj;

    printf("ShutdownParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("grace_time ==>\n");
    displayUINT16((void *)&p->grace_time);

}

void
app_to_peer_ShutdownParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    ShutdownParams *src = (ShutdownParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::ShutdownParams *dst = (::antaris_api_peer_to_peer::ShutdownParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    UINT32 __tmp_grace_time;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_UINT16(&src->grace_time, &__tmp_grace_time); // grace_time

    dst->set_grace_time(__tmp_grace_time);


}

void
peer_to_app_ShutdownParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    ShutdownParams *dst = (ShutdownParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::ShutdownParams *src = (::antaris_api_peer_to_peer::ShutdownParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->grace_time = src->grace_time();

}

void
displayHealthCheckParams(const void *obj)
{
    HealthCheckParams *p = (HealthCheckParams *)obj;

    printf("HealthCheckParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("application_state ==>\n");
    displayUINT16((void *)&p->application_state);
    printf("reqs_to_pc_in_err_cnt ==>\n");
    displayUINT16((void *)&p->reqs_to_pc_in_err_cnt);
    printf("resps_to_pc_in_err_cnt ==>\n");
    displayUINT16((void *)&p->resps_to_pc_in_err_cnt);

}

void
app_to_peer_HealthCheckParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    HealthCheckParams *src = (HealthCheckParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::HealthCheckParams *dst = (::antaris_api_peer_to_peer::HealthCheckParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    UINT32 __tmp_application_state;
    UINT32 __tmp_reqs_to_pc_in_err_cnt;
    UINT32 __tmp_resps_to_pc_in_err_cnt;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_UINT16(&src->application_state, &__tmp_application_state); // application_state

    dst->set_application_state(__tmp_application_state);

    app_to_peer_UINT16(&src->reqs_to_pc_in_err_cnt, &__tmp_reqs_to_pc_in_err_cnt); // reqs_to_pc_in_err_cnt

    dst->set_reqs_to_pc_in_err_cnt(__tmp_reqs_to_pc_in_err_cnt);

    app_to_peer_UINT16(&src->resps_to_pc_in_err_cnt, &__tmp_resps_to_pc_in_err_cnt); // resps_to_pc_in_err_cnt

    dst->set_resps_to_pc_in_err_cnt(__tmp_resps_to_pc_in_err_cnt);


}

void
peer_to_app_HealthCheckParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    HealthCheckParams *dst = (HealthCheckParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::HealthCheckParams *src = (::antaris_api_peer_to_peer::HealthCheckParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->application_state = src->application_state();
    dst->reqs_to_pc_in_err_cnt = src->reqs_to_pc_in_err_cnt();
    dst->resps_to_pc_in_err_cnt = src->resps_to_pc_in_err_cnt();

}

void
displayPayloadMetricsInfo(const void *obj)
{
    PayloadMetricsInfo *p = (PayloadMetricsInfo *)obj;

    printf("PayloadMetricsInfo %p =>\n", obj);

    printf("counter ==>\n");
    displayUINT32((void *)&p->counter);
    printf("names ==>\n");
    for (int i = 0; i < 16; i++) {
        displayINT8((void *)&p->names[i]);
    }


}

void
app_to_peer_PayloadMetricsInfo(const void *ptr_src_app, void *ptr_dst_peer)
{
    PayloadMetricsInfo *src = (PayloadMetricsInfo *)ptr_src_app;
    ::antaris_api_peer_to_peer::PayloadMetricsInfo *dst = (::antaris_api_peer_to_peer::PayloadMetricsInfo *)ptr_dst_peer;

    UINT32 __tmp_counter;

    app_to_peer_UINT32(&src->counter, &__tmp_counter); // counter

    dst->set_counter(__tmp_counter);

    dst->set_names(&src->names[0]);


}

void
peer_to_app_PayloadMetricsInfo(const void *ptr_src_peer, void *ptr_dst_app)
{
    PayloadMetricsInfo *dst = (PayloadMetricsInfo *)ptr_dst_app;
    ::antaris_api_peer_to_peer::PayloadMetricsInfo *src = (::antaris_api_peer_to_peer::PayloadMetricsInfo *)ptr_src_peer;

    dst->counter = src->counter();
    size_t names_length = strnlen(src->names().c_str(), 16);
    if ( names_length >= 16 ) {
        printf("Error:  names_length should be less than 16 \n");
        return;
    }
    strncpy(&dst->names[0], src->names().c_str(), 16);

}

void
displayReqPayloadMetricsParams(const void *obj)
{
    ReqPayloadMetricsParams *p = (ReqPayloadMetricsParams *)obj;

    printf("ReqPayloadMetricsParams %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);

}

void
app_to_peer_ReqPayloadMetricsParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    ReqPayloadMetricsParams *src = (ReqPayloadMetricsParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::ReqPayloadMetricsParams *dst = (::antaris_api_peer_to_peer::ReqPayloadMetricsParams *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);


}

void
peer_to_app_ReqPayloadMetricsParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    ReqPayloadMetricsParams *dst = (ReqPayloadMetricsParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::ReqPayloadMetricsParams *src = (::antaris_api_peer_to_peer::ReqPayloadMetricsParams *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();

}

void
displayPayloadMetricsResponse(const void *obj)
{
    PayloadMetricsResponse *p = (PayloadMetricsResponse *)obj;

    printf("PayloadMetricsResponse %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("timestamp ==>\n");
    displayUINT64((void *)&p->timestamp);
    printf("used_counter ==>\n");
    displayUINT32((void *)&p->used_counter);
    printf("metrics ==>\n");
    for (int i = 0; i < 8; i++) {
        displayPayloadMetricsInfo((void *)&p->metrics[i]);
    }


}

void
app_to_peer_PayloadMetricsResponse(const void *ptr_src_app, void *ptr_dst_peer)
{
    PayloadMetricsResponse *src = (PayloadMetricsResponse *)ptr_src_app;
    ::antaris_api_peer_to_peer::PayloadMetricsResponse *dst = (::antaris_api_peer_to_peer::PayloadMetricsResponse *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    UINT64 __tmp_timestamp;
    UINT32 __tmp_used_counter;
    PayloadMetricsInfo __tmp_metrics;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_UINT64(&src->timestamp, &__tmp_timestamp); // timestamp

    dst->set_timestamp(__tmp_timestamp);

    app_to_peer_UINT32(&src->used_counter, &__tmp_used_counter); // used_counter

    dst->set_used_counter(__tmp_used_counter);

    for (int i = 0; i < 8; i++) { // metrics
        ::antaris_api_peer_to_peer::PayloadMetricsInfo* dst_info;
        if (i >= dst->metrics_size()) {
            dst_info = dst->add_metrics();
        } else {
            dst_info = dst->mutable_metrics(i);
        }
        app_to_peer_PayloadMetricsInfo(&src->metrics[i], dst_info);
    }

}

void
peer_to_app_PayloadMetricsResponse(const void *ptr_src_peer, void *ptr_dst_app)
{
    PayloadMetricsResponse *dst = (PayloadMetricsResponse *)ptr_dst_app;
    ::antaris_api_peer_to_peer::PayloadMetricsResponse *src = (::antaris_api_peer_to_peer::PayloadMetricsResponse *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->timestamp = src->timestamp();
    dst->used_counter = src->used_counter();
    for (int i = 0; i < 8; i++) { // metrics
        const ::antaris_api_peer_to_peer::PayloadMetricsInfo &src_info = src->metrics(i);
        PayloadMetricsInfo *dst_info = &dst->metrics[i];

        peer_to_app_PayloadMetricsInfo(&src_info, dst_info);
    }

}

void
displayCmdSequenceDoneParams(const void *obj)
{
    CmdSequenceDoneParams *p = (CmdSequenceDoneParams *)obj;

    printf("CmdSequenceDoneParams %p =>\n", obj);

    printf("sequence_id ==>\n");
    for (int i = 0; i < 16; i++) {
        displayINT8((void *)&p->sequence_id[i]);
    }


}

void
app_to_peer_CmdSequenceDoneParams(const void *ptr_src_app, void *ptr_dst_peer)
{
    CmdSequenceDoneParams *src = (CmdSequenceDoneParams *)ptr_src_app;
    ::antaris_api_peer_to_peer::CmdSequenceDoneParams *dst = (::antaris_api_peer_to_peer::CmdSequenceDoneParams *)ptr_dst_peer;


    dst->set_sequence_id(&src->sequence_id[0]);


}

void
peer_to_app_CmdSequenceDoneParams(const void *ptr_src_peer, void *ptr_dst_app)
{
    CmdSequenceDoneParams *dst = (CmdSequenceDoneParams *)ptr_dst_app;
    ::antaris_api_peer_to_peer::CmdSequenceDoneParams *src = (::antaris_api_peer_to_peer::CmdSequenceDoneParams *)ptr_src_peer;

    size_t sequence_id_length = strnlen(src->sequence_id().c_str(), 16);
    if ( sequence_id_length >= 16 ) {
        printf("Error:  sequence_id_length should be less than 16 \n");
        return;
    }
    strncpy(&dst->sequence_id[0], src->sequence_id().c_str(), 16);

}

void
displayReqGnssEphStopDataReq(const void *obj)
{
    ReqGnssEphStopDataReq *p = (ReqGnssEphStopDataReq *)obj;

    printf("ReqGnssEphStopDataReq %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);

}

void
app_to_peer_ReqGnssEphStopDataReq(const void *ptr_src_app, void *ptr_dst_peer)
{
    ReqGnssEphStopDataReq *src = (ReqGnssEphStopDataReq *)ptr_src_app;
    ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq *dst = (::antaris_api_peer_to_peer::ReqGnssEphStopDataReq *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);


}

void
peer_to_app_ReqGnssEphStopDataReq(const void *ptr_src_peer, void *ptr_dst_app)
{
    ReqGnssEphStopDataReq *dst = (ReqGnssEphStopDataReq *)ptr_dst_app;
    ::antaris_api_peer_to_peer::ReqGnssEphStopDataReq *src = (::antaris_api_peer_to_peer::ReqGnssEphStopDataReq *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();

}

void
displayRespGnssEphStopDataReq(const void *obj)
{
    RespGnssEphStopDataReq *p = (RespGnssEphStopDataReq *)obj;

    printf("RespGnssEphStopDataReq %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("req_status ==>\n");
    displayINT32((void *)&p->req_status);

}

void
app_to_peer_RespGnssEphStopDataReq(const void *ptr_src_app, void *ptr_dst_peer)
{
    RespGnssEphStopDataReq *src = (RespGnssEphStopDataReq *)ptr_src_app;
    ::antaris_api_peer_to_peer::RespGnssEphStopDataReq *dst = (::antaris_api_peer_to_peer::RespGnssEphStopDataReq *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    INT32 __tmp_req_status;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_INT32(&src->req_status, &__tmp_req_status); // req_status

    dst->set_req_status(__tmp_req_status);


}

void
peer_to_app_RespGnssEphStopDataReq(const void *ptr_src_peer, void *ptr_dst_app)
{
    RespGnssEphStopDataReq *dst = (RespGnssEphStopDataReq *)ptr_dst_app;
    ::antaris_api_peer_to_peer::RespGnssEphStopDataReq *src = (::antaris_api_peer_to_peer::RespGnssEphStopDataReq *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->req_status = src->req_status();

}

void
displayReqGnssEphStartDataReq(const void *obj)
{
    ReqGnssEphStartDataReq *p = (ReqGnssEphStartDataReq *)obj;

    printf("ReqGnssEphStartDataReq %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("periodicity_in_ms ==>\n");
    displayUINT16((void *)&p->periodicity_in_ms);
    printf("eph2_enable ==>\n");
    displayINT8((void *)&p->eph2_enable);

}

void
app_to_peer_ReqGnssEphStartDataReq(const void *ptr_src_app, void *ptr_dst_peer)
{
    ReqGnssEphStartDataReq *src = (ReqGnssEphStartDataReq *)ptr_src_app;
    ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq *dst = (::antaris_api_peer_to_peer::ReqGnssEphStartDataReq *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    UINT32 __tmp_periodicity_in_ms;
    INT32 __tmp_eph2_enable;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_UINT16(&src->periodicity_in_ms, &__tmp_periodicity_in_ms); // periodicity_in_ms

    dst->set_periodicity_in_ms(__tmp_periodicity_in_ms);

    app_to_peer_INT8(&src->eph2_enable, &__tmp_eph2_enable); // eph2_enable

    dst->set_eph2_enable(__tmp_eph2_enable);


}

void
peer_to_app_ReqGnssEphStartDataReq(const void *ptr_src_peer, void *ptr_dst_app)
{
    ReqGnssEphStartDataReq *dst = (ReqGnssEphStartDataReq *)ptr_dst_app;
    ::antaris_api_peer_to_peer::ReqGnssEphStartDataReq *src = (::antaris_api_peer_to_peer::ReqGnssEphStartDataReq *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->periodicity_in_ms = src->periodicity_in_ms();
    dst->eph2_enable = src->eph2_enable();

}

void
displayRespGnssEphStartDataReq(const void *obj)
{
    RespGnssEphStartDataReq *p = (RespGnssEphStartDataReq *)obj;

    printf("RespGnssEphStartDataReq %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("req_status ==>\n");
    displayINT32((void *)&p->req_status);

}

void
app_to_peer_RespGnssEphStartDataReq(const void *ptr_src_app, void *ptr_dst_peer)
{
    RespGnssEphStartDataReq *src = (RespGnssEphStartDataReq *)ptr_src_app;
    ::antaris_api_peer_to_peer::RespGnssEphStartDataReq *dst = (::antaris_api_peer_to_peer::RespGnssEphStartDataReq *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    INT32 __tmp_req_status;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_INT32(&src->req_status, &__tmp_req_status); // req_status

    dst->set_req_status(__tmp_req_status);


}

void
peer_to_app_RespGnssEphStartDataReq(const void *ptr_src_peer, void *ptr_dst_app)
{
    RespGnssEphStartDataReq *dst = (RespGnssEphStartDataReq *)ptr_dst_app;
    ::antaris_api_peer_to_peer::RespGnssEphStartDataReq *src = (::antaris_api_peer_to_peer::RespGnssEphStartDataReq *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->req_status = src->req_status();

}

void
displayGnssEphData(const void *obj)
{
    GnssEphData *p = (GnssEphData *)obj;

    printf("GnssEphData %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("gps_fix_time ==>\n");
    displayUINT32((void *)&p->gps_fix_time);
    printf("gps_sys_time ==>\n");
    displayUINT32((void *)&p->gps_sys_time);
    printf("obc_time ==>\n");
    displayUINT64((void *)&p->obc_time);
    printf("gps_position_ecef ==>\n");
    for (int i = 0; i < 3; i++) {
        displayUINT32((void *)&p->gps_position_ecef[i]);
    }

    printf("gps_velocity_ecef ==>\n");
    for (int i = 0; i < 3; i++) {
        displayUINT32((void *)&p->gps_velocity_ecef[i]);
    }

    printf("gps_validity_flag_pos_vel ==>\n");
    displayUINT32((void *)&p->gps_validity_flag_pos_vel);
    printf("adcs_time ==>\n");
    displayUINT64((void *)&p->adcs_time);
    printf("position_wrt_eci ==>\n");
    for (int i = 0; i < 3; i++) {
        displayUINT64((void *)&p->position_wrt_eci[i]);
    }

    printf("velocity_wrt_eci ==>\n");
    for (int i = 0; i < 3; i++) {
        displayUINT64((void *)&p->velocity_wrt_eci[i]);
    }

    printf("position_wrt_ecef ==>\n");
    for (int i = 0; i < 3; i++) {
        displayUINT64((void *)&p->position_wrt_ecef[i]);
    }

    printf("velocity_wrt_ecef ==>\n");
    for (int i = 0; i < 3; i++) {
        displayUINT64((void *)&p->velocity_wrt_ecef[i]);
    }

    printf("body_rate ==>\n");
    for (int i = 0; i < 3; i++) {
        displayUINT32((void *)&p->body_rate[i]);
    }

    printf("attitude ==>\n");
    for (int i = 0; i < 3; i++) {
        displayUINT32((void *)&p->attitude[i]);
    }

    printf("adcs_pos ==>\n");
    for (int i = 0; i < 3; i++) {
        displayUINT32((void *)&p->adcs_pos[i]);
    }

    printf("nadir_vector_body ==>\n");
    for (int i = 0; i < 3; i++) {
        displayUINT32((void *)&p->nadir_vector_body[i]);
    }

    printf("gd_nadir_vector_body ==>\n");
    for (int i = 0; i < 3; i++) {
        displayUINT32((void *)&p->gd_nadir_vector_body[i]);
    }

    printf("beta_angle ==>\n");
    displayUINT32((void *)&p->beta_angle);
    printf("validity_flags ==>\n");
    displayUINT16((void *)&p->validity_flags);

}

void
app_to_peer_GnssEphData(const void *ptr_src_app, void *ptr_dst_peer)
{
    GnssEphData *src = (GnssEphData *)ptr_src_app;
    ::antaris_api_peer_to_peer::GnssEphData *dst = (::antaris_api_peer_to_peer::GnssEphData *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    UINT32 __tmp_gps_fix_time;
    UINT32 __tmp_gps_sys_time;
    UINT64 __tmp_obc_time;
    UINT32 __tmp_gps_position_ecef;
    UINT32 __tmp_gps_velocity_ecef;
    UINT32 __tmp_gps_validity_flag_pos_vel;
    UINT64 __tmp_adcs_time;
    UINT64 __tmp_position_wrt_eci;
    UINT64 __tmp_velocity_wrt_eci;
    UINT64 __tmp_position_wrt_ecef;
    UINT64 __tmp_velocity_wrt_ecef;
    UINT32 __tmp_body_rate;
    UINT32 __tmp_attitude;
    UINT32 __tmp_adcs_pos;
    UINT32 __tmp_nadir_vector_body;
    UINT32 __tmp_gd_nadir_vector_body;
    UINT32 __tmp_beta_angle;
    UINT32 __tmp_validity_flags;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_UINT32(&src->gps_fix_time, &__tmp_gps_fix_time); // gps_fix_time

    dst->set_gps_fix_time(__tmp_gps_fix_time);

    app_to_peer_UINT32(&src->gps_sys_time, &__tmp_gps_sys_time); // gps_sys_time

    dst->set_gps_sys_time(__tmp_gps_sys_time);

    app_to_peer_UINT64(&src->obc_time, &__tmp_obc_time); // obc_time

    dst->set_obc_time(__tmp_obc_time);

    for (int i = 0; i < 3; i++) { // gps_position_ecef
        UINT32 converted_value;
        app_to_peer_UINT32(&src->gps_position_ecef[i], &converted_value);
        dst->add_gps_position_ecef(converted_value);
    }
    for (int i = 0; i < 3; i++) { // gps_velocity_ecef
        UINT32 converted_value;
        app_to_peer_UINT32(&src->gps_velocity_ecef[i], &converted_value);
        dst->add_gps_velocity_ecef(converted_value);
    }
    app_to_peer_UINT32(&src->gps_validity_flag_pos_vel, &__tmp_gps_validity_flag_pos_vel); // gps_validity_flag_pos_vel

    dst->set_gps_validity_flag_pos_vel(__tmp_gps_validity_flag_pos_vel);

    app_to_peer_UINT64(&src->adcs_time, &__tmp_adcs_time); // adcs_time

    dst->set_adcs_time(__tmp_adcs_time);

    for (int i = 0; i < 3; i++) { // position_wrt_eci
        UINT64 converted_value;
        app_to_peer_UINT64(&src->position_wrt_eci[i], &converted_value);
        dst->add_position_wrt_eci(converted_value);
    }
    for (int i = 0; i < 3; i++) { // velocity_wrt_eci
        UINT64 converted_value;
        app_to_peer_UINT64(&src->velocity_wrt_eci[i], &converted_value);
        dst->add_velocity_wrt_eci(converted_value);
    }
    for (int i = 0; i < 3; i++) { // position_wrt_ecef
        UINT64 converted_value;
        app_to_peer_UINT64(&src->position_wrt_ecef[i], &converted_value);
        dst->add_position_wrt_ecef(converted_value);
    }
    for (int i = 0; i < 3; i++) { // velocity_wrt_ecef
        UINT64 converted_value;
        app_to_peer_UINT64(&src->velocity_wrt_ecef[i], &converted_value);
        dst->add_velocity_wrt_ecef(converted_value);
    }
    for (int i = 0; i < 3; i++) { // body_rate
        UINT32 converted_value;
        app_to_peer_UINT32(&src->body_rate[i], &converted_value);
        dst->add_body_rate(converted_value);
    }
    for (int i = 0; i < 3; i++) { // attitude
        UINT32 converted_value;
        app_to_peer_UINT32(&src->attitude[i], &converted_value);
        dst->add_attitude(converted_value);
    }
    for (int i = 0; i < 3; i++) { // adcs_pos
        UINT32 converted_value;
        app_to_peer_UINT32(&src->adcs_pos[i], &converted_value);
        dst->add_adcs_pos(converted_value);
    }
    for (int i = 0; i < 3; i++) { // nadir_vector_body
        UINT32 converted_value;
        app_to_peer_UINT32(&src->nadir_vector_body[i], &converted_value);
        dst->add_nadir_vector_body(converted_value);
    }
    for (int i = 0; i < 3; i++) { // gd_nadir_vector_body
        UINT32 converted_value;
        app_to_peer_UINT32(&src->gd_nadir_vector_body[i], &converted_value);
        dst->add_gd_nadir_vector_body(converted_value);
    }
    app_to_peer_UINT32(&src->beta_angle, &__tmp_beta_angle); // beta_angle

    dst->set_beta_angle(__tmp_beta_angle);

    app_to_peer_UINT16(&src->validity_flags, &__tmp_validity_flags); // validity_flags

    dst->set_validity_flags(__tmp_validity_flags);


}

void
peer_to_app_GnssEphData(const void *ptr_src_peer, void *ptr_dst_app)
{
    GnssEphData *dst = (GnssEphData *)ptr_dst_app;
    ::antaris_api_peer_to_peer::GnssEphData *src = (::antaris_api_peer_to_peer::GnssEphData *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->gps_fix_time = src->gps_fix_time();
    dst->gps_sys_time = src->gps_sys_time();
    dst->obc_time = src->obc_time();
    for (int i = 1; i < 3; i++) { // gps_position_ecef
        UINT32 src_info = src->gps_position_ecef(i);
        UINT32 *dst_info = &dst->gps_position_ecef[i];

        peer_to_app_UINT32(&src_info, dst_info);
    }
    for (int i = 1; i < 3; i++) { // gps_velocity_ecef
        UINT32 src_info = src->gps_velocity_ecef(i);
        UINT32 *dst_info = &dst->gps_velocity_ecef[i];

        peer_to_app_UINT32(&src_info, dst_info);
    }
    dst->gps_validity_flag_pos_vel = src->gps_validity_flag_pos_vel();
    dst->adcs_time = src->adcs_time();
    for (int i = 1; i < 3; i++) { // position_wrt_eci
        UINT64 src_info = src->position_wrt_eci(i);
        UINT64 *dst_info = &dst->position_wrt_eci[i];

        peer_to_app_UINT64(&src_info, dst_info);
    }
    for (int i = 1; i < 3; i++) { // velocity_wrt_eci
        UINT64 src_info = src->velocity_wrt_eci(i);
        UINT64 *dst_info = &dst->velocity_wrt_eci[i];

        peer_to_app_UINT64(&src_info, dst_info);
    }
    for (int i = 1; i < 3; i++) { // position_wrt_ecef
        UINT64 src_info = src->position_wrt_ecef(i);
        UINT64 *dst_info = &dst->position_wrt_ecef[i];

        peer_to_app_UINT64(&src_info, dst_info);
    }
    for (int i = 1; i < 3; i++) { // velocity_wrt_ecef
        UINT64 src_info = src->velocity_wrt_ecef(i);
        UINT64 *dst_info = &dst->velocity_wrt_ecef[i];

        peer_to_app_UINT64(&src_info, dst_info);
    }
    for (int i = 1; i < 3; i++) { // body_rate
        UINT32 src_info = src->body_rate(i);
        UINT32 *dst_info = &dst->body_rate[i];

        peer_to_app_UINT32(&src_info, dst_info);
    }
    for (int i = 1; i < 3; i++) { // attitude
        UINT32 src_info = src->attitude(i);
        UINT32 *dst_info = &dst->attitude[i];

        peer_to_app_UINT32(&src_info, dst_info);
    }
    for (int i = 1; i < 3; i++) { // adcs_pos
        UINT32 src_info = src->adcs_pos(i);
        UINT32 *dst_info = &dst->adcs_pos[i];

        peer_to_app_UINT32(&src_info, dst_info);
    }
    for (int i = 1; i < 3; i++) { // nadir_vector_body
        UINT32 src_info = src->nadir_vector_body(i);
        UINT32 *dst_info = &dst->nadir_vector_body[i];

        peer_to_app_UINT32(&src_info, dst_info);
    }
    for (int i = 1; i < 3; i++) { // gd_nadir_vector_body
        UINT32 src_info = src->gd_nadir_vector_body(i);
        UINT32 *dst_info = &dst->gd_nadir_vector_body[i];

        peer_to_app_UINT32(&src_info, dst_info);
    }
    dst->beta_angle = src->beta_angle();
    dst->validity_flags = src->validity_flags();

}

void
displayReqGetEpsVoltageStopReq(const void *obj)
{
    ReqGetEpsVoltageStopReq *p = (ReqGetEpsVoltageStopReq *)obj;

    printf("ReqGetEpsVoltageStopReq %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);

}

void
app_to_peer_ReqGetEpsVoltageStopReq(const void *ptr_src_app, void *ptr_dst_peer)
{
    ReqGetEpsVoltageStopReq *src = (ReqGetEpsVoltageStopReq *)ptr_src_app;
    ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq *dst = (::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);


}

void
peer_to_app_ReqGetEpsVoltageStopReq(const void *ptr_src_peer, void *ptr_dst_app)
{
    ReqGetEpsVoltageStopReq *dst = (ReqGetEpsVoltageStopReq *)ptr_dst_app;
    ::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq *src = (::antaris_api_peer_to_peer::ReqGetEpsVoltageStopReq *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();

}

void
displayRespGetEpsVoltageStopReq(const void *obj)
{
    RespGetEpsVoltageStopReq *p = (RespGetEpsVoltageStopReq *)obj;

    printf("RespGetEpsVoltageStopReq %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("req_status ==>\n");
    displayINT32((void *)&p->req_status);

}

void
app_to_peer_RespGetEpsVoltageStopReq(const void *ptr_src_app, void *ptr_dst_peer)
{
    RespGetEpsVoltageStopReq *src = (RespGetEpsVoltageStopReq *)ptr_src_app;
    ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq *dst = (::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    INT32 __tmp_req_status;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_INT32(&src->req_status, &__tmp_req_status); // req_status

    dst->set_req_status(__tmp_req_status);


}

void
peer_to_app_RespGetEpsVoltageStopReq(const void *ptr_src_peer, void *ptr_dst_app)
{
    RespGetEpsVoltageStopReq *dst = (RespGetEpsVoltageStopReq *)ptr_dst_app;
    ::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq *src = (::antaris_api_peer_to_peer::RespGetEpsVoltageStopReq *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->req_status = src->req_status();

}

void
displayReqGetEpsVoltageStartReq(const void *obj)
{
    ReqGetEpsVoltageStartReq *p = (ReqGetEpsVoltageStartReq *)obj;

    printf("ReqGetEpsVoltageStartReq %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("periodicity_in_ms ==>\n");
    displayUINT16((void *)&p->periodicity_in_ms);

}

void
app_to_peer_ReqGetEpsVoltageStartReq(const void *ptr_src_app, void *ptr_dst_peer)
{
    ReqGetEpsVoltageStartReq *src = (ReqGetEpsVoltageStartReq *)ptr_src_app;
    ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq *dst = (::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    UINT32 __tmp_periodicity_in_ms;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_UINT16(&src->periodicity_in_ms, &__tmp_periodicity_in_ms); // periodicity_in_ms

    dst->set_periodicity_in_ms(__tmp_periodicity_in_ms);


}

void
peer_to_app_ReqGetEpsVoltageStartReq(const void *ptr_src_peer, void *ptr_dst_app)
{
    ReqGetEpsVoltageStartReq *dst = (ReqGetEpsVoltageStartReq *)ptr_dst_app;
    ::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq *src = (::antaris_api_peer_to_peer::ReqGetEpsVoltageStartReq *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->periodicity_in_ms = src->periodicity_in_ms();

}

void
displayRespGetEpsVoltageStartReq(const void *obj)
{
    RespGetEpsVoltageStartReq *p = (RespGetEpsVoltageStartReq *)obj;

    printf("RespGetEpsVoltageStartReq %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("req_status ==>\n");
    displayINT32((void *)&p->req_status);

}

void
app_to_peer_RespGetEpsVoltageStartReq(const void *ptr_src_app, void *ptr_dst_peer)
{
    RespGetEpsVoltageStartReq *src = (RespGetEpsVoltageStartReq *)ptr_src_app;
    ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq *dst = (::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    INT32 __tmp_req_status;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_INT32(&src->req_status, &__tmp_req_status); // req_status

    dst->set_req_status(__tmp_req_status);


}

void
peer_to_app_RespGetEpsVoltageStartReq(const void *ptr_src_peer, void *ptr_dst_app)
{
    RespGetEpsVoltageStartReq *dst = (RespGetEpsVoltageStartReq *)ptr_dst_app;
    ::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq *src = (::antaris_api_peer_to_peer::RespGetEpsVoltageStartReq *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->req_status = src->req_status();

}

void
displayGetEpsVoltage(const void *obj)
{
    GetEpsVoltage *p = (GetEpsVoltage *)obj;

    printf("GetEpsVoltage %p =>\n", obj);

    printf("correlation_id ==>\n");
    displayUINT16((void *)&p->correlation_id);
    printf("eps_voltage ==>\n");
    displayFLOAT((void *)&p->eps_voltage);

}

void
app_to_peer_GetEpsVoltage(const void *ptr_src_app, void *ptr_dst_peer)
{
    GetEpsVoltage *src = (GetEpsVoltage *)ptr_src_app;
    ::antaris_api_peer_to_peer::GetEpsVoltage *dst = (::antaris_api_peer_to_peer::GetEpsVoltage *)ptr_dst_peer;

    UINT32 __tmp_correlation_id;
    FLOAT __tmp_eps_voltage;

    app_to_peer_UINT16(&src->correlation_id, &__tmp_correlation_id); // correlation_id

    dst->set_correlation_id(__tmp_correlation_id);

    app_to_peer_FLOAT(&src->eps_voltage, &__tmp_eps_voltage); // eps_voltage

    dst->set_eps_voltage(__tmp_eps_voltage);


}

void
peer_to_app_GetEpsVoltage(const void *ptr_src_peer, void *ptr_dst_app)
{
    GetEpsVoltage *dst = (GetEpsVoltage *)ptr_dst_app;
    ::antaris_api_peer_to_peer::GetEpsVoltage *src = (::antaris_api_peer_to_peer::GetEpsVoltage *)ptr_src_peer;

    dst->correlation_id = src->correlation_id();
    dst->eps_voltage = src->eps_voltage();

}

void
displayAntarisApiCallbackFuncList(const void *obj)
{
    AntarisApiCallbackFuncList *p = (AntarisApiCallbackFuncList *)obj;

    printf("AntarisApiCallbackFuncList %p =>\n", obj);

    printf("start_sequence ==>\n");
    displayStartSequence_Fptr((void *)&p->start_sequence);
    printf("shutdown_app ==>\n");
    displayShutdownApp_Fptr((void *)&p->shutdown_app);
    printf("process_health_check ==>\n");
    displayProcessHealthCheck_Fptr((void *)&p->process_health_check);
    printf("process_response_register ==>\n");
    displayProcessResponseRegister_Fptr((void *)&p->process_response_register);
    printf("process_response_get_current_location ==>\n");
    displayProcessResponseGetCurrentLocation_Fptr((void *)&p->process_response_get_current_location);
    printf("process_response_stage_file_download ==>\n");
    displayProcessResponseStageFileDownload_Fptr((void *)&p->process_response_stage_file_download);
    printf("process_response_payload_power_control ==>\n");
    displayProcessResponsePayloadPowerControl_Fptr((void *)&p->process_response_payload_power_control);
    printf("req_payload_metrics ==>\n");
    displayProcessReqPayloadMetrics_Fptr((void *)&p->req_payload_metrics);
    printf("process_response_gnss_eph_stop ==>\n");
    displayProcessRespGnssEphStopDataReq_Fptr((void *)&p->process_response_gnss_eph_stop);
    printf("process_response_gnss_eph_start ==>\n");
    displayProcessRespGnssEphStartDataReq_Fptr((void *)&p->process_response_gnss_eph_start);
    printf("process_cb_gnss_eph_data ==>\n");
    displayProcessGnssEphData_Fptr((void *)&p->process_cb_gnss_eph_data);
    printf("process_response_get_eps_voltage_stop ==>\n");
    displayProcessRespGetEpsVoltageStopReq_Fptr((void *)&p->process_response_get_eps_voltage_stop);
    printf("process_response_get_eps_voltage_start ==>\n");
    displayProcessRespGetEpsVoltageStartReq_Fptr((void *)&p->process_response_get_eps_voltage_start);
    printf("process_cb_get_eps_voltage ==>\n");
    displayProcessGetEpsVoltage_Fptr((void *)&p->process_cb_get_eps_voltage);

}

void
displayAntarisCorrelationId(const void *obj)
{
    AntarisCorrelationId *p = (AntarisCorrelationId *)obj;

    printf("AntarisCorrelationId %p =>\n", obj);


}

void
app_to_peer_AntarisCorrelationId(const void *ptr_src_app, void *ptr_dst_peer)
{
    AntarisCorrelationId *src = (AntarisCorrelationId *)ptr_src_app;
    ::antaris_api_peer_to_peer::AntarisCorrelationId *dst = (::antaris_api_peer_to_peer::AntarisCorrelationId *)ptr_dst_peer;



}

void
peer_to_app_AntarisCorrelationId(const void *ptr_src_peer, void *ptr_dst_app)
{
    AntarisCorrelationId *dst = (AntarisCorrelationId *)ptr_dst_app;
    ::antaris_api_peer_to_peer::AntarisCorrelationId *src = (::antaris_api_peer_to_peer::AntarisCorrelationId *)ptr_src_peer;


}

void
displayAntarisReturnType(const void *obj)
{
    AntarisReturnType *p = (AntarisReturnType *)obj;

    printf("AntarisReturnType %p =>\n", obj);

    printf("return_code ==>\n");
    displayAntarisReturnCode((void *)&p->return_code);

}

void
app_to_peer_AntarisReturnType(const void *ptr_src_app, void *ptr_dst_peer)
{
    AntarisReturnType *src = (AntarisReturnType *)ptr_src_app;
    ::antaris_api_peer_to_peer::AntarisReturnType *dst = (::antaris_api_peer_to_peer::AntarisReturnType *)ptr_dst_peer;

    AntarisReturnCode __tmp_return_code;

    app_to_peer_AntarisReturnCode(&src->return_code, &__tmp_return_code); // return_code

    dst->set_return_code((::antaris_api_peer_to_peer::AntarisReturnCode)__tmp_return_code);


}

void
peer_to_app_AntarisReturnType(const void *ptr_src_peer, void *ptr_dst_app)
{
    AntarisReturnType *dst = (AntarisReturnType *)ptr_dst_app;
    ::antaris_api_peer_to_peer::AntarisReturnType *src = (::antaris_api_peer_to_peer::AntarisReturnType *)ptr_src_peer;

    dst->return_code = (AntarisReturnCode)src->return_code();

}

void
displayAntarisReturnCode(void *obj)
{
    printf("%s => %d\n", "AntarisReturnCode", *(INT32 *)obj);
}

void
app_to_peer_AntarisReturnCode(void *ptr_src_app, void *ptr_dst_peer)
{
    AntarisReturnCode *src = (AntarisReturnCode *)ptr_src_app;
    AntarisReturnCode *dst = (AntarisReturnCode *)ptr_dst_peer;

    *dst = *src;

}


} // extern "C"

